import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; bound]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.mockito.asm.Type type31 = classInfo26.getSuperType();
        org.mockito.asm.Type type32 = type31.getElementType();
        int int33 = type31.getSize();
        java.lang.String str34 = type31.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java/beans/FeatureDescriptor" + "'", str34, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Zjava.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound]");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method10, method11);
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor");
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNull(propertyEditor13);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; expert; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor14.setShortDescription("float");
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor14.createPropertyEditor((java.lang.Object) classArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass9, classArray23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(propertyEditor27);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("[Ljava/lang/Class;", method1, method2);
        propertyDescriptor3.setExpert(true);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        boolean boolean13 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()J");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!B" + "'", str4, "hi!B");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!B" + "'", str5, "hi!B");
        org.junit.Assert.assertNotNull(type6);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.String str7 = signature3.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        boolean boolean15 = signature3.equals((java.lang.Object) strArray14);
        java.lang.String str16 = signature3.getDescriptor();
        org.mockito.asm.Type type17 = signature3.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        int int24 = type21.getOpcode(3);
        java.lang.String str25 = type21.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type19, type21, type26, type28, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray32);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type17, typeArray32);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("byte", "B");
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        java.lang.String str42 = propertyDescriptor41.getShortDescription();
        java.lang.reflect.Method method43 = propertyDescriptor41.getWriteMethod();
        java.lang.String str44 = propertyDescriptor41.getShortDescription();
        propertyDescriptor41.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method48 = null;
        propertyDescriptor41.setReadMethod(method48);
        propertyDescriptor41.setDisplayName("double");
        java.lang.String str52 = propertyDescriptor41.getName();
        boolean boolean53 = signature37.equals((java.lang.Object) str52);
        boolean boolean54 = signature34.equals((java.lang.Object) str52);
        org.mockito.asm.Type[] typeArray55 = signature34.getArgumentTypes();
        org.mockito.asm.Type[] typeArray56 = signature34.getArgumentTypes();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "byte" + "'", str25, "byte");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(DBBBD)V" + "'", str33, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNull(method43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setDisplayName("org.mockito.cglib.core.Signature");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyType();
        propertyDescriptor12.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        java.lang.String str26 = propertyDescriptor23.getShortDescription();
        propertyDescriptor23.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        java.lang.reflect.Method method31 = null;
        propertyDescriptor23.setReadMethod(method31);
        propertyDescriptor23.setShortDescription("(DBBBD)V");
        propertyDescriptor3.setValue("hi!byteB", (java.lang.Object) propertyDescriptor23);
        java.lang.reflect.Method method36 = null;
        propertyDescriptor23.setReadMethod(method36);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor23.setWriteMethod(method38);
        java.lang.reflect.Method method40 = propertyDescriptor23.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertNull(method40);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=org.mockito.asm.Type; shortDescription=hi!; values={byte=0}; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        java.lang.reflect.Method method8 = propertyDescriptor6.getWriteMethod();
        java.lang.String str9 = propertyDescriptor6.getShortDescription();
        propertyDescriptor6.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor6.setReadMethod(method13);
        java.lang.Object obj16 = propertyDescriptor6.getValue("java/beans/PropertyDescriptor");
        boolean boolean17 = type1.equals((java.lang.Object) "java/beans/PropertyDescriptor");
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor21.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type28 = signature27.getReturnType();
        java.lang.String str29 = signature27.getName();
        org.mockito.asm.Type type30 = signature27.getReturnType();
        java.lang.String str31 = signature27.getDescriptor();
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        boolean boolean39 = signature27.equals((java.lang.Object) strArray38);
        java.lang.String str40 = signature27.getDescriptor();
        org.mockito.asm.Type type41 = signature27.getReturnType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        int int48 = type45.getOpcode(3);
        java.lang.String str49 = type45.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type43, type45, type50, type52, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray56);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type41, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray56);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", type1, typeArray56);
        java.lang.String str61 = type1.getClassName();
        java.lang.Class<?> wildcardClass62 = type1.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass62);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "double" + "'", str44, "double");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "byte" + "'", str49, "byte");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str59, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "byte" + "'", str61, "byte");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(type65);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        propertyDescriptor3.setConstrained(true);
        boolean boolean19 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        java.lang.String str21 = propertyDescriptor3.getName();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNotNull(strEnumeration23);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.Signature", "hi!B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type5 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str3, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str4, "org.mockito.cglib.core.Signature");
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getDisplayName();
        boolean boolean38 = propertyDescriptor36.isHidden();
        propertyDescriptor36.setHidden(false);
        boolean boolean41 = classInfo18.equals((java.lang.Object) propertyDescriptor36);
        org.mockito.asm.Type type42 = classInfo18.getSuperType();
        int int43 = type42.getSort();
        java.lang.Class<?> wildcardClass44 = type42.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("double", "java/beans/PropertyDescriptor");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.getDescriptor();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        propertyDescriptor9.setValue("double", (java.lang.Object) ' ');
        java.lang.reflect.Method method15 = null;
        propertyDescriptor9.setWriteMethod(method15);
        java.lang.reflect.Method method17 = propertyDescriptor9.getReadMethod();
        boolean boolean18 = signature2.equals((java.lang.Object) propertyDescriptor9);
        java.lang.String str19 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "double" + "'", str3, "double");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "double" + "'", str4, "double");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 1 };
        java.lang.ClassLoader classLoader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class5 = org.mockito.cglib.core.ReflectUtils.defineClass("L(DBBBD)V;", byteArray3, classLoader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 1]");
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass21);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=(DBBBD)V]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor23.attributeNames();
        propertyDescriptor23.setDisplayName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        propertyDescriptor23.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor23.setConstrained(true);
        boolean boolean37 = propertyDescriptor23.isExpert();
        propertyDescriptor23.setExpert(false);
        boolean boolean40 = propertyDescriptor23.isExpert();
        java.lang.String str41 = propertyDescriptor23.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        java.lang.String str25 = propertyDescriptor22.getShortDescription();
        boolean boolean26 = propertyDescriptor22.isPreferred();
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.String str32 = signature30.getName();
        org.mockito.asm.Type type33 = signature30.getReturnType();
        propertyDescriptor22.setValue("B", (java.lang.Object) type33);
        propertyDescriptor22.setShortDescription("byte");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.Class<?> wildcardClass44 = propertyDescriptor43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        java.lang.String str46 = classInfo45.toString();
        org.mockito.asm.Type type47 = classInfo45.getSuperType();
        boolean boolean48 = classInfo39.equals((java.lang.Object) classInfo45);
        org.mockito.asm.Type type49 = classInfo45.getType();
        org.mockito.asm.Type type50 = classInfo45.getType();
        org.mockito.asm.Type type51 = classInfo45.getType();
        java.lang.String str52 = classInfo45.toString();
        org.mockito.asm.Type type53 = classInfo45.getType();
        propertyDescriptor3.setValue("Ljava/beans/FeatureDescriptor;", (java.lang.Object) classInfo45);
        propertyDescriptor3.setDisplayName("Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.String str57 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.beans.PropertyDescriptor" + "'", str46, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.beans.PropertyDescriptor" + "'", str52, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str57, "Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        boolean boolean3 = type1.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; preferred; constrained]");
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, false, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type[] typeArray11 = classInfo7.getInterfaces();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str15 = signature14.getName();
        java.lang.String str16 = signature14.toString();
        java.lang.String str17 = signature14.toString();
        java.lang.String str18 = signature14.getDescriptor();
        boolean boolean19 = classInfo7.equals((java.lang.Object) signature14);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("double", (java.lang.Object) ' ');
        boolean boolean29 = propertyDescriptor23.isExpert();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.Class<?> wildcardClass35 = propertyDescriptor34.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass35);
        propertyDescriptor23.setValue("float", (java.lang.Object) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        int int39 = classInfo38.getModifiers();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.String str44 = propertyDescriptor43.getShortDescription();
        java.lang.reflect.Method method45 = propertyDescriptor43.getWriteMethod();
        propertyDescriptor43.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean49 = classInfo38.equals((java.lang.Object) propertyDescriptor43);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor43.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration51 = propertyDescriptor43.attributeNames();
        propertyDescriptor43.setConstrained(false);
        boolean boolean54 = classInfo7.equals((java.lang.Object) propertyDescriptor43);
        java.lang.reflect.Method method55 = null;
        propertyDescriptor43.setReadMethod(method55);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!B" + "'", str16, "hi!B");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!B" + "'", str17, "hi!B");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/beans/PropertyDescriptor" + "'", str36, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(method45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(strEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int3 = type1.getOpcode((int) (short) 10);
        java.lang.String str4 = type1.getDescriptor();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.String str9 = propertyDescriptor8.getShortDescription();
        java.lang.reflect.Method method10 = propertyDescriptor8.getWriteMethod();
        propertyDescriptor8.setValue("double", (java.lang.Object) ' ');
        boolean boolean14 = propertyDescriptor8.isExpert();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        propertyDescriptor8.setValue("float", (java.lang.Object) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type27 = signature26.getReturnType();
        java.lang.String str28 = signature26.getName();
        org.mockito.asm.Type type29 = signature26.getReturnType();
        boolean boolean30 = classInfo23.equals((java.lang.Object) type29);
        java.lang.String str31 = classInfo23.toString();
        org.mockito.asm.Type type32 = classInfo23.getSuperType();
        org.mockito.asm.Type[] typeArray33 = classInfo23.getInterfaces();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", type1, typeArray33);
        java.lang.String str35 = signature34.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V" + "'", str4, "V");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java/beans/PropertyDescriptor" + "'", str21, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.beans.PropertyDescriptor" + "'", str31, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "()V" + "'", str35, "()V");
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        boolean boolean22 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/cglib/core/Signature;()Lorg/mockito/cglib/core/Signature;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(DBBBD)B");
        java.lang.String str5 = type4.getClassName();
        boolean boolean6 = type2.equals((java.lang.Object) type4);
        int int7 = type2.getSize();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        propertyDescriptor11.setValue("double", (java.lang.Object) ' ');
        boolean boolean17 = propertyDescriptor11.isExpert();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        propertyDescriptor11.setValue("float", (java.lang.Object) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        int int27 = classInfo26.getModifiers();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean37 = classInfo26.equals((java.lang.Object) propertyDescriptor31);
        java.lang.Class<?> wildcardClass38 = propertyDescriptor31.getPropertyEditorClass();
        java.lang.reflect.Method method39 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setConstrained(false);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        java.lang.String str47 = propertyDescriptor46.getShortDescription();
        java.lang.reflect.Method method48 = propertyDescriptor46.getWriteMethod();
        java.lang.String str49 = propertyDescriptor46.getShortDescription();
        boolean boolean50 = propertyDescriptor46.isPreferred();
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type55 = signature54.getReturnType();
        java.lang.String str56 = signature54.getName();
        org.mockito.asm.Type type57 = signature54.getReturnType();
        propertyDescriptor46.setValue("B", (java.lang.Object) type57);
        propertyDescriptor46.setShortDescription("byte");
        java.lang.Class<?> wildcardClass61 = propertyDescriptor46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("hi!", method65, method66);
        java.lang.Class<?> wildcardClass68 = propertyDescriptor67.getClass();
        org.mockito.cglib.core.ClassInfo classInfo69 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass68);
        java.lang.String str70 = classInfo69.toString();
        org.mockito.asm.Type type71 = classInfo69.getSuperType();
        boolean boolean72 = classInfo63.equals((java.lang.Object) classInfo69);
        org.mockito.asm.Type type73 = classInfo69.getType();
        org.mockito.asm.Type type74 = classInfo69.getType();
        org.mockito.asm.Type type75 = classInfo69.getType();
        org.mockito.asm.Type[] typeArray76 = classInfo69.getInterfaces();
        propertyDescriptor31.setValue("()Ljava/beans/PropertyDescriptor;", (java.lang.Object) typeArray76);
        org.mockito.cglib.core.Signature signature78 = new org.mockito.cglib.core.Signature("va.lang.Object", type2, typeArray76);
        java.lang.String str79 = signature78.getDescriptor();
        java.lang.String str80 = signature78.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byte" + "'", str5, "byte");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classInfo69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.beans.PropertyDescriptor" + "'", str70, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "()Llong;" + "'", str79, "()Llong;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "va.lang.Object()Llong;" + "'", str80, "va.lang.Object()Llong;");
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lorg.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.String str19 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str22 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str22, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]");
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        boolean boolean18 = propertyDescriptor12.isExpert();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        propertyDescriptor12.setValue("float", (java.lang.Object) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.String str32 = signature30.getName();
        org.mockito.asm.Type type33 = signature30.getReturnType();
        boolean boolean34 = classInfo27.equals((java.lang.Object) type33);
        java.lang.String str35 = classInfo27.toString();
        org.mockito.asm.Type type36 = classInfo27.getSuperType();
        org.mockito.asm.Type type37 = classInfo27.getSuperType();
        int int39 = type37.getOpcode(4);
        propertyDescriptor3.setValue("LD;", (java.lang.Object) 4);
        boolean boolean41 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor3.getPropertyType();
        java.lang.String str43 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor" + "'", str35, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(DBBBD)Lhi!;" + "'", str43, "(DBBBD)Lhi!;");
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lhi!;float" + "'", str5, "Lhi!;float");
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "byteB");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        int int17 = type14.getOpcode(3);
        java.lang.String str18 = type14.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type12, type14, type19, type21, type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type11, type27, type30, type32, type33 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        int int43 = type40.getOpcode(3);
        java.lang.String str44 = type40.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type38, type40, type45, type47, type49 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray51);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.String str58 = propertyDescriptor57.getShortDescription();
        java.lang.reflect.Method method59 = propertyDescriptor57.getWriteMethod();
        propertyDescriptor57.setValue("double", (java.lang.Object) ' ');
        boolean boolean63 = propertyDescriptor57.isExpert();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("hi!", method66, method67);
        java.lang.Class<?> wildcardClass69 = propertyDescriptor68.getClass();
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        propertyDescriptor57.setValue("float", (java.lang.Object) wildcardClass69);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass69);
        int int73 = classInfo72.getModifiers();
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("hi!", method75, method76);
        java.lang.String str78 = propertyDescriptor77.getShortDescription();
        java.lang.reflect.Method method79 = propertyDescriptor77.getWriteMethod();
        propertyDescriptor77.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean83 = classInfo72.equals((java.lang.Object) propertyDescriptor77);
        int int84 = classInfo72.getModifiers();
        org.mockito.asm.Type[] typeArray85 = classInfo72.getInterfaces();
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray85);
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("Lhi!;float", type6, typeArray85);
        boolean boolean88 = signature2.equals((java.lang.Object) signature87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray89 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!byteB" + "'", str3, "hi!byteB");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "double" + "'", str13, "double");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "byte" + "'", str18, "byte");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "double" + "'", str24, "double");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(DBBBD)V" + "'", str26, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lhi!;" + "'", str31, "Lhi!;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "double" + "'", str34, "double");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(VBLhi!;SD)B" + "'", str36, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "double" + "'", str50, "double");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)V" + "'", str52, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)B" + "'", str53, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java/beans/PropertyDescriptor" + "'", str70, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNull(method79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "()B" + "'", str86, "()B");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class org.mockito.cglib.core.Signature]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean10 = classInfo7.equals((java.lang.Object) type9);
        java.lang.String str11 = classInfo7.toString();
        org.mockito.asm.Type type12 = classInfo7.getSuperType();
        int int13 = classInfo7.getModifiers();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str11, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Objectorg.mockito.cglib.core.Signature", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B; values={double= }]");
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.util.List list24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list25 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass18, list24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str22, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str23, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=B]", "double");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type5 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=B]double" + "'", str3, "java.beans.PropertyDescriptor[name=B]double");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=B]" + "'", str4, "java.beans.PropertyDescriptor[name=B]");
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = type0.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        int int16 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor23 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray22);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str10, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str13, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;" + "'", str2, "Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        int int17 = type14.getOpcode(3);
        java.lang.String str18 = type14.getClassName();
        java.lang.String str19 = type14.getClassName();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        boolean boolean22 = type14.equals((java.lang.Object) classArray20);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass6, classArray20, (java.lang.Object[]) propertyDescriptorArray26);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "byte" + "'", str18, "byte");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "byte" + "'", str19, "byte");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        java.lang.Class<?> wildcardClass31 = classInfo18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method34 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("float", method1, method2);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getDisplayName();
        boolean boolean13 = propertyDescriptor11.isHidden();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getClass();
        java.util.List list20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list21 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass19, list20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str7, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str17, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.mockito.asm.Type type0 = null;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        java.lang.String str15 = propertyDescriptor12.getDisplayName();
        boolean boolean16 = classInfo8.equals((java.lang.Object) str15);
        org.mockito.asm.Type type17 = classInfo8.getSuperType();
        org.mockito.asm.Type type18 = classInfo8.getType();
        org.mockito.asm.Type[] typeArray19 = classInfo8.getInterfaces();
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("L(DBBBD)V;");
        int int3 = type2.getSize();
        int int5 = type2.getOpcode(19);
        java.lang.String str6 = type2.getDescriptor();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.Class<?> wildcardClass13 = signature11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        java.lang.Class<?> wildcardClass19 = signature17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type[] typeArray22 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type14, typeArray22);
        org.mockito.asm.Type type24 = type14.getElementType();
        int int25 = type14.getSize();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor29.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type36 = signature35.getReturnType();
        java.lang.String str37 = signature35.getName();
        org.mockito.asm.Type type38 = signature35.getReturnType();
        java.lang.String str39 = signature35.getDescriptor();
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        int int42 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        boolean boolean47 = signature35.equals((java.lang.Object) strArray46);
        java.lang.String str48 = signature35.getDescriptor();
        org.mockito.asm.Type type49 = signature35.getReturnType();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        int int56 = type53.getOpcode(3);
        java.lang.String str57 = type53.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        int int59 = type58.getSort();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        int int61 = type60.getSort();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type51, type53, type58, type60, type62 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray64);
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type49, typeArray64);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray64);
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("C", type14, typeArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=double; shortDescription=()Ljava/beans/PropertyDescriptor;; values={java.beans.PropertyDescriptor[name=hi!]=0}]", type2, typeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=double; shortDescription=()Ljava/beans/PropertyDescriptor;; values={java.beans.PropertyDescriptor[name=hi!]=0}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "B" + "'", str39, "B");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "B" + "'", str48, "B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "double" + "'", str52, "double");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "byte" + "'", str57, "byte");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(DBBBD)V" + "'", str65, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str67, "(DBBBD)Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method19 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.String str16 = type14.toString();
        java.lang.String str17 = type14.getDescriptor();
        java.lang.String str18 = type14.toString();
        boolean boolean20 = type14.equals((java.lang.Object) 7);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        int int23 = type21.getOpcode((int) (byte) 0);
        int int24 = type21.getSort();
        int int26 = type21.getOpcode((int) (short) 100);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class<?> wildcardClass31 = signature29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = classInfo33.getSuperType();
        org.mockito.asm.Type type35 = classInfo33.getType();
        org.mockito.asm.Type[] typeArray36 = classInfo33.getInterfaces();
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray36);
        java.lang.String str39 = type14.getClassName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "B" + "'", str17, "B");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 102 + "'", int26 == 102);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()F" + "'", str37, "()F");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()B" + "'", str38, "()B");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "byte" + "'", str39, "byte");
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.String str26 = propertyDescriptor25.getShortDescription();
        java.lang.reflect.Method method27 = propertyDescriptor25.getWriteMethod();
        propertyDescriptor25.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor25.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor25.setDisplayName("");
        boolean boolean35 = propertyDescriptor25.isExpert();
        propertyDescriptor25.setDisplayName("va.lang.Object");
        boolean boolean38 = propertyDescriptor25.isExpert();
        boolean boolean39 = propertyDescriptor25.isExpert();
        propertyDescriptor25.setPreferred(false);
        java.lang.Class<?> wildcardClass42 = propertyDescriptor25.getPropertyEditorClass();
        boolean boolean43 = classInfo19.equals((java.lang.Object) propertyDescriptor25);
        java.util.Enumeration<java.lang.String> strEnumeration44 = propertyDescriptor25.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strEnumeration44);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("doublejava/beans/PropertyDescriptor", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass6, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]; propertyEditorClass=class java.beans.PropertyDescriptor]", classArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]; propertyEditorClass=class java.beans.PropertyDescriptor]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = type0.equals((java.lang.Object) wildcardClass6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        int int11 = type10.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; expert; values={byte=0}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        int int22 = classInfo19.getModifiers();
        int int23 = classInfo19.getModifiers();
        java.lang.String str24 = classInfo19.toString();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getDisplayName();
        boolean boolean30 = propertyDescriptor28.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray32);
        boolean boolean34 = classInfo19.equals((java.lang.Object) classArray33);
        int int35 = classInfo19.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        java.lang.String str12 = propertyDescriptor9.getShortDescription();
        propertyDescriptor9.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor9.setExpert(false);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getShortDescription();
        java.lang.reflect.Method method23 = propertyDescriptor21.getWriteMethod();
        propertyDescriptor21.setBound(false);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor9.createPropertyEditor((java.lang.Object) propertyDescriptor21);
        propertyDescriptor9.setShortDescription("hi!");
        boolean boolean29 = signature2.equals((java.lang.Object) "hi!");
        java.lang.String str30 = signature2.getDescriptor();
        java.lang.String str31 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B" + "'", str30, "B");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("double");
        java.lang.Object obj19 = propertyDescriptor3.getValue("byteB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(VBLhi!;SD)B");
        java.lang.String str15 = propertyDescriptor3.getName();
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str19 = signature18.getDescriptor();
        java.lang.String str20 = signature18.getDescriptor();
        org.mockito.asm.Type type21 = signature18.getReturnType();
        java.lang.String str22 = type21.getDescriptor();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str22);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(VBLhi!;SD)B" + "'", str15, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "B" + "'", str20, "B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "B" + "'", str22, "B");
        org.junit.Assert.assertNull(propertyEditor23);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]LD;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 78");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        org.mockito.asm.Type type22 = classInfo19.getSuperType();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        int int24 = type23.getSize();
        int int26 = type23.getOpcode(99);
        java.lang.String str27 = type23.getClassName();
        int int28 = type23.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 103 + "'", int26 == 103);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.FeatureDescriptor" + "'", str27, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("hi!", method8, method9);
        java.lang.String str11 = propertyDescriptor10.getDisplayName();
        boolean boolean12 = propertyDescriptor10.isHidden();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, true);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, false);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor25 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.util.List list23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list24 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass18, list23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("org.mockito.cglib.core.Signature", (java.lang.Object) "hi!");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}; bound]");
        boolean boolean24 = propertyDescriptor3.isExpert();
        boolean boolean25 = propertyDescriptor3.isExpert();
        java.lang.String str26 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Ljava.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.getDescriptor();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        int int7 = type6.getSort();
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str12 = type11.getDescriptor();
        int int13 = type11.getDimensions();
        boolean boolean14 = signature2.equals((java.lang.Object) type11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B" + "'", str5, "B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setDisplayName("org.mockito.cglib.core.Signature");
        java.lang.String str23 = propertyDescriptor12.getDisplayName();
        boolean boolean24 = propertyDescriptor12.isExpert();
        java.lang.String str25 = propertyDescriptor12.getName();
        propertyDescriptor12.setDisplayName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        java.lang.reflect.Method method28 = propertyDescriptor12.getReadMethod();
        java.lang.String str29 = propertyDescriptor12.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str23, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]" + "'", str29, "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getDisplayName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.asm.Type[] typeArray14 = classInfo12.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) typeArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/beans/PropertyDescriptor" + "'", str9, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type11 = signature10.getReturnType();
        java.lang.Class<?> wildcardClass12 = signature10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type7, typeArray15);
        org.mockito.asm.Type type17 = type7.getElementType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.String str31 = signature29.getName();
        org.mockito.asm.Type type32 = signature29.getReturnType();
        java.lang.String str33 = signature29.getDescriptor();
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        boolean boolean41 = signature29.equals((java.lang.Object) strArray40);
        java.lang.String str42 = signature29.getDescriptor();
        org.mockito.asm.Type type43 = signature29.getReturnType();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        int int50 = type47.getOpcode(3);
        java.lang.String str51 = type47.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        int int55 = type54.getSort();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type45, type47, type52, type54, type56 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray58);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type43, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray58);
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("java.lang.Object", type19, typeArray58);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", type17, typeArray58);
        org.mockito.asm.Type[] typeArray64 = signature63.getArgumentTypes();
        org.mockito.asm.Type type65 = signature63.getReturnType();
        java.lang.String str66 = signature63.toString();
        org.mockito.asm.Type type67 = signature63.getReturnType();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "B" + "'", str33, "B");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "B" + "'", str42, "B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "byte" + "'", str51, "byte");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "double" + "'", str57, "double");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)V" + "'", str59, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str61, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Ljava/beans/PropertyDescriptor;(DBBBD)Lg/mockito/cglib/core/Signature;" + "'", str66, "Ljava/beans/PropertyDescriptor;(DBBBD)Lg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(type67);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        java.lang.String str15 = propertyDescriptor12.getShortDescription();
        propertyDescriptor12.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor12.setReadMethod(method19);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setName("(VBLhi!;SD)B");
        propertyDescriptor12.setPreferred(false);
        propertyDescriptor12.setHidden(false);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setName("java.beans.PropertyDescriptor[name=hi!; hidden; values={double= ; float=class java.beans.PropertyDescriptor}]");
        boolean boolean31 = propertyDescriptor12.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.String str7 = signature3.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        boolean boolean15 = signature3.equals((java.lang.Object) strArray14);
        java.lang.String str16 = signature3.getDescriptor();
        org.mockito.asm.Type type17 = signature3.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        int int24 = type21.getOpcode(3);
        java.lang.String str25 = type21.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type19, type21, type26, type28, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray32);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type17, typeArray32);
        org.mockito.asm.Type[] typeArray35 = signature34.getArgumentTypes();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        java.lang.String str38 = signature34.getName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "byte" + "'", str25, "byte");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(DBBBD)V" + "'", str33, "(DBBBD)V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str36, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str38, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byte", "B");
        java.lang.String str3 = signature2.toString();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        java.lang.String str5 = signature2.toString();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor9.attributeNames();
        java.lang.String str12 = propertyDescriptor9.getName();
        java.lang.String str13 = propertyDescriptor9.getName();
        propertyDescriptor9.setDisplayName("byteB");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor9.getPropertyType();
        propertyDescriptor9.setHidden(true);
        boolean boolean19 = signature2.equals((java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray20 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byteB" + "'", str3, "byteB");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byteB" + "'", str5, "byteB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=byteB; constrained]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("floatLLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setPreferred(false);
        java.lang.String str21 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean23 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=B]double");
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getType();
        java.lang.String str35 = type34.getInternalName();
        org.mockito.asm.Type type36 = type34.getElementType();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        java.lang.String str43 = propertyDescriptor40.getShortDescription();
        propertyDescriptor40.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method47 = null;
        propertyDescriptor40.setReadMethod(method47);
        boolean boolean49 = propertyDescriptor40.isExpert();
        propertyDescriptor40.setName("(VBLhi!;SD)B");
        propertyDescriptor40.setPreferred(false);
        propertyDescriptor40.setHidden(false);
        boolean boolean56 = type34.equals((java.lang.Object) propertyDescriptor40);
        propertyDescriptor40.setShortDescription("(DBBBD)B");
        boolean boolean59 = propertyDescriptor40.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        boolean boolean30 = propertyDescriptor24.isExpert();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor35.getClass();
        java.lang.String str37 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        propertyDescriptor24.setValue("float", (java.lang.Object) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        int int40 = classInfo39.getModifiers();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        java.lang.String str45 = propertyDescriptor44.getShortDescription();
        java.lang.reflect.Method method46 = propertyDescriptor44.getWriteMethod();
        propertyDescriptor44.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean50 = classInfo39.equals((java.lang.Object) propertyDescriptor44);
        int int51 = classInfo39.getModifiers();
        org.mockito.asm.Type[] typeArray52 = classInfo39.getInterfaces();
        boolean boolean54 = classInfo39.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type55 = classInfo39.getType();
        java.lang.String str56 = type55.getInternalName();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type60 = signature59.getReturnType();
        java.lang.Class<?> wildcardClass61 = signature59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        boolean boolean63 = type55.equals((java.lang.Object) propertyDescriptorArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray62);
        int int65 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        java.lang.String[] strArray66 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        int int67 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor68 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray64);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java/beans/PropertyDescriptor" + "'", str37, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(method46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; hidden; values={double= }]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("java/beans/PropertyDescriptor");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("byteB", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byteB" + "'", str4, "byteB");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(3);
        java.lang.String str5 = type1.getClassName();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.String str10 = signature8.getName();
        boolean boolean11 = type1.equals((java.lang.Object) signature8);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = classInfo31.getType();
        int int33 = classInfo31.getModifiers();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("java/lang/Object", type1, typeArray34);
        java.lang.String str36 = signature35.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byte" + "'", str5, "byte");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/lang/Object" + "'", str36, "java/lang/Object");
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("g/mockito/cglib/core/Signature");
        java.lang.reflect.Method method19 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method19);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        java.lang.String str26 = classInfo18.toString();
        org.mockito.asm.Type type27 = classInfo18.getSuperType();
        org.mockito.asm.Type type28 = classInfo18.getSuperType();
        org.mockito.asm.Type type29 = classInfo18.getType();
        java.lang.String str30 = classInfo18.toString();
        org.mockito.asm.Type type31 = classInfo18.getSuperType();
        int int32 = classInfo18.getModifiers();
        org.mockito.asm.Type type33 = classInfo18.getType();
        int int34 = classInfo18.getModifiers();
        int int35 = classInfo18.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.beans.PropertyDescriptor" + "'", str30, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        org.mockito.asm.Type type10 = type9.getElementType();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        boolean boolean10 = propertyDescriptor3.isHidden();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass14 = signature13.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass14);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str16, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("Lhi!;float");
        boolean boolean18 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        java.lang.String str26 = propertyDescriptor23.getShortDescription();
        propertyDescriptor23.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor23.setExpert(false);
        java.lang.Class<?> wildcardClass32 = propertyDescriptor23.getPropertyEditorClass();
        propertyDescriptor23.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration35 = propertyDescriptor23.attributeNames();
        propertyDescriptor23.setShortDescription("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        boolean boolean38 = propertyDescriptor3.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor24.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        boolean boolean34 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("J");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; bound]");
        java.lang.reflect.Method method39 = null;
        propertyDescriptor3.setWriteMethod(method39);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSize();
        java.lang.String str2 = type0.toString();
        int int3 = type0.getSize();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        int int12 = type11.getSort();
        int int14 = type11.getOpcode(3);
        java.lang.String str15 = type11.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        int int17 = type16.getSort();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type9, type11, type16, type18, type20 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type8, type24, type27, type29, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        int int38 = type37.getSort();
        int int40 = type37.getOpcode(3);
        java.lang.String str41 = type37.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        int int43 = type42.getSort();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        int int45 = type44.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type35, type37, type42, type44, type46 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray48);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        java.lang.String str55 = propertyDescriptor54.getShortDescription();
        java.lang.reflect.Method method56 = propertyDescriptor54.getWriteMethod();
        propertyDescriptor54.setValue("double", (java.lang.Object) ' ');
        boolean boolean60 = propertyDescriptor54.isExpert();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("hi!", method63, method64);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor65.getClass();
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass66);
        propertyDescriptor54.setValue("float", (java.lang.Object) wildcardClass66);
        org.mockito.cglib.core.ClassInfo classInfo69 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass66);
        int int70 = classInfo69.getModifiers();
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        java.beans.PropertyDescriptor propertyDescriptor74 = new java.beans.PropertyDescriptor("hi!", method72, method73);
        java.lang.String str75 = propertyDescriptor74.getShortDescription();
        java.lang.reflect.Method method76 = propertyDescriptor74.getWriteMethod();
        propertyDescriptor74.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean80 = classInfo69.equals((java.lang.Object) propertyDescriptor74);
        int int81 = classInfo69.getModifiers();
        org.mockito.asm.Type[] typeArray82 = classInfo69.getInterfaces();
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray82);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray82);
        java.lang.String str85 = type0.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "B" + "'", str2, "B");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "double" + "'", str10, "double");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "byte" + "'", str15, "byte");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(DBBBD)V" + "'", str23, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lhi!;" + "'", str28, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(VBLhi!;SD)B" + "'", str33, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "double" + "'", str36, "double");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "byte" + "'", str41, "byte");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)V" + "'", str49, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)B" + "'", str50, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(method56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java/beans/PropertyDescriptor" + "'", str67, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNull(method76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "()B" + "'", str83, "()B");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "()B" + "'", str84, "()B");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "byte" + "'", str85, "byte");
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("LLorg/mockito/cglib/core/Signature;;");
        java.lang.reflect.Method method26 = propertyDescriptor3.getReadMethod();
        java.lang.String str27 = propertyDescriptor3.getShortDescription();
        java.lang.String str28 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str27, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str28, "java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; values={double= ; float=class java.beans.PropertyDescriptor}]");
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()Ljava/lang/Object;", "LB;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Ljava/lang/Object;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;");
        int int3 = type1.getOpcode(18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("long", "LDBBBD)Lhi!;");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setReadMethod(method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("()B");
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray22);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        propertyDescriptor3.setValue("LLorg/mockito/cglib/core/Signature;;", (java.lang.Object) strArray24);
        java.lang.Object obj27 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=V; constrained]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        java.lang.String str2 = type1.getClassName();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        boolean boolean8 = propertyDescriptor6.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor6.setWriteMethod(method9);
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor6.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor6.setPreferred(false);
        propertyDescriptor6.setConstrained(false);
        propertyDescriptor6.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor6.attributeNames();
        boolean boolean20 = type1.equals((java.lang.Object) propertyDescriptor6);
        propertyDescriptor6.setBound(false);
        boolean boolean23 = propertyDescriptor6.isPreferred();
        java.lang.reflect.Method method24 = null;
        propertyDescriptor6.setWriteMethod(method24);
        java.util.Enumeration<java.lang.String> strEnumeration26 = propertyDescriptor6.attributeNames();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.beans.PropertyDescriptor" + "'", str2, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strEnumeration26);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        byte[] byteArray2 = new byte[] { (byte) 10 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; expert; values={byte=0}]", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10]");
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = propertyDescriptorArray7.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        java.lang.String str16 = propertyDescriptor13.getShortDescription();
        propertyDescriptor13.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor13.attributeNames();
        java.lang.reflect.Method method21 = null;
        propertyDescriptor13.setReadMethod(method21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        propertyDescriptor26.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor26.setConstrained(false);
        propertyDescriptor26.setHidden(false);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        java.lang.String str43 = propertyDescriptor40.getShortDescription();
        boolean boolean44 = propertyDescriptor40.isPreferred();
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type49 = signature48.getReturnType();
        java.lang.String str50 = signature48.getName();
        org.mockito.asm.Type type51 = signature48.getReturnType();
        propertyDescriptor40.setValue("B", (java.lang.Object) type51);
        java.lang.reflect.Method method53 = propertyDescriptor40.getReadMethod();
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = new java.beans.PropertyDescriptor[] { propertyDescriptor13, propertyDescriptor26, propertyDescriptor40 };
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray54, false, false);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray54);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method62 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass8, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B; values={double= }]", classArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B; values={double= }]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(method53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("doublejava/beans/PropertyDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.Class<?> wildcardClass13 = signature11.getClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.Class<?> wildcardClass23 = signature21.getClass();
        java.lang.Class[] classArray24 = new java.lang.Class[] { wildcardClass13, wildcardClass18, wildcardClass23 };
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray24);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.toString();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.Class<?> wildcardClass10 = signature8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray14);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, false, false);
        boolean boolean19 = signature2.equals((java.lang.Object) false);
        java.lang.String str20 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!B" + "'", str4, "hi!B");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!B" + "'", str5, "hi!B");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "B" + "'", str20, "B");
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=LLorg/mockito/cglib/core/Signature;;; values={double= ; float=class java.beans.PropertyDescriptor}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 134");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Lva.beans.PropertyDescriptor[name=hi!;", method1, method2);
        propertyDescriptor3.setShortDescription("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        propertyDescriptor11.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor11.attributeNames();
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type23 = signature22.getReturnType();
        java.lang.Class<?> wildcardClass24 = signature22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = classInfo26.getSuperType();
        java.lang.String str28 = type27.getInternalName();
        java.lang.String str29 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        int int32 = type31.getSize();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str38 = type37.getDescriptor();
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type42 = signature41.getReturnType();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        int int49 = type46.getOpcode(3);
        java.lang.String str50 = type46.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSort();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str56 = type55.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type44, type46, type51, type53, type55 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSize();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str63 = type62.getDescriptor();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str66 = type65.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type43, type59, type62, type64, type65 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BYTE_TYPE;
        int int73 = type72.getSort();
        int int75 = type72.getOpcode(3);
        java.lang.String str76 = type72.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        int int78 = type77.getSort();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.BYTE_TYPE;
        int int80 = type79.getSort();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type70, type72, type77, type79, type81 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray83);
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type35, typeArray83);
        org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("hi!", type31, typeArray83);
        org.mockito.cglib.core.Signature signature89 = new org.mockito.cglib.core.Signature("F", type27, typeArray83);
        java.beans.PropertyEditor propertyEditor90 = propertyDescriptor11.createPropertyEditor((java.lang.Object) signature89);
        org.mockito.asm.Type[] typeArray91 = signature89.getArgumentTypes();
        org.mockito.asm.Type[] typeArray92 = signature89.getArgumentTypes();
        org.mockito.asm.Type type93 = signature89.getReturnType();
        java.beans.PropertyEditor propertyEditor94 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type93);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;" + "'", str7, "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/lang/Object" + "'", str28, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.lang.Object" + "'", str29, "java.lang.Object");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lhi!;" + "'", str38, "Lhi!;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "double" + "'", str45, "double");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "byte" + "'", str50, "byte");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "double" + "'", str56, "double");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(DBBBD)V" + "'", str58, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lhi!;" + "'", str63, "Lhi!;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "double" + "'", str66, "double");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(VBLhi!;SD)B" + "'", str68, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "double" + "'", str71, "double");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "byte" + "'", str76, "byte");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "double" + "'", str82, "double");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(DBBBD)V" + "'", str84, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(DBBBD)B" + "'", str85, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(DBBBD)Lhi!;" + "'", str86, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNull(propertyEditor90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNull(propertyEditor94);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()Lava.beans.PropertyDescriptor[name=hi!;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        java.lang.String str3 = type2.getClassName();
        int int4 = type2.getSize();
        java.lang.String str5 = type2.getInternalName();
        int int6 = type2.getSize();
        org.mockito.asm.Type type7 = type2.getElementType();
        org.mockito.asm.Type[] typeArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("", type2, typeArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor" + "'", str3, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor15.setShortDescription("java/beans/PropertyDescriptor");
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str25 = type24.getDescriptor();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSize();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str50 = type49.getDescriptor();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type30, type46, type49, type51, type52 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        int int62 = type59.getOpcode(3);
        java.lang.String str63 = type59.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type57, type59, type64, type66, type68 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray70);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray70);
        java.beans.PropertyEditor propertyEditor75 = propertyDescriptor15.createPropertyEditor((java.lang.Object) classArray74);
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("hi!", method77, method78);
        java.lang.Class<?> wildcardClass80 = propertyDescriptor79.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.Class<?> wildcardClass82 = type81.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        java.beans.PropertyEditor propertyEditor85 = propertyDescriptor15.createPropertyEditor((java.lang.Object) propertyDescriptorArray84);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray84, false, true);
        java.lang.Class[] classArray89 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray88);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lhi!;" + "'", str25, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lhi!;" + "'", str50, "Lhi!;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "double" + "'", str53, "double");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(VBLhi!;SD)B" + "'", str55, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "byte" + "'", str63, "byte");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "double" + "'", str69, "double");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(DBBBD)V" + "'", str71, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(DBBBD)B" + "'", str72, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)Lhi!;" + "'", str73, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNull(propertyEditor75);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNull(propertyEditor85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = type0.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str10, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str12, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        byte[] byteArray1 = new byte[] {};
        java.lang.ClassLoader classLoader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class3 = org.mockito.cglib.core.ReflectUtils.defineClass("LbyteB;", byteArray1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        byte[] byteArray1 = new byte[] {};
        java.lang.ClassLoader classLoader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class3 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]; propertyEditorClass=class java.beans.PropertyDescriptor]", byteArray1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("hi!LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("B", method15, method16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method16);
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean21 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.String str26 = propertyDescriptor25.getDisplayName();
        boolean boolean27 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor25.getPropertyType();
        boolean boolean29 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor25);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor24.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.String str40 = propertyDescriptor39.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration41 = propertyDescriptor39.attributeNames();
        java.lang.String str42 = propertyDescriptor39.getName();
        java.lang.String str43 = propertyDescriptor39.getName();
        propertyDescriptor39.setDisplayName("byteB");
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        java.lang.String str50 = propertyDescriptor49.getShortDescription();
        java.lang.reflect.Method method51 = propertyDescriptor49.getWriteMethod();
        propertyDescriptor49.setValue("double", (java.lang.Object) ' ');
        boolean boolean55 = propertyDescriptor49.isExpert();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        java.lang.Class<?> wildcardClass61 = propertyDescriptor60.getClass();
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        propertyDescriptor49.setValue("float", (java.lang.Object) wildcardClass61);
        java.beans.PropertyEditor propertyEditor64 = propertyDescriptor39.createPropertyEditor((java.lang.Object) propertyDescriptor49);
        java.lang.Class<?> wildcardClass65 = propertyDescriptor49.getPropertyType();
        java.beans.PropertyEditor propertyEditor66 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor49);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]");
        java.lang.String str69 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java/beans/PropertyDescriptor" + "'", str62, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor64);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNull(propertyEditor66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]" + "'", str69, "java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]");
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str7, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setBound(false);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor14.getPropertyType();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor14.setReadMethod(method20);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor14.setWriteMethod(method22);
        java.lang.Object obj25 = propertyDescriptor14.getValue("void");
        java.lang.String str26 = propertyDescriptor14.getDisplayName();
        propertyDescriptor14.setExpert(false);
        java.lang.String str29 = propertyDescriptor14.getName();
        boolean boolean30 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor14);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java/beans/PropertyDescriptor" + "'", str7, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = type0.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str10, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str13, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("(DBBBD)Llong;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("C");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        propertyDescriptor5.setValue("double", (java.lang.Object) ' ');
        boolean boolean11 = propertyDescriptor5.isExpert();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        propertyDescriptor5.setValue("float", (java.lang.Object) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type22 = classInfo21.getType();
        org.mockito.asm.Type type23 = classInfo21.getType();
        int int24 = classInfo21.getModifiers();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getShortDescription();
        java.lang.reflect.Method method30 = propertyDescriptor28.getWriteMethod();
        propertyDescriptor28.setValue("double", (java.lang.Object) ' ');
        boolean boolean34 = propertyDescriptor28.isExpert();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor39.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        propertyDescriptor28.setValue("float", (java.lang.Object) wildcardClass40);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        int int44 = classInfo43.getModifiers();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        java.lang.String str49 = propertyDescriptor48.getShortDescription();
        java.lang.reflect.Method method50 = propertyDescriptor48.getWriteMethod();
        propertyDescriptor48.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean54 = classInfo43.equals((java.lang.Object) propertyDescriptor48);
        int int55 = classInfo43.getModifiers();
        org.mockito.asm.Type[] typeArray56 = classInfo43.getInterfaces();
        boolean boolean58 = classInfo43.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type59 = classInfo43.getSuperType();
        org.mockito.asm.Type type60 = classInfo43.getSuperType();
        org.mockito.asm.Type type61 = classInfo43.getType();
        boolean boolean62 = classInfo21.equals((java.lang.Object) classInfo43);
        org.mockito.asm.Type[] typeArray63 = classInfo43.getInterfaces();
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray63);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = type1.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(method50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()LC;" + "'", str64, "()LC;");
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getClassName();
        java.lang.String str2 = type0.getDescriptor();
        int int3 = type0.getSort();
        int int4 = type0.getSize();
        int int5 = type0.getSize();
        java.lang.String str6 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "double" + "'", str1, "double");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "D" + "'", str2, "D");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "D" + "'", str6, "D");
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.Class<?> wildcardClass11 = signature9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type6, typeArray14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        boolean boolean25 = propertyDescriptor19.isExpert();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        propertyDescriptor19.setValue("float", (java.lang.Object) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        java.lang.Object obj35 = null;
        boolean boolean36 = classInfo34.equals(obj35);
        java.lang.String str37 = classInfo34.toString();
        org.mockito.asm.Type[] typeArray38 = classInfo34.getInterfaces();
        boolean boolean39 = signature15.equals((java.lang.Object) classInfo34);
        org.mockito.asm.Type type40 = classInfo34.getSuperType();
        org.mockito.asm.Type type41 = type40.getElementType();
        int int42 = type40.getSize();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        java.lang.String str47 = propertyDescriptor46.getShortDescription();
        java.lang.reflect.Method method48 = propertyDescriptor46.getWriteMethod();
        propertyDescriptor46.setValue("double", (java.lang.Object) ' ');
        boolean boolean52 = propertyDescriptor46.isExpert();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor57.getClass();
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass58);
        propertyDescriptor46.setValue("float", (java.lang.Object) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type63 = classInfo62.getType();
        java.lang.String str64 = type63.getClassName();
        int int65 = type63.getDimensions();
        org.mockito.asm.Type type66 = type63.getElementType();
        java.lang.Object obj67 = null;
        boolean boolean68 = type66.equals(obj67);
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("hi!", method70, method71);
        java.lang.Class<?> wildcardClass73 = propertyDescriptor72.getClass();
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo76 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type77 = classInfo76.getType();
        org.mockito.asm.Type type78 = classInfo76.getType();
        org.mockito.asm.Type[] typeArray79 = classInfo76.getInterfaces();
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray79);
        java.lang.String str82 = type40.getClassName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java/beans/PropertyDescriptor" + "'", str32, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor" + "'", str37, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java/beans/PropertyDescriptor" + "'", str59, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.beans.PropertyDescriptor" + "'", str64, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java/beans/PropertyDescriptor" + "'", str74, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str75, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "()Lva/beans/PropertyDescriptor;" + "'", str80, "()Lva/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()Ljava/beans/FeatureDescriptor;" + "'", str81, "()Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.beans.FeatureDescriptor" + "'", str82, "java.beans.FeatureDescriptor");
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        propertyDescriptor16.setValue("double", (java.lang.Object) ' ');
        boolean boolean22 = propertyDescriptor16.isExpert();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.Class<?> wildcardClass28 = propertyDescriptor27.getClass();
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        propertyDescriptor16.setValue("float", (java.lang.Object) wildcardClass28);
        propertyDescriptor16.setConstrained(true);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", (java.lang.Object) true);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        int int22 = classInfo19.getModifiers();
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type28 = signature27.getReturnType();
        java.lang.Class<?> wildcardClass29 = signature27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        java.lang.Class<?> wildcardClass35 = signature33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass35);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type[] typeArray38 = classInfo37.getInterfaces();
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type30, typeArray38);
        org.mockito.asm.Type type40 = type30.getElementType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        java.lang.Class<?> wildcardClass47 = propertyDescriptor46.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type53 = signature52.getReturnType();
        java.lang.String str54 = signature52.getName();
        org.mockito.asm.Type type55 = signature52.getReturnType();
        java.lang.String str56 = signature52.getDescriptor();
        java.lang.Class[] classArray57 = new java.lang.Class[] {};
        int int58 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        boolean boolean64 = signature52.equals((java.lang.Object) strArray63);
        java.lang.String str65 = signature52.getDescriptor();
        org.mockito.asm.Type type66 = signature52.getReturnType();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        int int71 = type70.getSort();
        int int73 = type70.getOpcode(3);
        java.lang.String str74 = type70.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BYTE_TYPE;
        int int76 = type75.getSort();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        int int78 = type77.getSort();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type68, type70, type75, type77, type79 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray81);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type66, typeArray81);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray81);
        org.mockito.cglib.core.Signature signature85 = new org.mockito.cglib.core.Signature("java.lang.Object", type42, typeArray81);
        org.mockito.cglib.core.Signature signature86 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", type40, typeArray81);
        boolean boolean87 = classInfo19.equals((java.lang.Object) typeArray81);
        org.mockito.asm.Type type88 = classInfo19.getType();
        org.mockito.asm.Type[] typeArray89 = classInfo19.getInterfaces();
        org.mockito.asm.Type type90 = classInfo19.getSuperType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "B" + "'", str56, "B");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "B" + "'", str65, "B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "double" + "'", str69, "double");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "byte" + "'", str74, "byte");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "double" + "'", str80, "double");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(DBBBD)V" + "'", str82, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str84, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(type90);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];]", method18, method19);
        java.lang.Object obj22 = propertyDescriptor20.getValue("va.beans.PropertyDescriptor");
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "va.beans.PropertyDescriptor");
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        java.lang.Object obj27 = propertyDescriptor3.getValue("()Lhi!;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(DBBBD)V;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        int int5 = type1.getOpcode(13);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18 + "'", int5 == 18);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "V" + "'", str2, "V");
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, false, true);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, false, false);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        boolean boolean30 = propertyDescriptor26.isPreferred();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        propertyDescriptor26.setValue("B", (java.lang.Object) type37);
        propertyDescriptor26.setShortDescription("byte");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = classInfo43.getType();
        java.lang.String str45 = type44.getInternalName();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type44);
        java.util.Enumeration<java.lang.String> strEnumeration47 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method48 = propertyDescriptor3.getReadMethod();
        java.lang.String str49 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(strEnumeration47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]" + "'", str49, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]");
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setName("B");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 100.0d);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(DBBBD)V]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.String str5 = signature3.getName();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.String str7 = signature3.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        boolean boolean15 = signature3.equals((java.lang.Object) strArray14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSort();
        java.lang.Class<?> wildcardClass25 = type23.getClass();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type29 = signature28.getReturnType();
        java.lang.Class<?> wildcardClass30 = signature28.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass30);
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass25, wildcardClass30 };
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray34);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray34);
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray38);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.reflect.Method[] methodArray45 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray45);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str31, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        propertyDescriptor3.setShortDescription("(DBBBD)Lhi!;");
        boolean boolean17 = propertyDescriptor3.isExpert();
        boolean boolean18 = propertyDescriptor3.isPreferred();
        java.lang.Object obj20 = propertyDescriptor3.getValue("g/mockito/cglib/core/Signature");
        java.lang.Object obj22 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=double; values={byte=0}; bound]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        int int2 = type0.getOpcode(4);
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        java.lang.reflect.Method method8 = propertyDescriptor6.getWriteMethod();
        propertyDescriptor6.setValue("double", (java.lang.Object) ' ');
        boolean boolean12 = propertyDescriptor6.isExpert();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        propertyDescriptor6.setValue("float", (java.lang.Object) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type23 = classInfo22.getType();
        int int24 = classInfo22.getModifiers();
        org.mockito.asm.Type type25 = classInfo22.getSuperType();
        int int26 = type25.getDimensions();
        boolean boolean27 = type0.equals((java.lang.Object) type25);
        java.lang.String str28 = type25.getClassName();
        java.lang.String str29 = type25.toString();
        org.mockito.asm.Type type30 = type25.getElementType();
        int int31 = type30.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.FeatureDescriptor" + "'", str28, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str29, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, false, true);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) strArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("LLorg/mockito/cglib/core/Signature;;(DBBBD)B", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 0, (byte) 100 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; shortDescription=byte; values={B=B}]", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 100]");
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; bound]");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str2, "Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.String str6 = propertyDescriptor5.getShortDescription();
        java.lang.reflect.Method method7 = propertyDescriptor5.getWriteMethod();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor5.setWriteMethod(method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor5.getPropertyType();
        propertyDescriptor5.setConstrained(false);
        boolean boolean13 = propertyDescriptor5.isExpert();
        boolean boolean14 = type0.equals((java.lang.Object) boolean13);
        int int15 = type0.getSort();
        java.lang.String str16 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "F" + "'", str16, "F");
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj11 = null;
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor(obj11);
        boolean boolean13 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        java.lang.Object obj18 = propertyDescriptor3.getValue("org/mockito/asm/Type(VBLhi!;SD)B");
        propertyDescriptor3.setShortDescription("long");
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.String str26 = signature24.getName();
        org.mockito.asm.Type type27 = signature24.getReturnType();
        java.lang.String str28 = signature24.getDescriptor();
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        int int32 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        boolean boolean36 = signature24.equals((java.lang.Object) strArray35);
        java.lang.String str37 = signature24.getDescriptor();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; displayName=void; values={byte=0}]()Lhi!;", (java.lang.Object) str37);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "B" + "'", str37, "B");
        org.junit.Assert.assertNull(wildcardClass39);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "java.beans.PropertyDescriptor[name=hi!; displayName=void; values={byte=0}]()Lhi!;");
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        boolean boolean24 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor3.setReadMethod(method27);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]; displayName=java.beans.PropertyDescriptor; shortDescription=Ljava/lang/Object;; values={double= ; float=class java.beans.PropertyDescriptor}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("DBBBD)Lhi!");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = type9.getElementType();
        org.mockito.asm.Type type11 = type10.getElementType();
        java.lang.String str12 = type11.getClassName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + ".beans.PropertyDescriptor" + "'", str12, ".beans.PropertyDescriptor");
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]", "hi!LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int6 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        boolean boolean12 = signature2.equals((java.lang.Object) classArray7);
        org.mockito.asm.Type type13 = signature2.getReturnType();
        boolean boolean15 = signature2.equals((java.lang.Object) 0);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        propertyDescriptor19.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor19.attributeNames();
        propertyDescriptor19.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        propertyDescriptor19.setValue("", (java.lang.Object) "byte");
        boolean boolean29 = propertyDescriptor19.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor19.attributeNames();
        boolean boolean31 = signature2.equals((java.lang.Object) strEnumeration30);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=B]");
        java.lang.String str12 = propertyDescriptor3.getName();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) (-1.0d));
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=B]" + "'", str12, "java.beans.PropertyDescriptor[name=B]");
        org.junit.Assert.assertNull(propertyEditor14);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; preferred];", method1, method2);
        propertyDescriptor3.setName("()Ljava.lang.Object;");
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        int int22 = classInfo19.getModifiers();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getDimensions();
        int int26 = type23.getSort();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str24, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        java.lang.String str21 = propertyDescriptor18.getShortDescription();
        boolean boolean22 = propertyDescriptor18.isPreferred();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type27 = signature26.getReturnType();
        java.lang.String str28 = signature26.getName();
        org.mockito.asm.Type type29 = signature26.getReturnType();
        propertyDescriptor18.setValue("B", (java.lang.Object) type29);
        propertyDescriptor18.setShortDescription("byte");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        java.lang.String str42 = classInfo41.toString();
        org.mockito.asm.Type type43 = classInfo41.getSuperType();
        boolean boolean44 = classInfo35.equals((java.lang.Object) classInfo41);
        org.mockito.asm.Type type45 = classInfo41.getType();
        org.mockito.asm.Type type46 = classInfo41.getSuperType();
        propertyDescriptor3.setValue("LLorg.mockito.cglib.core.Signature;;", (java.lang.Object) classInfo41);
        java.lang.String str48 = classInfo41.toString();
        java.lang.Class<?> wildcardClass49 = classInfo41.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.beans.PropertyDescriptor" + "'", str42, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.beans.PropertyDescriptor" + "'", str48, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getDescriptor();
        java.lang.String str4 = type1.getClassName();
        int int6 = type1.getOpcode((int) (short) 10);
        java.lang.String str7 = type1.toString();
        int int9 = type1.getOpcode((int) (short) 100);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str3, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor" + "'", str4, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 14 + "'", int6 == 14);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 104 + "'", int9 == 104);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1, (byte) 0 };
        java.lang.ClassLoader classLoader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class8 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type]; values={byte=0}]", byteArray6, classLoader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1, 0]");
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        int int13 = type12.getSort();
        java.lang.Class<?> wildcardClass14 = type12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo15);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getDisplayName();
        boolean boolean23 = propertyDescriptor21.isHidden();
        propertyDescriptor21.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        propertyDescriptor30.setValue("double", (java.lang.Object) ' ');
        boolean boolean36 = propertyDescriptor30.isExpert();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        java.lang.Class<?> wildcardClass42 = propertyDescriptor41.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        propertyDescriptor30.setValue("float", (java.lang.Object) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type49 = signature48.getReturnType();
        java.lang.String str50 = signature48.getName();
        org.mockito.asm.Type type51 = signature48.getReturnType();
        boolean boolean52 = classInfo45.equals((java.lang.Object) type51);
        java.lang.String str53 = classInfo45.toString();
        org.mockito.asm.Type type54 = classInfo45.getSuperType();
        org.mockito.asm.Type type55 = classInfo45.getSuperType();
        int int57 = type55.getOpcode(4);
        propertyDescriptor21.setValue("LD;", (java.lang.Object) 4);
        boolean boolean59 = classInfo15.equals((java.lang.Object) propertyDescriptor21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java/beans/PropertyDescriptor" + "'", str43, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.beans.PropertyDescriptor" + "'", str53, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        propertyDescriptor3.setName("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; bound]");
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        boolean boolean14 = signature2.equals((java.lang.Object) strArray13);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        java.lang.Class<?> wildcardClass19 = signature17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, false);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        int int26 = type25.getSort();
        java.lang.Class<?> wildcardClass27 = type25.getClass();
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.Class<?> wildcardClass32 = signature30.getClass();
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass27, wildcardClass32 };
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type39 = signature38.getReturnType();
        java.lang.Class<?> wildcardClass40 = signature38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass40);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray45);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray45);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str33, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.mockito.asm.Type type31 = classInfo26.getType();
        org.mockito.asm.Type type32 = classInfo26.getType();
        boolean boolean34 = type32.equals((java.lang.Object) 99);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        propertyDescriptor3.setName("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        propertyDescriptor11.setValue("double", (java.lang.Object) ' ');
        boolean boolean17 = propertyDescriptor11.isExpert();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        propertyDescriptor11.setValue("float", (java.lang.Object) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.String str33 = propertyDescriptor32.getShortDescription();
        java.lang.reflect.Method method34 = propertyDescriptor32.getWriteMethod();
        propertyDescriptor32.setValue("double", (java.lang.Object) ' ');
        boolean boolean38 = propertyDescriptor32.isExpert();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        java.lang.Class<?> wildcardClass44 = propertyDescriptor43.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        propertyDescriptor32.setValue("float", (java.lang.Object) wildcardClass44);
        java.lang.Class<?> wildcardClass47 = propertyDescriptor32.getPropertyEditorClass();
        java.lang.reflect.Method method48 = propertyDescriptor32.getReadMethod();
        java.lang.reflect.Method method49 = propertyDescriptor32.getWriteMethod();
        boolean boolean50 = propertyDescriptor32.isHidden();
        java.beans.PropertyEditor propertyEditor51 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor32);
        propertyDescriptor32.setDisplayName("D");
        boolean boolean54 = propertyDescriptor32.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(propertyEditor51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        int int8 = type7.getSort();
        int int10 = type7.getOpcode(3);
        java.lang.String str11 = type7.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        int int13 = type12.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type5, type7, type12, type14, type16 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type4, type20, type23, type25, type26 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray44);
        int int48 = type3.getOpcode((int) (byte) -1);
        java.lang.String str49 = type3.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "double" + "'", str6, "double");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "byte" + "'", str11, "byte");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "double" + "'", str17, "double");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(DBBBD)V" + "'", str19, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lhi!;" + "'", str24, "Lhi!;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "double" + "'", str27, "double");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(VBLhi!;SD)B" + "'", str29, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(DBBBD)B" + "'", str46, "(DBBBD)B");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "B" + "'", str49, "B");
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str8, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        int int23 = type21.getOpcode((int) (short) 10);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getShortDescription();
        java.lang.reflect.Method method29 = propertyDescriptor27.getWriteMethod();
        propertyDescriptor27.setValue("double", (java.lang.Object) ' ');
        boolean boolean33 = propertyDescriptor27.isExpert();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor38.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        propertyDescriptor27.setValue("float", (java.lang.Object) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type46 = signature45.getReturnType();
        java.lang.String str47 = signature45.getName();
        org.mockito.asm.Type type48 = signature45.getReturnType();
        boolean boolean49 = classInfo42.equals((java.lang.Object) type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        int int56 = type53.getOpcode(3);
        java.lang.String str57 = type53.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        int int59 = type58.getSort();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        int int61 = type60.getSort();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type51, type53, type58, type60, type62 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray64);
        java.lang.String str68 = type21.toString();
        boolean boolean69 = type20.equals((java.lang.Object) type21);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        java.lang.String str74 = propertyDescriptor73.getShortDescription();
        java.lang.reflect.Method method75 = propertyDescriptor73.getWriteMethod();
        propertyDescriptor73.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor73.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor73.setDisplayName("");
        boolean boolean83 = propertyDescriptor73.isExpert();
        propertyDescriptor73.setDisplayName("va.lang.Object");
        propertyDescriptor73.setBound(true);
        java.lang.reflect.Method method88 = null;
        propertyDescriptor73.setWriteMethod(method88);
        java.lang.String str90 = propertyDescriptor73.getDisplayName();
        boolean boolean91 = type21.equals((java.lang.Object) propertyDescriptor73);
        java.lang.Class<?> wildcardClass92 = propertyDescriptor73.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java/beans/PropertyDescriptor" + "'", str40, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "double" + "'", str52, "double");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "byte" + "'", str57, "byte");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(DBBBD)V" + "'", str65, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(DBBBD)B" + "'", str66, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(DBBBD)V" + "'", str67, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "V" + "'", str68, "V");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNull(method75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "va.lang.Object" + "'", str90, "va.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(wildcardClass92);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", method1, method2);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean10 = classInfo7.equals((java.lang.Object) type9);
        org.mockito.asm.Type type11 = classInfo7.getType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method13, method14);
        boolean boolean16 = classInfo7.equals((java.lang.Object) "java.beans.PropertyDescriptor");
        org.mockito.asm.Type[] typeArray17 = classInfo7.getInterfaces();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()Lva/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(DBBBD)V");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getSize();
        int int4 = type1.getSize();
        java.lang.String str5 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(DBBBD)V;" + "'", str2, "L(DBBBD)V;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(DBBBD)V" + "'", str5, "(DBBBD)V");
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getDescriptor();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = type5.getDescriptor();
        int int8 = type5.getOpcode(11);
        java.lang.String str9 = type5.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "B" + "'", str9, "B");
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lava.beans.PropertyDescriptor[name=byte;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method23 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str22, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray62);
        java.lang.Class<?> wildcardClass64 = methodArray63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method67 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={byte=0}]");
        int int2 = type1.getDimensions();
        int int4 = type1.getOpcode(48);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor24.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor3.getPropertyType();
        boolean boolean34 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("J");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; bound]");
        boolean boolean39 = propertyDescriptor3.isExpert();
        boolean boolean40 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        int int23 = type22.getSort();
        java.lang.Class<?> wildcardClass24 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str28 = type27.getDescriptor();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str28);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor29);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lva.beans.PropertyDescriptor[name=hi!;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        boolean boolean16 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str15, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B" + "'", str15, "java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={byte=0}]", "org.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;");
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(DBBBD)B");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getInternalName();
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(DBBBD)B" + "'", str3, "(DBBBD)B");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        java.lang.Class class0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        java.lang.String str7 = propertyDescriptor4.getShortDescription();
        propertyDescriptor4.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor4.attributeNames();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor4.setReadMethod(method12);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.String str18 = propertyDescriptor17.getShortDescription();
        java.lang.reflect.Method method19 = propertyDescriptor17.getWriteMethod();
        java.lang.String str20 = propertyDescriptor17.getShortDescription();
        propertyDescriptor17.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor17.setConstrained(false);
        propertyDescriptor17.setHidden(false);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        java.lang.String str34 = propertyDescriptor31.getShortDescription();
        boolean boolean35 = propertyDescriptor31.isPreferred();
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type40 = signature39.getReturnType();
        java.lang.String str41 = signature39.getName();
        org.mockito.asm.Type type42 = signature39.getReturnType();
        propertyDescriptor31.setValue("B", (java.lang.Object) type42);
        java.lang.reflect.Method method44 = propertyDescriptor31.getReadMethod();
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = new java.beans.PropertyDescriptor[] { propertyDescriptor4, propertyDescriptor17, propertyDescriptor31 };
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, false);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor52 = org.mockito.cglib.core.ReflectUtils.getConstructor(class0, classArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNull(method44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        propertyDescriptor3.setShortDescription("(DBBBD)V");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(21);
        java.lang.String str19 = type16.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25 + "'", int18 == 25);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str19, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type2, typeArray31);
        java.lang.String str34 = signature33.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(VBLhi!;SD)Lhi!;" + "'", str34, "(VBLhi!;SD)Lhi!;");
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        propertyDescriptor3.setValue("", (java.lang.Object) "byte");
        propertyDescriptor3.setShortDescription("(DBBBD)V");
        java.lang.String str15 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(DBBBD)V" + "'", str15, "(DBBBD)V");
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = classInfo5.getType();
        int int8 = type6.getOpcode(5);
        int int9 = type6.getDimensions();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.Object obj29 = null;
        boolean boolean30 = classInfo28.equals(obj29);
        java.lang.String str31 = classInfo28.toString();
        org.mockito.asm.Type[] typeArray32 = classInfo28.getInterfaces();
        java.lang.String str33 = classInfo28.toString();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str37 = signature36.getName();
        java.lang.String str38 = signature36.toString();
        org.mockito.asm.Type type39 = signature36.getReturnType();
        boolean boolean40 = classInfo28.equals((java.lang.Object) signature36);
        boolean boolean41 = type6.equals((java.lang.Object) signature36);
        java.lang.String str42 = type6.toString();
        int int43 = type6.getSort();
        int int45 = type6.getOpcode((int) (short) -1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.beans.PropertyDescriptor" + "'", str31, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!B" + "'", str38, "hi!B");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str42, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(DBBBD)Lhi!;");
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        boolean boolean18 = propertyDescriptor12.isExpert();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        propertyDescriptor12.setValue("float", (java.lang.Object) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.String str32 = signature30.getName();
        org.mockito.asm.Type type33 = signature30.getReturnType();
        boolean boolean34 = classInfo27.equals((java.lang.Object) type33);
        java.lang.String str35 = classInfo27.toString();
        org.mockito.asm.Type type36 = classInfo27.getSuperType();
        org.mockito.asm.Type type37 = classInfo27.getSuperType();
        int int39 = type37.getOpcode(4);
        propertyDescriptor3.setValue("LD;", (java.lang.Object) 4);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor" + "'", str35, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str8, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=floatLLorg/mockito/cglib/core/Signature;;; values={B=B}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]", "hi!LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int6 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        boolean boolean12 = signature2.equals((java.lang.Object) classArray7);
        org.mockito.asm.Type type13 = signature2.getReturnType();
        boolean boolean15 = signature2.equals((java.lang.Object) 0);
        java.lang.String str16 = signature2.getName();
        java.lang.String str17 = signature2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray18 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]" + "'", str16, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]hi!LLorg/mockito/cglib/core/Signature;;" + "'", str17, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]hi!LLorg/mockito/cglib/core/Signature;;");
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;()Lorg/mockito/cglib/core/Signature;", "java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={byte=0}]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Lorg/mockito/cglib/core/Signature;()Lorg/mockito/cglib/core/Signature;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str9, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans.PropertyDescriptor[name=(DBBBD)B]");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        java.util.List list4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list5 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass2, list4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass16 = signature14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = classInfo18.getSuperType();
        java.lang.String str20 = type19.getInternalName();
        java.lang.String str21 = type19.getInternalName();
        java.lang.String str22 = type19.getInternalName();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type19);
        int int24 = type19.getDimensions();
        int int26 = type19.getOpcode(39);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        propertyDescriptor30.setValue("double", (java.lang.Object) ' ');
        boolean boolean36 = propertyDescriptor30.isExpert();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        java.lang.Class<?> wildcardClass42 = propertyDescriptor41.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        propertyDescriptor30.setValue("float", (java.lang.Object) wildcardClass42);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor30.getPropertyEditorClass();
        java.lang.reflect.Method method46 = propertyDescriptor30.getReadMethod();
        java.lang.reflect.Method method47 = propertyDescriptor30.getWriteMethod();
        propertyDescriptor30.setPreferred(false);
        boolean boolean50 = propertyDescriptor30.isExpert();
        propertyDescriptor30.setName("LLorg/mockito/cglib/core/Signature;;");
        java.lang.reflect.Method method53 = propertyDescriptor30.getReadMethod();
        java.lang.String str54 = propertyDescriptor30.getShortDescription();
        boolean boolean55 = type19.equals((java.lang.Object) propertyDescriptor30);
        java.lang.reflect.Method method56 = null;
        propertyDescriptor30.setReadMethod(method56);
        java.beans.PropertyEditor propertyEditor59 = propertyDescriptor30.createPropertyEditor((java.lang.Object) "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/lang/Object" + "'", str20, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java/lang/Object" + "'", str21, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/lang/Object" + "'", str22, "java/lang/Object");
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 43 + "'", int26 == 43);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java/beans/PropertyDescriptor" + "'", str43, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNull(method46);
        org.junit.Assert.assertNull(method47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(method53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str54, "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(propertyEditor59);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("va.lang.Object");
        propertyDescriptor3.setDisplayName("java.beans.FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        propertyDescriptor3.setName("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        boolean boolean18 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("(DBBBD)Lg/mockito/cglib/core/Signature;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.mockito.asm.Type type31 = classInfo26.getType();
        org.mockito.asm.Type type32 = classInfo26.getType();
        java.lang.String str33 = classInfo26.toString();
        org.mockito.asm.Type type34 = classInfo26.getType();
        java.lang.String str35 = type34.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.String str17 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        java.lang.String str15 = propertyDescriptor12.getDisplayName();
        boolean boolean16 = classInfo8.equals((java.lang.Object) str15);
        org.mockito.asm.Type type17 = classInfo8.getSuperType();
        org.mockito.asm.Type type18 = classInfo8.getType();
        org.mockito.asm.Type[] typeArray19 = classInfo8.getInterfaces();
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) classArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(classArray20);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        java.lang.Object obj16 = propertyDescriptor3.getValue("(DBBBD)Ljava.beans.PropertyDescriptor[name=hi!; preferred];");
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("B", method15, method16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method16);
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method23 = propertyDescriptor3.getWriteMethod();
        boolean boolean24 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        java.lang.String str21 = type20.getClassName();
        int int22 = type20.getDimensions();
        java.lang.String str23 = type20.getDescriptor();
        java.lang.String str24 = type20.getInternalName();
        int int25 = type20.getDimensions();
        java.lang.Class<?> wildcardClass26 = type20.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass26);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str23, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java/beans/FeatureDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass14 = strEnumeration13.getClass();
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list16 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass14, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("()LDBBBD)Ljava.lang.Object;", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        int int22 = classInfo19.getModifiers();
        int int23 = classInfo19.getModifiers();
        java.lang.String str24 = classInfo19.toString();
        org.mockito.asm.Type type25 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray26 = classInfo19.getInterfaces();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("L(DBBBD)V;", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("(DBBBD)Lg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list10 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.Object obj7 = propertyDescriptor3.getValue("float");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=B]");
        boolean boolean14 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(3);
        java.lang.String str5 = type1.getClassName();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        java.lang.String str10 = signature8.getName();
        boolean boolean11 = type1.equals((java.lang.Object) signature8);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = classInfo31.getType();
        int int33 = classInfo31.getModifiers();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("java/lang/Object", type1, typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byte" + "'", str5, "byte");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass6, "", classArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classArray20);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        boolean boolean7 = signature2.equals((java.lang.Object) 10.0d);
        java.lang.String str8 = signature2.getName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        int int10 = type9.getSort();
        java.lang.Class<?> wildcardClass11 = type9.getClass();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass16 = signature14.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.Class[] classArray18 = new java.lang.Class[] { wildcardClass11, wildcardClass16 };
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        boolean boolean23 = signature2.equals((java.lang.Object) classArray22);
        org.mockito.asm.Type type24 = signature2.getReturnType();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getShortDescription();
        java.lang.reflect.Method method30 = propertyDescriptor28.getWriteMethod();
        propertyDescriptor28.setValue("double", (java.lang.Object) ' ');
        boolean boolean34 = propertyDescriptor28.isExpert();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.Class<?> wildcardClass40 = propertyDescriptor39.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        propertyDescriptor28.setValue("float", (java.lang.Object) wildcardClass40);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        boolean boolean46 = type24.equals((java.lang.Object) classArray45);
        int int48 = type24.getOpcode((int) (byte) 1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str17, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java/beans/PropertyDescriptor" + "'", str43, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        propertyDescriptor3.setDisplayName("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(true);
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "double" + "'", str14, "double");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;" + "'", str18, "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;" + "'", str19, "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        int int12 = type11.getSort();
        int int14 = type11.getOpcode(3);
        java.lang.String str15 = type11.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        int int17 = type16.getSort();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type9, type11, type16, type18, type20 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSize();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type8, type24, type27, type29, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray32);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type3, typeArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) typeArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "double" + "'", str10, "double");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "byte" + "'", str15, "byte");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "double" + "'", str21, "double");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(DBBBD)V" + "'", str23, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lhi!;" + "'", str28, "Lhi!;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(VBLhi!;SD)B" + "'", str33, "(VBLhi!;SD)B");
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method[] methodArray9 = new java.lang.reflect.Method[] { method8 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray9);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        java.lang.String str33 = classInfo18.toString();
        int int34 = classInfo18.getModifiers();
        java.lang.String str35 = classInfo18.toString();
        java.lang.String str36 = classInfo18.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor" + "'", str35, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.beans.PropertyDescriptor" + "'", str36, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "byteB");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!byteB" + "'", str4, "hi!byteB");
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) type12);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        java.lang.String str21 = propertyDescriptor20.getShortDescription();
        java.lang.reflect.Method method22 = propertyDescriptor20.getWriteMethod();
        java.lang.String str23 = propertyDescriptor20.getShortDescription();
        propertyDescriptor20.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor20.setShortDescription("float");
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        int int32 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        java.beans.PropertyEditor propertyEditor33 = propertyDescriptor20.createPropertyEditor((java.lang.Object) classArray29);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray29);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(propertyEditor33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("double");
        propertyDescriptor3.setHidden(true);
        java.lang.String str20 = propertyDescriptor3.getName();
        boolean boolean21 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setReadMethod(method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lhi!;float", method1, method2);
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("Lorg/mockito/cglib/core/Signature;", method9, method10);
        boolean boolean12 = signature6.equals((java.lang.Object) "Lorg/mockito/cglib/core/Signature;");
        java.lang.String str13 = signature6.getName();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature6);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(propertyEditor14);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(DBBBD)Lg/mockito/cglib/core/Signature;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setBound(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        propertyDescriptor3.setDisplayName("[Ljava/lang/Class;");
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray19 = classInfo18.getInterfaces();
        org.mockito.asm.Type type20 = classInfo18.getSuperType();
        org.mockito.asm.Type[] typeArray21 = classInfo18.getInterfaces();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setValue("java.lang.Object", (java.lang.Object) 10.0d);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        java.lang.String str19 = propertyDescriptor16.getShortDescription();
        propertyDescriptor16.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor16.setReadMethod(method23);
        propertyDescriptor16.setDisplayName("double");
        propertyDescriptor16.setBound(false);
        propertyDescriptor16.setHidden(true);
        propertyDescriptor3.setValue("g.mockito.cglib.core.Signature", (java.lang.Object) propertyDescriptor16);
        propertyDescriptor3.setShortDescription("()LbyteB;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)Ljava/beans/FeatureDescriptor;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int6 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor10 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass1, classArray3);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray29);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=double; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("");
        boolean boolean23 = propertyDescriptor3.isPreferred();
        boolean boolean24 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("(DBBBD)LZ;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(DBBBD)Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("ava.beans.PropertyDescriptor[name=byte");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Ljava.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}];");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Ljava.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;float()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.Class<?> wildcardClass5 = classArray0.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str10 = signature9.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        boolean boolean16 = signature9.equals((java.lang.Object) classArray15);
        java.lang.String str17 = signature9.getDescriptor();
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        boolean boolean26 = signature9.equals((java.lang.Object) classArray22);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass30 = signature29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass5, classArray22, (java.lang.Object[]) propertyDescriptorArray31);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lhi!;" + "'", str10, "Lhi!;");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        java.lang.String str7 = propertyDescriptor4.getShortDescription();
        boolean boolean8 = propertyDescriptor4.isPreferred();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.String str14 = signature12.getName();
        org.mockito.asm.Type type15 = signature12.getReturnType();
        propertyDescriptor4.setValue("B", (java.lang.Object) type15);
        int int17 = type15.getSize();
        int int18 = type15.getSort();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        int int38 = classInfo37.getModifiers();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.String str43 = propertyDescriptor42.getShortDescription();
        java.lang.reflect.Method method44 = propertyDescriptor42.getWriteMethod();
        propertyDescriptor42.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean48 = classInfo37.equals((java.lang.Object) propertyDescriptor42);
        int int49 = classInfo37.getModifiers();
        org.mockito.asm.Type[] typeArray50 = classInfo37.getInterfaces();
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("hi!B", type15, typeArray50);
        org.mockito.asm.Type type52 = signature51.getReturnType();
        int int54 = type52.getOpcode(21);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type55 = type52.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNull(method44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 21 + "'", int54 == 21);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)V", method1, method2);
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        java.lang.String str8 = propertyDescriptor7.getDisplayName();
        boolean boolean9 = propertyDescriptor7.isHidden();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getClass();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass10);
        propertyDescriptor3.setExpert(true);
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        java.lang.String str21 = propertyDescriptor20.getShortDescription();
        boolean boolean22 = propertyDescriptor20.isPreferred();
        java.lang.reflect.Method method23 = null;
        propertyDescriptor20.setWriteMethod(method23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor20.createPropertyEditor((java.lang.Object) 10);
        propertyDescriptor20.setPreferred(false);
        propertyDescriptor20.setConstrained(false);
        propertyDescriptor20.setBound(false);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.String str38 = propertyDescriptor37.getShortDescription();
        java.lang.reflect.Method method39 = propertyDescriptor37.getWriteMethod();
        java.lang.String str40 = propertyDescriptor37.getShortDescription();
        propertyDescriptor37.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor37.setExpert(false);
        propertyDescriptor37.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor37.setHidden(true);
        propertyDescriptor37.setHidden(false);
        java.lang.Class<?> wildcardClass52 = propertyDescriptor37.getPropertyEditorClass();
        propertyDescriptor20.setValue("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", (java.lang.Object) propertyDescriptor37);
        propertyDescriptor3.setValue("()V", (java.lang.Object) propertyDescriptor37);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(wildcardClass52);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list10 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("org.mockito.cglib.core.Signature");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        java.lang.String str9 = type8.getInternalName();
        java.lang.String str10 = type8.getInternalName();
        int int11 = type8.getDimensions();
        java.lang.String str12 = type8.getDescriptor();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        propertyDescriptor16.setValue("double", (java.lang.Object) ' ');
        boolean boolean22 = propertyDescriptor16.isExpert();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.Class<?> wildcardClass28 = propertyDescriptor27.getClass();
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        propertyDescriptor16.setValue("float", (java.lang.Object) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        boolean boolean38 = classInfo31.equals((java.lang.Object) type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        int int43 = type42.getSort();
        int int45 = type42.getOpcode(3);
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        int int50 = type49.getSort();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type40, type42, type47, type49, type51 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray53);
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("floatLLorg/mockito/cglib/core/Signature;;", type8, typeArray53);
        org.mockito.asm.Type type58 = signature57.getReturnType();
        int int59 = type58.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/lang/Object" + "'", str9, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/lang/Object" + "'", str10, "java/lang/Object");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/lang/Object;" + "'", str12, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "double" + "'", str41, "double");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "byte" + "'", str46, "byte");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "double" + "'", str52, "double");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(DBBBD)V" + "'", str54, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(DBBBD)B" + "'", str55, "(DBBBD)B");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=hi!; displayName=double; values={byte=0}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj17 = propertyDescriptor3.getValue("(DBBBD)B");
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean20 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]double");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "double" + "'", str18, "double");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setConstrained(true);
        java.lang.String str16 = propertyDescriptor3.getName();
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        java.lang.String str23 = propertyDescriptor22.getShortDescription();
        java.lang.reflect.Method method24 = propertyDescriptor22.getWriteMethod();
        propertyDescriptor22.setValue("double", (java.lang.Object) ' ');
        boolean boolean28 = propertyDescriptor22.isExpert();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        propertyDescriptor22.setValue("float", (java.lang.Object) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type41 = signature40.getReturnType();
        java.lang.String str42 = signature40.getName();
        org.mockito.asm.Type type43 = signature40.getReturnType();
        boolean boolean44 = classInfo37.equals((java.lang.Object) type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str47 = type46.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        int int51 = type48.getOpcode(3);
        java.lang.String str52 = type48.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        int int54 = type53.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        int int56 = type55.getSort();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type46, type48, type53, type55, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass18, classArray62);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "double" + "'", str47, "double");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "byte" + "'", str52, "byte");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)V" + "'", str60, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)B" + "'", str61, "(DBBBD)B");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray63);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass16 = signature14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = classInfo18.getSuperType();
        java.lang.String str20 = type19.getInternalName();
        java.lang.String str21 = type19.getInternalName();
        java.lang.String str22 = type19.getInternalName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        int int41 = type38.getOpcode(3);
        java.lang.String str42 = type38.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str48 = type47.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type36, type38, type43, type45, type47 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        int int52 = type51.getSize();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str55 = type54.getDescriptor();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type35, type51, type54, type56, type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        int int65 = type64.getSort();
        int int67 = type64.getOpcode(3);
        java.lang.String str68 = type64.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BYTE_TYPE;
        int int70 = type69.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        int int72 = type71.getSort();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type62, type64, type69, type71, type73 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray75);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type27, typeArray75);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray75);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray75);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray75);
        int int83 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray82);
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method86 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "java.beans.PropertyDescriptor[name=hi!; displayName=double; values={byte=0}]", classArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=hi!; displayName=double; values={byte=0}]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str10, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/lang/Object" + "'", str20, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java/lang/Object" + "'", str21, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/lang/Object" + "'", str22, "java/lang/Object");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "double" + "'", str37, "double");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "byte" + "'", str42, "byte");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "double" + "'", str48, "double");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)V" + "'", str50, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lhi!;" + "'", str55, "Lhi!;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "double" + "'", str58, "double");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(VBLhi!;SD)B" + "'", str60, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "double" + "'", str63, "double");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "byte" + "'", str68, "byte");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "double" + "'", str74, "double");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(DBBBD)V" + "'", str76, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(DBBBD)B" + "'", str77, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(DBBBD)Lhi!;" + "'", str78, "(DBBBD)Lhi!;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;" + "'", str80, "(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(DBBBD)Ljava/lang/Object;" + "'", str81, "(DBBBD)Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        propertyDescriptor3.setDisplayName("L(DBBBD)V;");
        java.lang.String str12 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=L(DBBBD)V;]" + "'", str12, "java.beans.PropertyDescriptor[name=hi!; displayName=L(DBBBD)V;]");
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.String str7 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str7, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setName("double");
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor14.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean23 = propertyDescriptor14.isExpert();
        java.beans.PropertyEditor propertyEditor24 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean23);
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyEditor24);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setPreferred(false);
        boolean boolean22 = propertyDescriptor3.isPreferred();
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("Ljava/lang/Object;", obj24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("LbyteB;", method1, method2);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getDisplayName();
        boolean boolean13 = propertyDescriptor11.isHidden();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, false, true);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, false, false);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray24);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray25);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNull(propertyEditor26);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Ljava/beans/FeatureDescriptor;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method23 = null;
        propertyDescriptor3.setReadMethod(method23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; preferred]", "Lorg/mockito/asm/Type;");
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(DBBBD)B]", (java.lang.Object) signature22);
        java.lang.String str24 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={double= }; constrained]");
        int int3 = type1.getOpcode(9);
        int int5 = type1.getOpcode(16);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13 + "'", int3 == 13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.toString();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]", method5, method6);
        java.lang.Object obj9 = propertyDescriptor7.getValue("ava.beans.PropertyDescriptor[name=hi!");
        boolean boolean10 = signature2.equals((java.lang.Object) propertyDescriptor7);
        boolean boolean11 = propertyDescriptor7.isHidden();
        propertyDescriptor7.setPreferred(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, true);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class<?> wildcardClass35 = classArray33.getClass();
        propertyDescriptor7.setValue("LB;", (java.lang.Object) wildcardClass35);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type40 = signature39.getReturnType();
        java.lang.String str41 = signature39.getName();
        org.mockito.asm.Type type42 = signature39.getReturnType();
        boolean boolean44 = signature39.equals((java.lang.Object) 10.0d);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        boolean boolean50 = signature39.equals((java.lang.Object) classArray45);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Object[] objArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass35, classArray45, objArray52);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!B" + "'", str3, "hi!B");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str22 = classInfo21.toString();
        java.lang.String str23 = classInfo21.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor" + "'", str22, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()LC;", "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]java.beans.PropertyDescriptor[name=(DBBBD)B]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()LC;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        java.lang.String str21 = type20.getClassName();
        org.mockito.asm.Type type22 = type20.getElementType();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor26.setValue("double", (java.lang.Object) ' ');
        boolean boolean32 = propertyDescriptor26.isExpert();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.Class<?> wildcardClass38 = propertyDescriptor37.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        propertyDescriptor26.setValue("float", (java.lang.Object) wildcardClass38);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor26.getPropertyEditorClass();
        java.lang.Object obj43 = propertyDescriptor26.getValue("LLorg/mockito/cglib/core/Signature;;");
        java.lang.String str44 = propertyDescriptor26.getShortDescription();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass45);
        boolean boolean47 = type22.equals((java.lang.Object) wildcardClass45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method48 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java/beans/PropertyDescriptor" + "'", str39, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getDisplayName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        propertyDescriptor4.setHidden(false);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor13.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor4.setValue("byte", (java.lang.Object) propertyDescriptor13);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/PropertyDescriptor" + "'", str24, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("byteB");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=byteB]" + "'", str11, "java.beans.PropertyDescriptor[name=hi!; displayName=byteB]");
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(DBBBD)Ljava/beans/PropertyDescriptor;");
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(true);
        java.lang.Object obj11 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type]; values={byte=0}]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str7, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}; constrained; propertyEditorClass=class java.beans.PropertyDescriptor]", method1, method2);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; bound]", "(DBBBD)V");
        boolean boolean13 = classInfo9.equals((java.lang.Object) "(DBBBD)V");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type[] typeArray11 = classInfo7.getInterfaces();
        java.lang.String str12 = classInfo7.toString();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor" + "'", str12, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(DBBBD)V]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str2, "ava.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str3, "ava.beans.PropertyDescriptor[name=hi!");
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L!;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; preferred]", (java.lang.Object) type12);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        java.lang.Class<?> wildcardClass31 = classInfo18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass31);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type14 = classInfo13.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int2 = type0.getSort();
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("byteB", "Lorg/mockito/cglib/core/Signature;");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.String str11 = type10.getClassName();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        java.lang.String str18 = propertyDescriptor15.getShortDescription();
        propertyDescriptor15.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor15.setExpert(false);
        propertyDescriptor15.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor15.setConstrained(true);
        java.lang.String str28 = propertyDescriptor15.getName();
        java.util.Enumeration<java.lang.String> strEnumeration29 = propertyDescriptor15.attributeNames();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("java.lang.Object");
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.String str36 = propertyDescriptor35.getShortDescription();
        java.lang.reflect.Method method37 = propertyDescriptor35.getWriteMethod();
        propertyDescriptor35.setValue("double", (java.lang.Object) ' ');
        boolean boolean41 = propertyDescriptor35.isExpert();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        java.lang.Class<?> wildcardClass47 = propertyDescriptor46.getClass();
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass47);
        propertyDescriptor35.setValue("float", (java.lang.Object) wildcardClass47);
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        int int51 = classInfo50.getModifiers();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        java.lang.String str56 = propertyDescriptor55.getShortDescription();
        java.lang.reflect.Method method57 = propertyDescriptor55.getWriteMethod();
        propertyDescriptor55.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean61 = classInfo50.equals((java.lang.Object) propertyDescriptor55);
        int int62 = classInfo50.getModifiers();
        org.mockito.asm.Type[] typeArray63 = classInfo50.getInterfaces();
        org.mockito.asm.Type type64 = classInfo50.getType();
        java.lang.String str65 = type64.toString();
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("hi!", method67, method68);
        java.lang.Class<?> wildcardClass70 = propertyDescriptor69.getClass();
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass70);
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass70);
        org.mockito.cglib.core.ClassInfo classInfo73 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type74 = classInfo73.getType();
        org.mockito.asm.Type type75 = classInfo73.getType();
        org.mockito.asm.Type[] typeArray76 = classInfo73.getInterfaces();
        org.mockito.asm.Type[] typeArray77 = classInfo73.getInterfaces();
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray77);
        java.beans.PropertyEditor propertyEditor81 = propertyDescriptor15.createPropertyEditor((java.lang.Object) typeArray77);
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("Lorg/mockito/asm/Type;", type10, typeArray77);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor84 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass3, classArray83);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str11, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java/beans/PropertyDescriptor" + "'", str48, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNull(method57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str65, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java/beans/PropertyDescriptor" + "'", str71, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str72, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str78, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "()Ljava.lang.Object;" + "'", str79, "()Ljava.lang.Object;");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNull(propertyEditor81);
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Ljava.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}];");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setName("double");
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("F");
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getShortDescription();
        java.lang.reflect.Method method20 = propertyDescriptor18.getWriteMethod();
        propertyDescriptor18.setValue("double", (java.lang.Object) ' ');
        boolean boolean24 = propertyDescriptor18.isExpert();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor29.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        propertyDescriptor18.setValue("float", (java.lang.Object) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        int int34 = classInfo33.getModifiers();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.String str39 = propertyDescriptor38.getShortDescription();
        java.lang.reflect.Method method40 = propertyDescriptor38.getWriteMethod();
        propertyDescriptor38.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean44 = classInfo33.equals((java.lang.Object) propertyDescriptor38);
        int int45 = classInfo33.getModifiers();
        org.mockito.asm.Type[] typeArray46 = classInfo33.getInterfaces();
        boolean boolean48 = classInfo33.equals((java.lang.Object) 100.0f);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        java.lang.String str53 = propertyDescriptor52.getShortDescription();
        java.lang.reflect.Method method54 = propertyDescriptor52.getWriteMethod();
        propertyDescriptor52.setValue("double", (java.lang.Object) ' ');
        boolean boolean58 = propertyDescriptor52.isExpert();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        java.lang.Class<?> wildcardClass64 = propertyDescriptor63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        propertyDescriptor52.setValue("float", (java.lang.Object) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        int int68 = classInfo67.getModifiers();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("hi!", method70, method71);
        java.lang.String str73 = propertyDescriptor72.getShortDescription();
        java.lang.reflect.Method method74 = propertyDescriptor72.getWriteMethod();
        propertyDescriptor72.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean78 = classInfo67.equals((java.lang.Object) propertyDescriptor72);
        int int79 = classInfo67.getModifiers();
        org.mockito.asm.Type type80 = classInfo67.getSuperType();
        boolean boolean81 = classInfo33.equals((java.lang.Object) type80);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("hi!", method83, method84);
        java.lang.String str86 = propertyDescriptor85.getShortDescription();
        java.lang.reflect.Method method87 = propertyDescriptor85.getWriteMethod();
        propertyDescriptor85.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        propertyDescriptor85.setName("double");
        propertyDescriptor85.setExpert(false);
        propertyDescriptor85.setConstrained(true);
        boolean boolean97 = type80.equals((java.lang.Object) true);
        boolean boolean98 = propertyDescriptor3.equals((java.lang.Object) type80);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java/beans/PropertyDescriptor" + "'", str31, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNull(method54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java/beans/PropertyDescriptor" + "'", str65, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNull(method74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNull(method87);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setValue("java.lang.Object", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass2, wildcardClass7 };
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type16 = signature15.getReturnType();
        java.lang.String str17 = signature15.getName();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        boolean boolean27 = signature15.equals((java.lang.Object) strArray26);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        java.lang.Class<?> wildcardClass32 = signature30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, false);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        int int40 = type39.getSort();
        java.lang.Class<?> wildcardClass41 = type39.getClass();
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type45 = signature44.getReturnType();
        java.lang.Class<?> wildcardClass46 = signature44.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass41, wildcardClass46 };
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.reflect.Method[] methodArray50 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray50);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray50);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        java.lang.Class<?> wildcardClass57 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, true, false);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray64);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("hi!", method67, method68);
        java.lang.String str70 = propertyDescriptor69.getShortDescription();
        java.lang.reflect.Method method71 = propertyDescriptor69.getWriteMethod();
        propertyDescriptor69.setValue("double", (java.lang.Object) ' ');
        boolean boolean75 = propertyDescriptor69.isExpert();
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        java.beans.PropertyDescriptor propertyDescriptor80 = new java.beans.PropertyDescriptor("hi!", method78, method79);
        java.lang.Class<?> wildcardClass81 = propertyDescriptor80.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        propertyDescriptor69.setValue("float", (java.lang.Object) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo86 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass81);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray87, false, false);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray90);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str47, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNull(method71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java/beans/PropertyDescriptor" + "'", str82, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(classInfo86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(methodArray91);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("va.lang.Object");
        boolean boolean16 = propertyDescriptor3.isExpert();
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getShortDescription();
        java.lang.reflect.Method method23 = propertyDescriptor21.getWriteMethod();
        propertyDescriptor21.setValue("double", (java.lang.Object) ' ');
        boolean boolean27 = propertyDescriptor21.isExpert();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.Class<?> wildcardClass33 = propertyDescriptor32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        propertyDescriptor21.setValue("float", (java.lang.Object) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        int int37 = classInfo36.getModifiers();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        java.lang.String str42 = propertyDescriptor41.getShortDescription();
        java.lang.reflect.Method method43 = propertyDescriptor41.getWriteMethod();
        propertyDescriptor41.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean47 = classInfo36.equals((java.lang.Object) propertyDescriptor41);
        int int48 = classInfo36.getModifiers();
        org.mockito.asm.Type[] typeArray49 = classInfo36.getInterfaces();
        org.mockito.asm.Type type50 = classInfo36.getType();
        org.mockito.asm.Type type51 = classInfo36.getSuperType();
        int int52 = type51.getSort();
        java.beans.PropertyEditor propertyEditor53 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int52);
        propertyDescriptor3.setDisplayName("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java/beans/PropertyDescriptor" + "'", str34, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNull(method43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNull(propertyEditor53);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.Object obj6 = null;
        boolean boolean7 = signature2.equals(obj6);
        org.mockito.asm.Type type8 = signature2.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray9 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        propertyDescriptor4.setValue("double", (java.lang.Object) ' ');
        boolean boolean10 = propertyDescriptor4.isExpert();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        propertyDescriptor4.setValue("float", (java.lang.Object) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str21 = classInfo20.toString();
        org.mockito.asm.Type type22 = classInfo20.getSuperType();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor26.setValue("double", (java.lang.Object) ' ');
        boolean boolean32 = propertyDescriptor26.isExpert();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.Class<?> wildcardClass38 = propertyDescriptor37.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        propertyDescriptor26.setValue("float", (java.lang.Object) wildcardClass38);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        java.lang.Object obj42 = null;
        boolean boolean43 = classInfo41.equals(obj42);
        java.lang.String str44 = classInfo41.toString();
        org.mockito.asm.Type[] typeArray45 = classInfo41.getInterfaces();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=B]", type22, typeArray45);
        java.lang.String str47 = signature46.getName();
        org.mockito.asm.Type[] typeArray48 = signature46.getArgumentTypes();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java/beans/PropertyDescriptor" + "'", str39, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.beans.PropertyDescriptor" + "'", str44, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.beans.PropertyDescriptor[name=B]" + "'", str47, "java.beans.PropertyDescriptor[name=B]");
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.Object obj10 = propertyDescriptor3.getValue("()B");
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setHidden(false);
        propertyDescriptor14.setShortDescription("java.beans.PropertyDescriptor[name=hi!; expert]");
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor14);
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setWriteMethod(method25);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(propertyEditor22);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        boolean boolean21 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setHidden(false);
        java.lang.reflect.Method method24 = propertyDescriptor12.getReadMethod();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class<?> wildcardClass31 = signature29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        int int33 = type32.getDimensions();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.String str38 = propertyDescriptor37.getShortDescription();
        java.lang.reflect.Method method39 = propertyDescriptor37.getWriteMethod();
        propertyDescriptor37.setValue("double", (java.lang.Object) ' ');
        boolean boolean43 = propertyDescriptor37.isExpert();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        java.lang.Class<?> wildcardClass49 = propertyDescriptor48.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        propertyDescriptor37.setValue("float", (java.lang.Object) wildcardClass49);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        int int53 = classInfo52.getModifiers();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.String str58 = propertyDescriptor57.getShortDescription();
        java.lang.reflect.Method method59 = propertyDescriptor57.getWriteMethod();
        propertyDescriptor57.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean63 = classInfo52.equals((java.lang.Object) propertyDescriptor57);
        int int64 = classInfo52.getModifiers();
        org.mockito.asm.Type[] typeArray65 = classInfo52.getInterfaces();
        org.mockito.asm.Type type66 = classInfo52.getType();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("hi!", method68, method69);
        java.lang.String str71 = propertyDescriptor70.getDisplayName();
        boolean boolean72 = propertyDescriptor70.isHidden();
        propertyDescriptor70.setHidden(false);
        boolean boolean75 = classInfo52.equals((java.lang.Object) propertyDescriptor70);
        org.mockito.asm.Type type76 = classInfo52.getSuperType();
        org.mockito.asm.Type type77 = classInfo52.getSuperType();
        org.mockito.asm.Type[] typeArray78 = classInfo52.getInterfaces();
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]", type32, typeArray78);
        propertyDescriptor12.setValue("float", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.reflect.Method method81 = propertyDescriptor12.getReadMethod();
        java.lang.String str82 = propertyDescriptor12.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java/beans/PropertyDescriptor" + "'", str50, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNull(method81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={double= ; float=java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]}]" + "'", str82, "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={double= ; float=java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]}]");
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type9 = signature8.getReturnType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        int int14 = type13.getSort();
        int int16 = type13.getOpcode(3);
        java.lang.String str17 = type13.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        int int19 = type18.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSort();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type11, type13, type18, type20, type22 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type10, type26, type29, type31, type32 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        int int40 = type39.getSort();
        int int42 = type39.getOpcode(3);
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        int int45 = type44.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        int int47 = type46.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type37, type39, type44, type46, type48 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray50);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray50);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type2, typeArray50);
        org.mockito.asm.Type type55 = type2.getElementType();
        java.lang.Class<?> wildcardClass56 = type2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, false);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lhi!;" + "'", str5, "Lhi!;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "byte" + "'", str17, "byte");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "double" + "'", str23, "double");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(DBBBD)V" + "'", str25, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "double" + "'", str33, "double");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(VBLhi!;SD)B" + "'", str35, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "double" + "'", str38, "double");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "byte" + "'", str43, "byte");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "double" + "'", str49, "double");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(DBBBD)V" + "'", str51, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)B" + "'", str52, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)Lhi!;" + "'", str53, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("org.mockito.cglib.core.Signaturehi!B");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("L!;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("LbyteB;", method1, method2);
        propertyDescriptor3.setHidden(false);
        boolean boolean6 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor23.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor23.attributeNames();
        java.lang.Object obj33 = propertyDescriptor23.getValue("(DBBBD)V");
        boolean boolean34 = propertyDescriptor23.isExpert();
        java.lang.reflect.Method method35 = propertyDescriptor23.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(method35);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.String str13 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}](VBLhi!;SD)B; values={double= }]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        java.lang.String str9 = type8.getInternalName();
        java.lang.String str10 = type8.getClassName();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setValue("double", (java.lang.Object) ' ');
        boolean boolean20 = propertyDescriptor14.isExpert();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        propertyDescriptor14.setValue("float", (java.lang.Object) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type33 = signature32.getReturnType();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type type35 = signature32.getReturnType();
        boolean boolean36 = classInfo29.equals((java.lang.Object) type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        int int43 = type40.getOpcode(3);
        java.lang.String str44 = type40.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type38, type40, type45, type47, type49 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("org.mockito.cglib.core.Signature", type8, typeArray51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];");
        boolean boolean57 = signature54.equals((java.lang.Object) type56);
        org.mockito.asm.Type[] typeArray58 = signature54.getArgumentTypes();
        org.mockito.asm.Type type59 = signature54.getReturnType();
        java.lang.String str60 = type59.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/lang/Object" + "'", str9, "java/lang/Object");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Object" + "'", str10, "java.lang.Object");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java/beans/PropertyDescriptor" + "'", str27, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "double" + "'", str50, "double");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)V" + "'", str52, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)B" + "'", str53, "(DBBBD)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Ljava/lang/Object;" + "'", str60, "Ljava/lang/Object;");
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java/lang/Object", method1, method2);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("byteB", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "byteB" + "'", str5, "byteB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "byteB" + "'", str6, "byteB");
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("S");
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "S" + "'", str18, "S");
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(false);
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj12 = propertyDescriptor3.getValue("hi!");
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        boolean boolean16 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(DBBBD)V;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        boolean boolean14 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("(DBBBD)Ljava.beans.PropertyDescriptor[name=(VBLhi!;SD)B; values={byte=0}];");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 0, (byte) 1, (byte) 0 };
        java.lang.ClassLoader classLoader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(DBBBD)Ljava/beans/PropertyDescriptor;]", byteArray5, classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 0, 1, 0]");
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("D", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        propertyDescriptor11.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor11.attributeNames();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor11.setReadMethod(method19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        java.lang.String str27 = propertyDescriptor24.getShortDescription();
        propertyDescriptor24.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor24.setConstrained(false);
        propertyDescriptor24.setHidden(false);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.String str39 = propertyDescriptor38.getShortDescription();
        java.lang.reflect.Method method40 = propertyDescriptor38.getWriteMethod();
        java.lang.String str41 = propertyDescriptor38.getShortDescription();
        boolean boolean42 = propertyDescriptor38.isPreferred();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type47 = signature46.getReturnType();
        java.lang.String str48 = signature46.getName();
        org.mockito.asm.Type type49 = signature46.getReturnType();
        propertyDescriptor38.setValue("B", (java.lang.Object) type49);
        java.lang.reflect.Method method51 = propertyDescriptor38.getReadMethod();
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] { propertyDescriptor11, propertyDescriptor24, propertyDescriptor38 };
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, false);
        propertyDescriptor3.setValue("()Ljava/beans/FeatureDescriptor;", (java.lang.Object) methodArray55);
        java.lang.reflect.Method method57 = null;
        propertyDescriptor3.setReadMethod(method57);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int8 = type7.getSort();
        java.lang.String str9 = type7.getClassName();
        int int10 = type7.getSize();
        org.mockito.asm.Type type11 = type7.getElementType();
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor" + "'", str9, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        java.lang.String str26 = classInfo18.toString();
        org.mockito.asm.Type type27 = classInfo18.getSuperType();
        org.mockito.asm.Type type28 = classInfo18.getSuperType();
        java.lang.String str29 = type28.toString();
        int int31 = type28.getOpcode(19);
        int int32 = type28.getSort();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str29, "Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        java.lang.Class<?> wildcardClass30 = classInfo26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method33 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/cglib/core/ReflectUtils$4" + "'", str32, "org/mockito/cglib/core/ReflectUtils$4");
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean14 = type5.equals((java.lang.Object) wildcardClass12);
        org.mockito.asm.Type type15 = type5.getElementType();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getShortDescription();
        java.lang.reflect.Method method21 = propertyDescriptor19.getWriteMethod();
        propertyDescriptor19.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor19.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor19.setDisplayName("");
        boolean boolean29 = propertyDescriptor19.isExpert();
        propertyDescriptor19.setDisplayName("va.lang.Object");
        boolean boolean32 = propertyDescriptor19.isExpert();
        boolean boolean33 = type5.equals((java.lang.Object) propertyDescriptor19);
        propertyDescriptor19.setBound(false);
        java.lang.String str36 = propertyDescriptor19.getShortDescription();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "va.lang.Object" + "'", str36, "va.lang.Object");
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        java.lang.String str26 = classInfo18.toString();
        org.mockito.asm.Type type27 = classInfo18.getSuperType();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setValue("double", (java.lang.Object) ' ');
        boolean boolean37 = propertyDescriptor31.isExpert();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.Class<?> wildcardClass43 = propertyDescriptor42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        propertyDescriptor31.setValue("float", (java.lang.Object) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.Object obj47 = null;
        boolean boolean48 = classInfo46.equals(obj47);
        java.lang.String str49 = classInfo46.toString();
        org.mockito.asm.Type[] typeArray50 = classInfo46.getInterfaces();
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray50);
        java.lang.String str52 = type27.getClassName();
        java.lang.String str53 = type27.getClassName();
        int int54 = type27.getSort();
        java.lang.String str55 = type27.getInternalName();
        int int56 = type27.getSort();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getReturnType("(DBBBD)V");
        java.lang.String str59 = type58.getClassName();
        java.lang.String str60 = type58.toString();
        boolean boolean61 = type27.equals((java.lang.Object) str60);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java/beans/PropertyDescriptor" + "'", str44, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.beans.PropertyDescriptor" + "'", str49, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "()Ljava/beans/FeatureDescriptor;" + "'", str51, "()Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.beans.FeatureDescriptor" + "'", str52, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.beans.FeatureDescriptor" + "'", str53, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java/beans/FeatureDescriptor" + "'", str55, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "void" + "'", str59, "void");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = classInfo5.getType();
        int int8 = type6.getOpcode(5);
        int int9 = type6.getDimensions();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        propertyDescriptor13.setValue("double", (java.lang.Object) ' ');
        boolean boolean19 = propertyDescriptor13.isExpert();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        propertyDescriptor13.setValue("float", (java.lang.Object) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.Object obj29 = null;
        boolean boolean30 = classInfo28.equals(obj29);
        java.lang.String str31 = classInfo28.toString();
        org.mockito.asm.Type[] typeArray32 = classInfo28.getInterfaces();
        java.lang.String str33 = classInfo28.toString();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str37 = signature36.getName();
        java.lang.String str38 = signature36.toString();
        org.mockito.asm.Type type39 = signature36.getReturnType();
        boolean boolean40 = classInfo28.equals((java.lang.Object) signature36);
        boolean boolean41 = type6.equals((java.lang.Object) signature36);
        java.lang.String str42 = signature36.getName();
        java.lang.String str43 = signature36.getName();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.beans.PropertyDescriptor" + "'", str31, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!B" + "'", str38, "hi!B");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(DBBBD)Ljava/lang/Object;");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int12 = type11.getSort();
        java.lang.String str13 = type11.getClassName();
        int int14 = type11.getSize();
        java.lang.String str15 = type11.getDescriptor();
        boolean boolean16 = type1.equals((java.lang.Object) str15);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor" + "'", str13, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str15, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        java.lang.String str9 = type8.getDescriptor();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str9, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list10 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass6, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        boolean boolean25 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}; constrained]" + "'", str19, "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}; constrained]");
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]", "byte");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=hi!; shortDescription=(DBBBD)V; values={byte=0}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        java.lang.String str30 = classInfo20.toString();
        int int31 = classInfo20.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.beans.PropertyDescriptor" + "'", str30, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.lang.String str10 = classInfo9.toString();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Ljava/beans/FeatureDescriptor;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.Class<?> wildcardClass9 = signature7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNull(propertyEditor14);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java/lang/Object", method1, method2);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(true);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; preferred]byte", "java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type]; values={byte=0}]");
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        boolean boolean30 = propertyDescriptor26.isPreferred();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        propertyDescriptor26.setValue("B", (java.lang.Object) type37);
        propertyDescriptor26.setShortDescription("byte");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = classInfo43.getType();
        java.lang.String str45 = type44.getInternalName();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type44);
        java.util.Enumeration<java.lang.String> strEnumeration47 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method48 = propertyDescriptor3.getReadMethod();
        java.lang.String str49 = propertyDescriptor3.getName();
        boolean boolean50 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(strEnumeration47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; displayName=float; preferred]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str4 = signature3.getDescriptor();
        org.mockito.asm.Type type5 = signature3.getReturnType();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        boolean boolean15 = propertyDescriptor11.isPreferred();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type20 = signature19.getReturnType();
        java.lang.String str21 = signature19.getName();
        org.mockito.asm.Type type22 = signature19.getReturnType();
        propertyDescriptor11.setValue("B", (java.lang.Object) type22);
        int int24 = type22.getSize();
        int int25 = type22.getSort();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.String str30 = propertyDescriptor29.getShortDescription();
        java.lang.reflect.Method method31 = propertyDescriptor29.getWriteMethod();
        propertyDescriptor29.setValue("double", (java.lang.Object) ' ');
        boolean boolean35 = propertyDescriptor29.isExpert();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor40.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        propertyDescriptor29.setValue("float", (java.lang.Object) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        int int45 = classInfo44.getModifiers();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        java.lang.String str50 = propertyDescriptor49.getShortDescription();
        java.lang.reflect.Method method51 = propertyDescriptor49.getWriteMethod();
        propertyDescriptor49.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean55 = classInfo44.equals((java.lang.Object) propertyDescriptor49);
        int int56 = classInfo44.getModifiers();
        org.mockito.asm.Type[] typeArray57 = classInfo44.getInterfaces();
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("hi!B", type22, typeArray57);
        org.mockito.asm.Type[] typeArray59 = signature58.getArgumentTypes();
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("hi!byteBfloat", type6, typeArray59);
        int int62 = type6.getOpcode(19);
        int int64 = type6.getOpcode(15);
        int int65 = type6.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java/beans/PropertyDescriptor" + "'", str42, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 19 + "'", int62 == 19);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 15 + "'", int64 == 15);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        org.mockito.asm.Type type32 = classInfo18.getType();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        java.lang.String str39 = propertyDescriptor36.getShortDescription();
        propertyDescriptor36.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor36.setExpert(false);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor36.getPropertyEditorClass();
        java.lang.reflect.Method method46 = null;
        propertyDescriptor36.setWriteMethod(method46);
        propertyDescriptor36.setShortDescription("(DBBBD)Lhi!;");
        boolean boolean50 = classInfo18.equals((java.lang.Object) propertyDescriptor36);
        org.mockito.asm.Type type51 = classInfo18.getType();
        org.mockito.asm.Type type52 = classInfo18.getType();
        java.lang.String str53 = type52.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java/beans/PropertyDescriptor" + "'", str53, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type21 = classInfo20.getSuperType();
        java.lang.String str22 = classInfo20.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor" + "'", str22, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getDisplayName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        propertyDescriptor4.setHidden(false);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str11, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str13 = type12.getDescriptor();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type17 = signature16.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        int int24 = type21.getOpcode(3);
        java.lang.String str25 = type21.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        int int29 = type28.getSort();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type19, type21, type26, type28, type30 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        int int35 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str38 = type37.getDescriptor();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type18, type34, type37, type39, type40 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        int int50 = type47.getOpcode(3);
        java.lang.String str51 = type47.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        int int55 = type54.getSort();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type45, type47, type52, type54, type56 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method63 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass6, "java.beans.PropertyDescriptor[name=double; values={double= ; =LLLorg/mockito/cglib/core/Signature;;;}; bound]", classArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=double; values={double= ; =LLLorg/mockito/cglib/core/Signature;;;}; bound]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lhi!;" + "'", str13, "Lhi!;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "byte" + "'", str25, "byte");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "double" + "'", str31, "double");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(DBBBD)V" + "'", str33, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lhi!;" + "'", str38, "Lhi!;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "double" + "'", str41, "double");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(VBLhi!;SD)B" + "'", str43, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "byte" + "'", str51, "byte");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "double" + "'", str57, "double");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)V" + "'", str59, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(DBBBD)B" + "'", str60, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)Lhi!;" + "'", str61, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray62);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("double");
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byteB", "Lorg/mockito/cglib/core/Signature;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.getName();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        int int8 = type7.getSort();
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.Class<?> wildcardClass14 = signature12.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.lang.Class[] classArray16 = new java.lang.Class[] { wildcardClass9, wildcardClass14 };
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        int int23 = type22.getSort();
        java.lang.Class<?> wildcardClass24 = type22.getClass();
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type28 = signature27.getReturnType();
        java.lang.Class<?> wildcardClass29 = signature27.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        java.lang.Class[] classArray31 = new java.lang.Class[] { wildcardClass24, wildcardClass29 };
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type38 = signature37.getReturnType();
        java.lang.String str39 = signature37.getName();
        org.mockito.asm.Type type40 = signature37.getReturnType();
        java.lang.String str41 = signature37.getDescriptor();
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        boolean boolean49 = signature37.equals((java.lang.Object) strArray48);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type53 = signature52.getReturnType();
        java.lang.Class<?> wildcardClass54 = signature52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, false);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray58);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        java.lang.Class<?> wildcardClass63 = type61.getClass();
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type67 = signature66.getReturnType();
        java.lang.Class<?> wildcardClass68 = signature66.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        java.lang.Class[] classArray70 = new java.lang.Class[] { wildcardClass63, wildcardClass68 };
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.reflect.Method[] methodArray72 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray72);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray72);
        java.lang.reflect.Method method76 = null;
        java.lang.reflect.Method method77 = null;
        java.beans.PropertyDescriptor propertyDescriptor78 = new java.beans.PropertyDescriptor("hi!", method76, method77);
        java.lang.Class<?> wildcardClass79 = propertyDescriptor78.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass79);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray83, true, false);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray86);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray86);
        boolean boolean89 = signature2.equals((java.lang.Object) strArray21);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byteB" + "'", str4, "byteB");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "byteBLorg/mockito/cglib/core/Signature;" + "'", str6, "byteBLorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str15, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str30, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str69, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) -1, (byte) -1, (byte) -1 };
        java.lang.ClassLoader classLoader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class8 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; displayName=byteB]", byteArray6, classLoader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 10, -1, -1, -1]");
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass3 = signature2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str5, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(DBBBD)Lhi!;");
        int int2 = type1.getDimensions();
        int int3 = type1.getDimensions();
        java.lang.String str4 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LDBBBD)Lhi!;" + "'", str4, "LDBBBD)Lhi!;");
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj18 = propertyDescriptor3.getValue("byte");
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean14 = type5.equals((java.lang.Object) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        int int17 = classInfo16.getModifiers();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj20 = propertyDescriptor3.getValue("LLorg/mockito/cglib/core/Signature;;");
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type31 = signature30.getReturnType();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        int int36 = type35.getSort();
        int int38 = type35.getOpcode(3);
        java.lang.String str39 = type35.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        int int43 = type42.getSort();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type33, type35, type40, type42, type44 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSize();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str52 = type51.getDescriptor();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type32, type48, type51, type53, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        int int64 = type61.getOpcode(3);
        java.lang.String str65 = type61.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        int int69 = type68.getSort();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type59, type61, type66, type68, type70 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray72);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray72);
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray76);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor79 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray76);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "double" + "'", str34, "double");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "byte" + "'", str39, "byte");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "double" + "'", str45, "double");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(DBBBD)V" + "'", str47, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lhi!;" + "'", str52, "Lhi!;");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(VBLhi!;SD)B" + "'", str57, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "double" + "'", str60, "double");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "double" + "'", str71, "double");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)V" + "'", str73, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(DBBBD)B" + "'", str74, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(DBBBD)Lhi!;" + "'", str75, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(DBBBD)B");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type7 = signature6.getReturnType();
        java.lang.Class<?> wildcardClass8 = signature6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean13 = type1.equals((java.lang.Object) wildcardClass8);
        java.lang.String str14 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = classInfo9.getType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("LLorg/mockito/cglib/core/Signature;;");
        propertyDescriptor3.setValue("", (java.lang.Object) type18);
        java.lang.String str20 = type18.getClassName();
        java.lang.String str21 = type18.getClassName();
        int int22 = type18.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "double" + "'", str15, "double");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LLorg.mockito.cglib.core.Signature;;" + "'", str20, "LLorg.mockito.cglib.core.Signature;;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LLorg.mockito.cglib.core.Signature;;" + "'", str21, "LLorg.mockito.cglib.core.Signature;;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray21);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray25);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass15, "", classArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("java/beans/PropertyDescriptor");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        int int20 = type17.getOpcode(3);
        java.lang.String str21 = type17.getClassName();
        java.lang.String str22 = type17.getClassName();
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        boolean boolean25 = type17.equals((java.lang.Object) classArray23);
        boolean boolean26 = propertyDescriptor3.equals((java.lang.Object) classArray23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "byte" + "'", str21, "byte");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "byte" + "'", str22, "byte");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setShortDescription("D");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setConstrained(false);
        java.lang.String str12 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=D]" + "'", str12, "java.beans.PropertyDescriptor[name=hi!; shortDescription=D]");
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()J");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method11);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str7, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method[] methodArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; values={byte=0}; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str6 = type5.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        int int8 = type7.getSort();
        int int10 = type7.getOpcode(3);
        java.lang.String str11 = type7.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        int int13 = type12.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type5, type7, type12, type14, type16 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        int int21 = type20.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type4, type20, type23, type25, type26 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        int int34 = type33.getSort();
        int int36 = type33.getOpcode(3);
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        int int39 = type38.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type31, type33, type38, type40, type42 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray44);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        java.lang.String str51 = propertyDescriptor50.getShortDescription();
        java.lang.reflect.Method method52 = propertyDescriptor50.getWriteMethod();
        propertyDescriptor50.setValue("double", (java.lang.Object) ' ');
        boolean boolean56 = propertyDescriptor50.isExpert();
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("hi!", method59, method60);
        java.lang.Class<?> wildcardClass62 = propertyDescriptor61.getClass();
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        propertyDescriptor50.setValue("float", (java.lang.Object) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type69 = signature68.getReturnType();
        java.lang.String str70 = signature68.getName();
        org.mockito.asm.Type type71 = signature68.getReturnType();
        boolean boolean72 = classInfo65.equals((java.lang.Object) type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        int int77 = type76.getSort();
        int int79 = type76.getOpcode(3);
        java.lang.String str80 = type76.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BYTE_TYPE;
        int int82 = type81.getSort();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BYTE_TYPE;
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type74, type76, type81, type83, type85 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray87);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray87);
        int int91 = type3.getSort();
        java.lang.Object obj92 = null;
        boolean boolean93 = type3.equals(obj92);
        int int94 = type3.getSize();
        // The following exception was thrown during execution in test generation
        try {
            int int95 = type3.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "double" + "'", str6, "double");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "byte" + "'", str11, "byte");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "double" + "'", str17, "double");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(DBBBD)V" + "'", str19, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lhi!;" + "'", str24, "Lhi!;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "double" + "'", str27, "double");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(VBLhi!;SD)B" + "'", str29, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "double" + "'", str32, "double");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "byte" + "'", str37, "byte");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "double" + "'", str43, "double");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(DBBBD)V" + "'", str45, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(DBBBD)B" + "'", str46, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(method52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java/beans/PropertyDescriptor" + "'", str63, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "double" + "'", str75, "double");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "byte" + "'", str80, "byte");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "double" + "'", str86, "double");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(DBBBD)V" + "'", str88, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(DBBBD)B" + "'", str89, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(DBBBD)B" + "'", str90, "(DBBBD)B");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; displayName=float; preferred]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("double");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        boolean boolean20 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method21 = propertyDescriptor3.getReadMethod();
        boolean boolean22 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(DBBBD)B", method1, method2);
        propertyDescriptor3.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(DBBBD)B" + "'", str9, "(DBBBD)B");
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        boolean boolean29 = classInfo20.equals((java.lang.Object) classInfo26);
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.mockito.asm.Type type31 = classInfo26.getType();
        org.mockito.asm.Type type32 = classInfo26.getType();
        org.mockito.asm.Type[] typeArray33 = classInfo26.getInterfaces();
        org.mockito.asm.Type type34 = classInfo26.getSuperType();
        int int35 = type34.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/cglib/core/Signature;");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str2, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLorg/mockito/cglib/core/Signature;;" + "'", str3, "LLorg/mockito/cglib/core/Signature;;");
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lva/beans/PropertyDescriptor;", "Lg/mockito/cglib/core/Signature;");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lva/beans/PropertyDescriptor;" + "'", str3, "Lva/beans/PropertyDescriptor;");
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = classInfo19.getType();
        int int21 = classInfo19.getModifiers();
        int int22 = classInfo19.getModifiers();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        org.mockito.asm.Type type24 = classInfo19.getType();
        java.lang.String str25 = classInfo19.toString();
        java.lang.String str26 = classInfo19.toString();
        int int27 = classInfo19.getModifiers();
        org.mockito.asm.Type type28 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo19.getInterfaces();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.PropertyDescriptor" + "'", str25, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor" + "'", str26, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setName("double");
        boolean boolean11 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str16 = signature15.getName();
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        boolean boolean22 = signature15.equals((java.lang.Object) classArray21);
        java.lang.String str23 = signature15.getDescriptor();
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        boolean boolean32 = signature15.equals((java.lang.Object) classArray28);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.Class<?> wildcardClass34 = type33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type37 = classInfo36.getType();
        org.mockito.asm.Type type38 = classInfo36.getSuperType();
        org.mockito.asm.Type[] typeArray39 = classInfo36.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass12, classArray28, (java.lang.Object[]) typeArray39);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lhi!;" + "'", str16, "Lhi!;");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.Class<?> wildcardClass14 = signature12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getShortDescription();
        java.lang.reflect.Method method23 = propertyDescriptor21.getWriteMethod();
        java.lang.String str24 = propertyDescriptor21.getDisplayName();
        boolean boolean25 = classInfo17.equals((java.lang.Object) str24);
        org.mockito.asm.Type type26 = classInfo17.getSuperType();
        org.mockito.asm.Type type27 = classInfo17.getType();
        org.mockito.asm.Type type28 = type27.getElementType();
        java.lang.String str29 = type28.getInternalName();
        boolean boolean30 = classInfo7.equals((java.lang.Object) str29);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str6, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "g/mockito/cglib/core/Signature" + "'", str29, "g/mockito/cglib/core/Signature");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=B]");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=B]" + "'", str12, "java.beans.PropertyDescriptor[name=B]");
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getShortDescription();
        java.lang.reflect.Method method8 = propertyDescriptor6.getWriteMethod();
        java.lang.String str9 = propertyDescriptor6.getShortDescription();
        propertyDescriptor6.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor6.setReadMethod(method13);
        java.lang.Object obj16 = propertyDescriptor6.getValue("java/beans/PropertyDescriptor");
        boolean boolean17 = type1.equals((java.lang.Object) "java/beans/PropertyDescriptor");
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor21.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type28 = signature27.getReturnType();
        java.lang.String str29 = signature27.getName();
        org.mockito.asm.Type type30 = signature27.getReturnType();
        java.lang.String str31 = signature27.getDescriptor();
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        boolean boolean39 = signature27.equals((java.lang.Object) strArray38);
        java.lang.String str40 = signature27.getDescriptor();
        org.mockito.asm.Type type41 = signature27.getReturnType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        int int48 = type45.getOpcode(3);
        java.lang.String str49 = type45.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type43, type45, type50, type52, type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray56);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type41, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray56);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]", type1, typeArray56);
        java.lang.String str61 = type1.getClassName();
        java.lang.Class<?> wildcardClass62 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass62);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("hi!", method66, method67);
        java.lang.String str69 = propertyDescriptor68.getShortDescription();
        java.lang.reflect.Method method70 = propertyDescriptor68.getWriteMethod();
        propertyDescriptor68.setValue("double", (java.lang.Object) ' ');
        boolean boolean74 = propertyDescriptor68.isExpert();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("hi!", method77, method78);
        java.lang.Class<?> wildcardClass80 = propertyDescriptor79.getClass();
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        propertyDescriptor68.setValue("float", (java.lang.Object) wildcardClass80);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass80);
        java.lang.Class[] classArray85 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray84);
        int int86 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray85);
        int int87 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method88 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass62, "java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]double", classArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]double");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "double" + "'", str44, "double");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "byte" + "'", str49, "byte");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "double" + "'", str55, "double");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str59, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "byte" + "'", str61, "byte");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(method70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java/beans/PropertyDescriptor" + "'", str81, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java/beans/PropertyDescriptor" + "'", str83, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 107);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byteB", "Lorg/mockito/cglib/core/Signature;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = type3.getClassName();
        java.lang.String str5 = type3.getDescriptor();
        java.lang.String str6 = type3.getClassName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str4, "org.mockito.cglib.core.Signature");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str6, "org.mockito.cglib.core.Signature");
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("[Lorg/mockito/asm/Type;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        propertyDescriptor4.setValue("double", (java.lang.Object) ' ');
        boolean boolean10 = propertyDescriptor4.isExpert();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        propertyDescriptor4.setValue("float", (java.lang.Object) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        int int20 = classInfo19.getModifiers();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        propertyDescriptor24.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean30 = classInfo19.equals((java.lang.Object) propertyDescriptor24);
        int int31 = classInfo19.getModifiers();
        org.mockito.asm.Type type32 = classInfo19.getSuperType();
        int int33 = type32.getSize();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        java.lang.Class<?> wildcardClass38 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type44 = signature43.getReturnType();
        java.lang.String str45 = signature43.getName();
        org.mockito.asm.Type type46 = signature43.getReturnType();
        java.lang.String str47 = signature43.getDescriptor();
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        boolean boolean55 = signature43.equals((java.lang.Object) strArray54);
        java.lang.String str56 = signature43.getDescriptor();
        org.mockito.asm.Type type57 = signature43.getReturnType();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        int int62 = type61.getSort();
        int int64 = type61.getOpcode(3);
        java.lang.String str65 = type61.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        int int67 = type66.getSort();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        int int69 = type68.getSort();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type59, type61, type66, type68, type70 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray72);
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type57, typeArray72);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray72);
        org.mockito.cglib.core.Signature signature76 = new org.mockito.cglib.core.Signature("hi!", type32, typeArray72);
        org.mockito.asm.Type type77 = type32.getElementType();
        java.lang.String str78 = type32.getClassName();
        java.lang.String str79 = type32.getClassName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "B" + "'", str47, "B");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "B" + "'", str56, "B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "double" + "'", str60, "double");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "double" + "'", str71, "double");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(DBBBD)V" + "'", str73, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str75, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.beans.FeatureDescriptor" + "'", str78, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.beans.FeatureDescriptor" + "'", str79, "java.beans.FeatureDescriptor");
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("Lhi!;");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        int int15 = type14.getSort();
        int int17 = type14.getOpcode(3);
        java.lang.String str18 = type14.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        int int20 = type19.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        int int22 = type21.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type12, type14, type19, type21, type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        int int28 = type27.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type11, type27, type30, type32, type33 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        int int41 = type40.getSort();
        int int43 = type40.getOpcode(3);
        java.lang.String str44 = type40.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        int int46 = type45.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type38, type40, type45, type47, type49 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray51);
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type3, typeArray51);
        org.mockito.asm.Type type56 = type3.getElementType();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        java.lang.String str61 = propertyDescriptor60.getShortDescription();
        java.lang.reflect.Method method62 = propertyDescriptor60.getWriteMethod();
        propertyDescriptor60.setValue("double", (java.lang.Object) ' ');
        boolean boolean66 = propertyDescriptor60.isExpert();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        java.lang.Class<?> wildcardClass72 = propertyDescriptor71.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        propertyDescriptor60.setValue("float", (java.lang.Object) wildcardClass72);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass72);
        int int76 = classInfo75.getModifiers();
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        java.beans.PropertyDescriptor propertyDescriptor80 = new java.beans.PropertyDescriptor("hi!", method78, method79);
        java.lang.String str81 = propertyDescriptor80.getShortDescription();
        java.lang.reflect.Method method82 = propertyDescriptor80.getWriteMethod();
        propertyDescriptor80.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean86 = classInfo75.equals((java.lang.Object) propertyDescriptor80);
        int int87 = classInfo75.getModifiers();
        org.mockito.asm.Type[] typeArray88 = classInfo75.getInterfaces();
        boolean boolean90 = classInfo75.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type91 = classInfo75.getSuperType();
        org.mockito.asm.Type[] typeArray92 = classInfo75.getInterfaces();
        org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("float", type56, typeArray92);
        java.lang.String str94 = signature93.getName();
        org.mockito.asm.Type type95 = signature93.getReturnType();
        int int96 = type95.getSort();
        java.lang.String str97 = type95.getClassName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lhi!;" + "'", str6, "Lhi!;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "double" + "'", str13, "double");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "byte" + "'", str18, "byte");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "double" + "'", str24, "double");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(DBBBD)V" + "'", str26, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lhi!;" + "'", str31, "Lhi!;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "double" + "'", str34, "double");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(VBLhi!;SD)B" + "'", str36, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "double" + "'", str39, "double");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "double" + "'", str50, "double");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(DBBBD)V" + "'", str52, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(DBBBD)B" + "'", str53, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(DBBBD)Lhi!;" + "'", str54, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java/beans/PropertyDescriptor" + "'", str73, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNull(method82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "float" + "'", str94, "float");
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "!" + "'", str97, "!");
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=double; values={double= ; =LLLorg/mockito/cglib/core/Signature;;;}; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("Lhi!;float");
        boolean boolean18 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setValue("()L!;", (java.lang.Object) "LLorg/mockito/cglib/core/Signature;;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setDisplayName("double");
        propertyDescriptor3.setPreferred(true);
        boolean boolean16 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj15 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=F; values={double= ; float=class java.beans.PropertyDescriptor}]");
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        byte[] byteArray2 = new byte[] { (byte) 1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("org/mockito/asm/Type(VBLhi!;SD)B", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        java.lang.Class class0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        int int2 = type1.getSort();
        java.lang.Class<?> wildcardClass3 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray5);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor8 = org.mockito.cglib.core.ReflectUtils.getConstructor(class0, classArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        java.lang.String str12 = propertyDescriptor9.getShortDescription();
        boolean boolean13 = propertyDescriptor9.isPreferred();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        java.lang.String str19 = signature17.getName();
        org.mockito.asm.Type type20 = signature17.getReturnType();
        propertyDescriptor9.setValue("B", (java.lang.Object) type20);
        propertyDescriptor9.setShortDescription("byte");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        java.lang.String str33 = classInfo32.toString();
        org.mockito.asm.Type type34 = classInfo32.getSuperType();
        boolean boolean35 = classInfo26.equals((java.lang.Object) classInfo32);
        org.mockito.asm.Type type36 = classInfo32.getType();
        org.mockito.asm.Type type37 = classInfo32.getType();
        org.mockito.asm.Type type38 = classInfo32.getType();
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type38);
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = type38.getElementType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, false);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, false);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray11);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, true, true);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, false, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray12);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("byteB", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass6, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str15 = signature14.toString();
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str19 = signature18.getName();
        boolean boolean20 = signature14.equals((java.lang.Object) signature18);
        java.lang.String str21 = signature14.getName();
        java.lang.String str22 = signature14.toString();
        propertyDescriptor3.setValue("ava.beans.PropertyDescriptor[name=hi!", (java.lang.Object) signature14);
        boolean boolean24 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getShortDescription();
        java.lang.reflect.Method method30 = propertyDescriptor28.getWriteMethod();
        java.lang.String str31 = propertyDescriptor28.getShortDescription();
        propertyDescriptor28.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor28.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration37 = propertyDescriptor28.attributeNames();
        java.lang.reflect.Method method38 = null;
        propertyDescriptor28.setWriteMethod(method38);
        java.lang.Object obj41 = propertyDescriptor28.getValue("Lhi!;float");
        java.util.Enumeration<java.lang.String> strEnumeration42 = propertyDescriptor28.attributeNames();
        propertyDescriptor28.setShortDescription("(DBBBD)Ljava/lang/Object;");
        propertyDescriptor28.setName("LbyteB;");
        boolean boolean47 = propertyDescriptor3.equals((java.lang.Object) "LbyteB;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!B" + "'", str15, "hi!B");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lhi!;" + "'", str19, "Lhi!;");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!B" + "'", str22, "hi!B");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(strEnumeration42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class java.beans.PropertyDescriptor]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setHidden(true);
        boolean boolean16 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method19 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        boolean boolean10 = propertyDescriptor3.isHidden();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str13 = type12.getClassName();
        int int14 = type12.getSort();
        java.lang.Class<?> wildcardClass15 = type12.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; hidden; values={double= }]", (java.lang.Object) type17);
        propertyDescriptor3.setPreferred(false);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("byteB", "Lorg/mockito/cglib/core/Signature;");
        org.mockito.asm.Type type24 = signature23.getReturnType();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("java.lang.Object", method26, method27);
        boolean boolean29 = signature23.equals((java.lang.Object) "java.lang.Object");
        java.lang.String str30 = signature23.getDescriptor();
        boolean boolean31 = propertyDescriptor3.equals((java.lang.Object) str30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str30, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org/mockito/asm/Type", method1, method2);
        propertyDescriptor3.setPreferred(true);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        int int11 = type10.getSort();
        int int13 = type10.getOpcode(3);
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        int int16 = type15.getSort();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type8, type10, type15, type17, type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        int int24 = type23.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str30 = type29.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type7, type23, type26, type28, type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str35 = type34.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        int int37 = type36.getSort();
        int int39 = type36.getOpcode(3);
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type34, type36, type41, type43, type45 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray47);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray47);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray47);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type57 = signature56.getReturnType();
        java.lang.Class<?> wildcardClass58 = signature56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray62);
        java.lang.Class<?> wildcardClass64 = methodArray63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, false, true);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lhi!;" + "'", str2, "Lhi!;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "byte" + "'", str14, "byte");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(DBBBD)V" + "'", str22, "(DBBBD)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lhi!;" + "'", str27, "Lhi!;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(VBLhi!;SD)B" + "'", str32, "(VBLhi!;SD)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "double" + "'", str35, "double");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "byte" + "'", str40, "byte");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(DBBBD)V" + "'", str48, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(DBBBD)B" + "'", str49, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(DBBBD)Lhi!;" + "'", str50, "(DBBBD)Lhi!;");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method24 = propertyDescriptor3.getReadMethod();
        boolean boolean25 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; displayName=V]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("()Lava.beans.PropertyDescriptor[name=hi!;", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor3.setHidden(true);
        boolean boolean16 = propertyDescriptor3.isHidden();
        boolean boolean17 = propertyDescriptor3.isHidden();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str18, "java.beans.PropertyDescriptor[name=hi!]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        java.lang.Class<?> wildcardClass6 = signature4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type11 = signature10.getReturnType();
        java.lang.Class<?> wildcardClass12 = signature10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", type7, typeArray15);
        org.mockito.asm.Type type17 = type7.getElementType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.String str31 = signature29.getName();
        org.mockito.asm.Type type32 = signature29.getReturnType();
        java.lang.String str33 = signature29.getDescriptor();
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        boolean boolean41 = signature29.equals((java.lang.Object) strArray40);
        java.lang.String str42 = signature29.getDescriptor();
        org.mockito.asm.Type type43 = signature29.getReturnType();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        int int48 = type47.getSort();
        int int50 = type47.getOpcode(3);
        java.lang.String str51 = type47.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        int int55 = type54.getSort();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type45, type47, type52, type54, type56 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray58);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type43, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray58);
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("java.lang.Object", type19, typeArray58);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", type17, typeArray58);
        java.lang.String str64 = type17.getInternalName();
        org.mockito.asm.Type type65 = type17.getElementType();
        int int66 = type65.getDimensions();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "B" + "'", str33, "B");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "B" + "'", str42, "B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "byte" + "'", str51, "byte");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "double" + "'", str57, "double");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(DBBBD)V" + "'", str59, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(DBBBD)Ljava/beans/PropertyDescriptor;" + "'", str61, "(DBBBD)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "g/mockito/cglib/core/Signature" + "'", str64, "g/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type type9 = classInfo7.getType();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type16 = signature15.getReturnType();
        java.lang.Class<?> wildcardClass17 = signature15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.String str25 = propertyDescriptor24.getShortDescription();
        java.lang.reflect.Method method26 = propertyDescriptor24.getWriteMethod();
        java.lang.String str27 = propertyDescriptor24.getDisplayName();
        boolean boolean28 = classInfo20.equals((java.lang.Object) str27);
        org.mockito.asm.Type[] typeArray29 = classInfo20.getInterfaces();
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("", type12, typeArray29);
        java.lang.String str31 = signature30.getName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        java.lang.String str37 = propertyDescriptor36.getShortDescription();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        propertyDescriptor36.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor36.setShortDescription("");
        propertyDescriptor36.setConstrained(true);
        propertyDescriptor36.setExpert(false);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor36.getPropertyType();
        propertyDescriptor36.setDisplayName("java.beans.PropertyDescriptor[name=hi!; preferred]");
        java.lang.reflect.Method method51 = propertyDescriptor36.getWriteMethod();
        boolean boolean52 = type32.equals((java.lang.Object) propertyDescriptor36);
        boolean boolean53 = signature30.equals((java.lang.Object) propertyDescriptor36);
        java.lang.String str54 = signature30.toString();
        org.mockito.asm.Type[] typeArray55 = signature30.getArgumentTypes();
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={byte=0}; constrained]", type9, typeArray55);
        java.lang.String str57 = type9.getClassName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str54, "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.cglib.core.Signature" + "'", str57, "org.mockito.cglib.core.Signature");
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = type9.getDescriptor();
        int int11 = type9.getSize();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        propertyDescriptor3.setShortDescription("(DBBBD)V");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        java.lang.String str20 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]; shortDescription=(DBBBD)V; values={byte=0}]" + "'", str20, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]; shortDescription=(DBBBD)V; values={byte=0}]");
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getDisplayName();
        boolean boolean20 = propertyDescriptor18.isHidden();
        propertyDescriptor18.setHidden(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor18.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.toString();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={double= ; float=class java.beans.PropertyDescriptor}]", method5, method6);
        java.lang.Object obj9 = propertyDescriptor7.getValue("ava.beans.PropertyDescriptor[name=hi!");
        boolean boolean10 = signature2.equals((java.lang.Object) propertyDescriptor7);
        java.lang.String str11 = signature2.getName();
        java.lang.String str12 = signature2.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray13 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!B" + "'", str3, "hi!B");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor3.getName();
        java.lang.String str19 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}]" + "'", str19, "java.beans.PropertyDescriptor[name=hi!; displayName=Lorg/mockito/cglib/core/Signature;; values={byte=0}]");
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("doublejava/beans/PropertyDescriptor", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        propertyDescriptor3.setHidden(false);
        java.lang.String str20 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setShortDescription("byteBLorg/mockito/cglib/core/Signature;");
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; preferred]byte");
        java.lang.String str22 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; preferred]byte" + "'", str22, "java.beans.PropertyDescriptor[name=hi!; preferred]byte");
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        propertyDescriptor15.setValue("double", (java.lang.Object) ' ');
        boolean boolean21 = propertyDescriptor15.isExpert();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        propertyDescriptor15.setValue("float", (java.lang.Object) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type34 = signature33.getReturnType();
        java.lang.String str35 = signature33.getName();
        org.mockito.asm.Type type36 = signature33.getReturnType();
        boolean boolean37 = classInfo30.equals((java.lang.Object) type36);
        java.lang.String str38 = classInfo30.toString();
        org.mockito.asm.Type type39 = classInfo30.getSuperType();
        org.mockito.asm.Type type40 = classInfo30.getSuperType();
        int int42 = type40.getOpcode(4);
        int int44 = type40.getOpcode(100);
        boolean boolean45 = propertyDescriptor3.equals((java.lang.Object) 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.beans.PropertyDescriptor" + "'", str38, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 104 + "'", int44 == 104);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor" + "'", str7, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor23.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor23.attributeNames();
        propertyDescriptor23.setConstrained(false);
        propertyDescriptor23.setExpert(false);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor23.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertNull(wildcardClass36);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("(DBBBD)B", method21, method22);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor23.setReadMethod(method24);
        propertyDescriptor23.setExpert(false);
        propertyDescriptor23.setBound(false);
        java.lang.Object obj31 = propertyDescriptor23.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        propertyDescriptor3.setValue("F(DBBBD)Ljava/lang/Object;", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!; values={byte=0}; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        boolean boolean34 = propertyDescriptor3.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound; constrained]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor16.getWriteMethod();
        java.lang.String str19 = propertyDescriptor16.getShortDescription();
        propertyDescriptor16.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor16.setConstrained(false);
        propertyDescriptor16.setHidden(false);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        java.lang.String str31 = propertyDescriptor30.getShortDescription();
        java.lang.reflect.Method method32 = propertyDescriptor30.getWriteMethod();
        java.lang.String str33 = propertyDescriptor30.getShortDescription();
        boolean boolean34 = propertyDescriptor30.isPreferred();
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type39 = signature38.getReturnType();
        java.lang.String str40 = signature38.getName();
        org.mockito.asm.Type type41 = signature38.getReturnType();
        propertyDescriptor30.setValue("B", (java.lang.Object) type41);
        java.lang.reflect.Method method43 = propertyDescriptor30.getReadMethod();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] { propertyDescriptor3, propertyDescriptor16, propertyDescriptor30 };
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, false);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class<?> wildcardClass52 = strArray51.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method53 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.String; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(method43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 1, (byte) 1, (byte) 10, (byte) 100 };
        java.lang.ClassLoader classLoader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; displayName=V; constrained]", byteArray7, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 1, 1, 10, 100]");
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass3 = signature2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str5, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str5, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str6, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str4 = signature3.getDescriptor();
        org.mockito.asm.Type type5 = signature3.getReturnType();
        org.mockito.asm.Type type6 = signature3.getReturnType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        java.lang.String str12 = propertyDescriptor11.getShortDescription();
        java.lang.reflect.Method method13 = propertyDescriptor11.getWriteMethod();
        java.lang.String str14 = propertyDescriptor11.getShortDescription();
        boolean boolean15 = propertyDescriptor11.isPreferred();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type20 = signature19.getReturnType();
        java.lang.String str21 = signature19.getName();
        org.mockito.asm.Type type22 = signature19.getReturnType();
        propertyDescriptor11.setValue("B", (java.lang.Object) type22);
        int int24 = type22.getSize();
        int int25 = type22.getSort();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.String str30 = propertyDescriptor29.getShortDescription();
        java.lang.reflect.Method method31 = propertyDescriptor29.getWriteMethod();
        propertyDescriptor29.setValue("double", (java.lang.Object) ' ');
        boolean boolean35 = propertyDescriptor29.isExpert();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor40.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        propertyDescriptor29.setValue("float", (java.lang.Object) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        int int45 = classInfo44.getModifiers();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        java.lang.String str50 = propertyDescriptor49.getShortDescription();
        java.lang.reflect.Method method51 = propertyDescriptor49.getWriteMethod();
        propertyDescriptor49.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean55 = classInfo44.equals((java.lang.Object) propertyDescriptor49);
        int int56 = classInfo44.getModifiers();
        org.mockito.asm.Type[] typeArray57 = classInfo44.getInterfaces();
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("hi!B", type22, typeArray57);
        org.mockito.asm.Type[] typeArray59 = signature58.getArgumentTypes();
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("hi!byteBfloat", type6, typeArray59);
        int int62 = type6.getOpcode(19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = type6.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java/beans/PropertyDescriptor" + "'", str42, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 19 + "'", int62 == 19);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.String str20 = classInfo19.toString();
        java.lang.String str21 = classInfo19.toString();
        org.mockito.asm.Type type22 = classInfo19.getSuperType();
        org.mockito.asm.Type type23 = classInfo19.getSuperType();
        java.lang.String str24 = classInfo19.toString();
        org.mockito.asm.Type[] typeArray25 = classInfo19.getInterfaces();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.String str30 = propertyDescriptor29.getShortDescription();
        java.lang.reflect.Method method31 = propertyDescriptor29.getWriteMethod();
        propertyDescriptor29.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor29.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor29.setDisplayName("");
        boolean boolean39 = propertyDescriptor29.isExpert();
        propertyDescriptor29.setDisplayName("va.lang.Object");
        boolean boolean42 = propertyDescriptor29.isExpert();
        boolean boolean43 = propertyDescriptor29.isExpert();
        boolean boolean44 = classInfo19.equals((java.lang.Object) propertyDescriptor29);
        int int45 = classInfo19.getModifiers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor" + "'", str20, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor8.getClass();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.Class<?> wildcardClass14 = signature12.getClass();
        java.lang.Class[] classArray15 = new java.lang.Class[] { wildcardClass4, wildcardClass9, wildcardClass14 };
        int int16 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        byte[] byteArray1 = new byte[] {};
        java.lang.ClassLoader classLoader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class3 = org.mockito.cglib.core.ReflectUtils.defineClass("(DBBBD)Lvoid;", byteArray1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        boolean boolean22 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; constrained]", "DBBBD)Lhi!");
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("LLorg/mockito/cglib/core/Signature;;", "LLorg/mockito/cglib/core/Signature;;");
        java.lang.Class<?> wildcardClass5 = signature4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        boolean boolean10 = type0.equals((java.lang.Object) wildcardClass5);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method16 = propertyDescriptor14.getWriteMethod();
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor14.setShortDescription("float");
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor14.createPropertyEditor((java.lang.Object) classArray23);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray28);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray28);
        org.mockito.asm.Type[] typeArray32 = org.mockito.asm.Type.getArgumentTypes("()B");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass5, classArray28, (java.lang.Object[]) typeArray32);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "float" + "'", str1, "float");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str7, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(typeArray32);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/cglib/core/Signature;(DBBBD)B");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("va.beans.PropertyDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("floatLLorg/mockito/cglib/core/Signature;;", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/PropertyDescriptor" + "'", str5, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor; expert]", "hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]LD;");
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=(DBBBD)B]; shortDescription=(DBBBD)LZ;]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getShortDescription();
        java.lang.reflect.Method method14 = propertyDescriptor12.getWriteMethod();
        propertyDescriptor12.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor12.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setValue("byte", (java.lang.Object) propertyDescriptor12);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        java.lang.String str22 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        java.lang.String str25 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]; displayName=java.beans.PropertyDescriptor; shortDescription=Ljava/lang/Object;; values={double= ; float=class java.beans.PropertyDescriptor}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 270");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!]; preferred; hidden; values={byte=0}]; values={double= ; float=class java.beans.PropertyDescriptor; =Lorg/mockito/cglib/core/Signature;}]", "char");
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("double", method1, method2);
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        java.lang.String str8 = propertyDescriptor7.getShortDescription();
        java.lang.reflect.Method method9 = propertyDescriptor7.getWriteMethod();
        propertyDescriptor7.setValue("double", (java.lang.Object) ' ');
        boolean boolean13 = propertyDescriptor7.isExpert();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        propertyDescriptor7.setValue("float", (java.lang.Object) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        int int23 = classInfo22.getModifiers();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.String str28 = propertyDescriptor27.getShortDescription();
        java.lang.reflect.Method method29 = propertyDescriptor27.getWriteMethod();
        propertyDescriptor27.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean33 = classInfo22.equals((java.lang.Object) propertyDescriptor27);
        int int34 = classInfo22.getModifiers();
        org.mockito.asm.Type[] typeArray35 = classInfo22.getInterfaces();
        boolean boolean37 = classInfo22.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type38 = classInfo22.getType();
        java.lang.String str39 = type38.getInternalName();
        org.mockito.asm.Type type40 = type38.getElementType();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        java.lang.String str45 = propertyDescriptor44.getShortDescription();
        java.lang.reflect.Method method46 = propertyDescriptor44.getWriteMethod();
        java.lang.String str47 = propertyDescriptor44.getShortDescription();
        propertyDescriptor44.setValue("byte", (java.lang.Object) (byte) 0);
        java.lang.reflect.Method method51 = null;
        propertyDescriptor44.setReadMethod(method51);
        boolean boolean53 = propertyDescriptor44.isExpert();
        propertyDescriptor44.setName("(VBLhi!;SD)B");
        propertyDescriptor44.setPreferred(false);
        propertyDescriptor44.setHidden(false);
        boolean boolean60 = type38.equals((java.lang.Object) propertyDescriptor44);
        boolean boolean61 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor44);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/beans/PropertyDescriptor" + "'", str20, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java/beans/PropertyDescriptor" + "'", str39, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(method46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("()Ljava.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type];");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.Object obj10 = propertyDescriptor3.getValue("()B");
        propertyDescriptor3.setConstrained(false);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.String str18 = propertyDescriptor17.getShortDescription();
        java.lang.reflect.Method method19 = propertyDescriptor17.getWriteMethod();
        java.lang.String str20 = propertyDescriptor17.getShortDescription();
        boolean boolean21 = propertyDescriptor17.isPreferred();
        boolean boolean22 = propertyDescriptor17.isExpert();
        boolean boolean23 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor17);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("void");
        propertyDescriptor3.setDisplayName("Lhi!;float");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; preferred; propertyEditorClass=class org.mockito.asm.Type]");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.beans.PropertyEditor propertyEditor30 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNull(propertyEditor30);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setValue("java.lang.Object", (java.lang.Object) 10.0d);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type11.getOpcode((int) (short) 10);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.String str18 = propertyDescriptor17.getShortDescription();
        java.lang.reflect.Method method19 = propertyDescriptor17.getWriteMethod();
        propertyDescriptor17.setValue("double", (java.lang.Object) ' ');
        boolean boolean23 = propertyDescriptor17.isExpert();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        propertyDescriptor17.setValue("float", (java.lang.Object) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type36 = signature35.getReturnType();
        java.lang.String str37 = signature35.getName();
        org.mockito.asm.Type type38 = signature35.getReturnType();
        boolean boolean39 = classInfo32.equals((java.lang.Object) type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        int int44 = type43.getSort();
        int int46 = type43.getOpcode(3);
        java.lang.String str47 = type43.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        int int49 = type48.getSort();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type41, type43, type48, type50, type52 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray54);
        propertyDescriptor3.setValue("float", (java.lang.Object) str57);
        java.lang.String str59 = propertyDescriptor3.getDisplayName();
        boolean boolean60 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java/beans/PropertyDescriptor" + "'", str30, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "double" + "'", str42, "double");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "byte" + "'", str47, "byte");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "double" + "'", str53, "double");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(DBBBD)V" + "'", str55, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(DBBBD)B" + "'", str56, "(DBBBD)B");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(DBBBD)V" + "'", str57, "(DBBBD)V");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        boolean boolean6 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = signature2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type[] typeArray8 = classInfo7.getInterfaces();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str6, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "B");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.getDescriptor();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = type5.getDescriptor();
        int int8 = type5.getOpcode(97);
        java.lang.String str9 = type5.getDescriptor();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor13.getWriteMethod();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor13.setWriteMethod(method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor13.getPropertyType();
        java.lang.Object obj20 = propertyDescriptor13.getValue("org/mockito/asm/Type(VBLhi!;SD)B");
        propertyDescriptor13.setBound(true);
        propertyDescriptor13.setDisplayName("java.beans.PropertyDescriptor[name=double; values={java.beans.PropertyDescriptor[name=hi!]=0}]");
        boolean boolean25 = type5.equals((java.lang.Object) propertyDescriptor13);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "B" + "'", str9, "B");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]", "L(DBBBD)V;");
        java.lang.String str3 = signature2.getName();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("()J", method5, method6);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor7.setReadMethod(method8);
        java.lang.Object obj11 = propertyDescriptor7.getValue("float");
        boolean boolean12 = signature2.equals(obj11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]" + "'", str3, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.Signature]");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        java.lang.String[] strArray0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getDisplayName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/beans/PropertyDescriptor" + "'", str9, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        int int1 = type0.getSort();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type6 = signature5.getReturnType();
        java.lang.Class<?> wildcardClass7 = signature5.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass2, wildcardClass7 };
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        java.lang.String str16 = signature14.getName();
        org.mockito.asm.Type type17 = signature14.getReturnType();
        java.lang.String str18 = signature14.getDescriptor();
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        int int22 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        boolean boolean26 = signature14.equals((java.lang.Object) strArray25);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class<?> wildcardClass31 = signature29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, false);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray36);
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        int int42 = type41.getSort();
        java.lang.Class<?> wildcardClass43 = type41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass43);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, true, true);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray48);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray52);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        int int60 = type59.getSort();
        java.lang.Class<?> wildcardClass61 = type59.getClass();
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type65 = signature64.getReturnType();
        java.lang.Class<?> wildcardClass66 = signature64.getClass();
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass61, wildcardClass66 };
        java.lang.String[] strArray69 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        java.lang.reflect.Method[] methodArray70 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray70);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray70);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray72);
        org.mockito.cglib.core.Signature signature76 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type77 = signature76.getReturnType();
        java.lang.Class<?> wildcardClass78 = signature76.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass78);
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass78);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass78);
        java.lang.reflect.Method[] methodArray84 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray81, true, false);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray84);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str8, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str67, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray85);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        int int19 = classInfo18.getModifiers();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        java.lang.String str24 = propertyDescriptor23.getShortDescription();
        java.lang.reflect.Method method25 = propertyDescriptor23.getWriteMethod();
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean29 = classInfo18.equals((java.lang.Object) propertyDescriptor23);
        int int30 = classInfo18.getModifiers();
        org.mockito.asm.Type[] typeArray31 = classInfo18.getInterfaces();
        boolean boolean33 = classInfo18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = classInfo18.getSuperType();
        org.mockito.asm.Type[] typeArray35 = classInfo18.getInterfaces();
        org.mockito.asm.Type type36 = classInfo18.getSuperType();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.String str41 = propertyDescriptor40.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor40.getWriteMethod();
        java.lang.String str43 = propertyDescriptor40.getShortDescription();
        boolean boolean44 = propertyDescriptor40.isPreferred();
        java.lang.reflect.Method method45 = null;
        propertyDescriptor40.setReadMethod(method45);
        java.lang.reflect.Method method47 = null;
        propertyDescriptor40.setReadMethod(method47);
        boolean boolean49 = type36.equals((java.lang.Object) propertyDescriptor40);
        propertyDescriptor40.setExpert(false);
        propertyDescriptor40.setBound(false);
        java.lang.String str54 = propertyDescriptor40.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str54, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "double" + "'", str13, "double");
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setReadMethod(method25);
        java.lang.reflect.Method method27 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method27);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.FeatureDescriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("V");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; shortDescription=java/beans/PropertyDescriptor]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNull(propertyEditor13);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getShortDescription();
        java.lang.reflect.Method method6 = propertyDescriptor4.getWriteMethod();
        java.lang.String str7 = propertyDescriptor4.getShortDescription();
        boolean boolean8 = propertyDescriptor4.isPreferred();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        java.lang.String str14 = signature12.getName();
        org.mockito.asm.Type type15 = signature12.getReturnType();
        propertyDescriptor4.setValue("B", (java.lang.Object) type15);
        propertyDescriptor4.setShortDescription("byte");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, false, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        boolean boolean30 = propertyDescriptor26.isPreferred();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type35 = signature34.getReturnType();
        java.lang.String str36 = signature34.getName();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        propertyDescriptor26.setValue("B", (java.lang.Object) type37);
        propertyDescriptor26.setShortDescription("byte");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = classInfo43.getType();
        java.lang.String str45 = type44.getInternalName();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type44);
        int int47 = type44.getSort();
        int int49 = type44.getOpcode(64);
        java.lang.String str50 = type44.getDescriptor();
        java.lang.String str51 = type44.getClassName();
        java.lang.String str52 = type44.getInternalName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 68 + "'", int49 == 68);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str50, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.beans.PropertyDescriptor" + "'", str51, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java/beans/PropertyDescriptor" + "'", str52, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        byte[] byteArray7 = new byte[] { (byte) 100, (byte) -1, (byte) 0, (byte) 0, (byte) -1, (byte) 100 };
        java.lang.ClassLoader classLoader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={byte=0}]", byteArray7, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, -1, 0, 0, -1, 100]");
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("org.mockito.cglib.core.Signature(DBBBD)Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->DBBBD");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byteB", "Lorg/mockito/cglib/core/Signature;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        int int5 = type3.getOpcode(5);
        int int6 = type3.getSort();
        int int8 = type3.getOpcode(44);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; propertyEditorClass=class org.mockito.cglib.core.Signature]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava.beans.PropertyDescriptor[name=hi!; values={byte=0}];", method1, method2);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.String str10 = propertyDescriptor9.getShortDescription();
        java.lang.reflect.Method method11 = propertyDescriptor9.getWriteMethod();
        java.lang.String str12 = propertyDescriptor9.getShortDescription();
        propertyDescriptor9.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor9.setExpert(false);
        propertyDescriptor9.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        propertyDescriptor9.setConstrained(true);
        boolean boolean22 = propertyDescriptor9.isHidden();
        boolean boolean23 = propertyDescriptor9.isExpert();
        java.lang.String str24 = propertyDescriptor9.getDisplayName();
        java.lang.Object obj26 = propertyDescriptor9.getValue("Ljava/lang/Object;");
        boolean boolean27 = propertyDescriptor9.isHidden();
        propertyDescriptor9.setDisplayName("hi!byteBjava.beans.PropertyDescriptor[name=hi!; preferred; values={byte=0}]");
        java.lang.String str30 = propertyDescriptor9.getShortDescription();
        boolean boolean31 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str30, "java.beans.PropertyDescriptor[name=hi!]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        int int6 = type5.getSort();
        int int8 = type5.getOpcode(3);
        java.lang.String str9 = type5.getClassName();
        java.lang.String str10 = type5.getClassName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        boolean boolean13 = type5.equals((java.lang.Object) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        propertyDescriptor3.setValue("", (java.lang.Object) strArray14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("float");
        propertyDescriptor3.setDisplayName("double");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "byte" + "'", str9, "byte");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byte" + "'", str10, "byte");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setShortDescription("float");
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray12);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("V", method1, method2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        int int6 = type5.getSort();
        int int8 = type5.getOpcode(3);
        java.lang.String str9 = type5.getClassName();
        java.lang.String str10 = type5.getClassName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        boolean boolean13 = type5.equals((java.lang.Object) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        propertyDescriptor3.setValue("", (java.lang.Object) strArray14);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=B]; propertyEditorClass=class java.beans.PropertyDescriptor]");
        boolean boolean18 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "byte" + "'", str9, "byte");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "byte" + "'", str10, "byte");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; displayName=java.beans.PropertyDescriptor[name=hi!]]");
        java.lang.reflect.Method method26 = null;
        propertyDescriptor3.setWriteMethod(method26);
        propertyDescriptor3.setDisplayName("(DBBBD)Lava.beans.PropertyDescriptor[name=hi!;");
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor3.attributeNames();
        boolean boolean31 = propertyDescriptor3.isHidden();
        boolean boolean32 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!]");
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        propertyDescriptor3.setValue("B", (java.lang.Object) str23);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/beans/PropertyDescriptor" + "'", str20, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; shortDescription=; values={double= }; constrained; propertyEditorClass=class java.beans.PropertyDescriptor]");
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(12);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        int int1 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray0);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.reflect.Method[] methodArray7 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        int int10 = type9.getSort();
        java.lang.Class<?> wildcardClass11 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, true, false);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray17);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", "byteB");
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        int int25 = type24.getSort();
        java.lang.Class<?> wildcardClass26 = type24.getClass();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class<?> wildcardClass31 = signature29.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray33 = new java.lang.Class[] { wildcardClass26, wildcardClass31 };
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        boolean boolean38 = signature23.equals((java.lang.Object) strArray37);
        boolean boolean39 = propertyDescriptor3.equals((java.lang.Object) signature23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str32, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("J");
        propertyDescriptor3.setDisplayName("org.mockito.cglib.core.Signature");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(method12);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setValue("byte", (java.lang.Object) (byte) 0);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.String str20 = propertyDescriptor19.getDisplayName();
        boolean boolean21 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.String str29 = propertyDescriptor28.getShortDescription();
        java.lang.reflect.Method method30 = propertyDescriptor28.getWriteMethod();
        propertyDescriptor28.setValue("double", (java.lang.Object) ' ');
        propertyDescriptor28.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        propertyDescriptor19.setValue("byte", (java.lang.Object) propertyDescriptor28);
        java.lang.Class<?> wildcardClass37 = propertyDescriptor19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.beans.PropertyEditor propertyEditor40 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray39);
        propertyDescriptor3.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration43 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNull(propertyEditor40);
        org.junit.Assert.assertNotNull(strEnumeration43);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor; constrained]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.Object obj19 = null;
        boolean boolean20 = classInfo18.equals(obj19);
        java.lang.String str21 = classInfo18.toString();
        org.mockito.asm.Type type22 = classInfo18.getSuperType();
        org.mockito.asm.Type[] typeArray23 = classInfo18.getInterfaces();
        org.mockito.asm.Type type24 = classInfo18.getSuperType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = signature11.getName();
        org.mockito.asm.Type type14 = signature11.getReturnType();
        propertyDescriptor3.setValue("B", (java.lang.Object) type14);
        propertyDescriptor3.setShortDescription("byte");
        java.lang.String str18 = propertyDescriptor3.getName();
        boolean boolean19 = propertyDescriptor3.isPreferred();
        boolean boolean20 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("()F");
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        java.lang.String str27 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method28 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor26.setValue("double", (java.lang.Object) ' ');
        java.util.Enumeration<java.lang.String> strEnumeration32 = propertyDescriptor26.attributeNames();
        java.lang.String str33 = propertyDescriptor26.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration34 = propertyDescriptor26.attributeNames();
        propertyDescriptor26.setHidden(true);
        java.lang.Class<?> wildcardClass37 = propertyDescriptor26.getPropertyEditorClass();
        boolean boolean38 = propertyDescriptor3.equals((java.lang.Object) wildcardClass37);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNotNull(strEnumeration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("float", (java.lang.Object) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.String str23 = signature21.getName();
        org.mockito.asm.Type type24 = signature21.getReturnType();
        boolean boolean25 = classInfo18.equals((java.lang.Object) type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        int int27 = type26.getSort();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.String str32 = propertyDescriptor31.getShortDescription();
        java.lang.reflect.Method method33 = propertyDescriptor31.getWriteMethod();
        propertyDescriptor31.setValue("double", (java.lang.Object) ' ');
        boolean boolean37 = propertyDescriptor31.isExpert();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        java.lang.Class<?> wildcardClass43 = propertyDescriptor42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        propertyDescriptor31.setValue("float", (java.lang.Object) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        int int47 = classInfo46.getModifiers();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        java.lang.String str52 = propertyDescriptor51.getShortDescription();
        java.lang.reflect.Method method53 = propertyDescriptor51.getWriteMethod();
        propertyDescriptor51.setValue("java.beans.PropertyDescriptor[name=hi!]", (java.lang.Object) (byte) 0);
        boolean boolean57 = classInfo46.equals((java.lang.Object) propertyDescriptor51);
        int int58 = classInfo46.getModifiers();
        org.mockito.asm.Type[] typeArray59 = classInfo46.getInterfaces();
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray59);
        boolean boolean61 = type24.equals((java.lang.Object) typeArray59);
        java.lang.String str62 = type24.toString();
        int int64 = type24.getOpcode((int) 'a');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java/beans/PropertyDescriptor" + "'", str16, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java/beans/PropertyDescriptor" + "'", str44, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNull(method53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "()B" + "'", str60, "()B");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "B" + "'", str62, "B");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod(".beans.PropertyDescriptor", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.Class<?> wildcardClass5 = signature3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("byteB");
        boolean boolean11 = classInfo8.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type21 = classInfo20.getType();
        org.mockito.asm.Type type22 = classInfo20.getType();
        org.mockito.asm.Type[] typeArray23 = classInfo20.getInterfaces();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/Signature;", type10, typeArray23);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("Lhi!;", "float");
        java.lang.String str28 = signature27.getName();
        java.lang.String str29 = signature27.getName();
        java.lang.String str30 = signature27.getName();
        boolean boolean31 = signature24.equals((java.lang.Object) str30);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LbyteB;" + "'", str12, "LbyteB;");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str19, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lhi!;" + "'", str28, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lhi!;" + "'", str29, "Lhi!;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lhi!;" + "'", str30, "Lhi!;");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("double");
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(false);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", "B");
        org.mockito.asm.Type type22 = signature21.getReturnType();
        java.lang.Class<?> wildcardClass23 = signature21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        propertyDescriptor3.setValue("Lhi!;float", (java.lang.Object) wildcardClass23);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor3.setWriteMethod(method30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "double" + "'", str12, "double");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "double" + "'", str15, "double");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str28, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setValue("double", (java.lang.Object) ' ');
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        java.lang.String str23 = classInfo22.toString();
        org.mockito.asm.Type type24 = classInfo22.getSuperType();
        propertyDescriptor3.setValue("L(DBBBD)Ljava/lang/Object;;", (java.lang.Object) type24);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str14 = type13.getDescriptor();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/PropertyDescriptor" + "'", str8, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str14, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("Zjava.beans.PropertyDescriptor[name=hi!; values={byte=0}; bound]", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
    }
}


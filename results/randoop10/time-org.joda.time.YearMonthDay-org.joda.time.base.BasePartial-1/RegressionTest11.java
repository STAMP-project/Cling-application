import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateTime dateTime26 = localDate4.toDateTime(localTime10, dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone25);
        int int30 = dateTimeZone25.getStandardOffset(5616032769L);
        java.lang.String str31 = dateTimeZone25.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate7.minusMonths(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra((-13827));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -13827 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add((int) (byte) 1, (int) (short) 1);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale8);
        int int13 = calendar11.getGreatestMinimum(3);
        calendar11.add(7, 106);
        int int17 = calendar0.compareTo(calendar11);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=44,MILLISECOND=784,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1653730784784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=148,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=44,MILLISECOND=784,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = localDate8.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean34 = dateTime30.isEqual(93L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset((long) (byte) 10);
        boolean boolean39 = dateTimeZone36.isFixed();
        int int41 = dateTimeZone36.getOffsetFromLocal((long) 10);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(dateTimeZone36);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        java.lang.String str54 = locale52.getDisplayCountry();
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = dateTimeZone36.getShortName(97L, locale52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(16, 23, 1439, 22, 109, 2598, 28, dateTimeZone36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 87L + "'", long45 == 87L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u6cd5\u56fd" + "'", str54, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime15.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        int int25 = dateTime21.getMillisOfSecond();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.LocalDate localDate33 = localDate29.minusDays(1);
        org.joda.time.LocalDate.Property property34 = localDate29.monthOfYear();
        int int35 = property34.getMinimumValueOverall();
        org.joda.time.LocalDate localDate36 = property34.withMaximumValue();
        org.joda.time.LocalDate localDate38 = property34.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.DateTime dateTime48 = localDate38.toDateTime(localTime39, dateTimeZone43);
        java.util.TimeZone timeZone49 = dateTimeZone43.toTimeZone();
        org.joda.time.DateTime dateTime50 = dateTime21.toDateTime(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter5.withZone(dateTimeZone43);
        long long53 = dateTimeZone43.previousTransition(388800264L);
        boolean boolean54 = dateTimeZone43.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 388800264L + "'", long53 == 388800264L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight15 = property13.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight16 = property13.withMaximumValue();
        org.joda.time.DurationField durationField17 = property13.getLeapDurationField();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNull(durationField17);
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        java.util.Locale locale3 = new java.util.Locale("T09:35:55.332", "T09:36:15.048", "T09:39:32.757");
        org.junit.Assert.assertEquals(locale3.toString(), "t09:35:55.332_T09:36:15.048_T09:39:32.757");
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar calendar19 = builder18.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder18.setWeekDefinition(34723, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-61779456000010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=12,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=17,DAY_OF_YEAR=108,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime23 = localDate13.toDateTime(localTime14, dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        boolean boolean30 = locale28.hasExtensions();
        boolean boolean31 = locale28.hasExtensions();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) boolean31);
        java.lang.String str34 = dateTimeZone18.getShortName(534L);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(380130023L, dateTimeZone18);
        org.joda.time.DateTime dateTime36 = localDate35.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        java.util.Locale.Category category0 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate9 = localDate2.minusMonths(11);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = localDate2.toString("\u30d5\u30e9\u30f3\u30b9", locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str12, "\u30d5\u30e9\u30f3\u30b9");
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 8, chronology18);
        org.joda.time.DateTimeField dateTimeField31 = chronology18.millisOfSecond();
        org.joda.time.DurationField durationField32 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int7 = calendar6.getFirstDayOfWeek();
        calendar6.add(11, 1);
        calendar6.set(9, 2005, (int) ' ', (int) (short) 1, 805);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.set((-58), 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=9,MONTH=2005,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=32,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=1,MINUTE=805,SECOND=45,MILLISECOND=268,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay(1644572130023L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay22.getFieldTypes();
        org.joda.time.DateTime dateTime25 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime37.minusMonths(4);
        org.joda.time.DateTime.Property property42 = dateTime37.monthOfYear();
        org.joda.time.Chronology chronology43 = dateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime27.toMutableDateTime(chronology43);
        org.joda.time.DurationField durationField45 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.centuryOfEra();
        org.joda.time.DurationField durationField47 = chronology43.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay7.withChronologyRetainFields(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(5970, 36, 970, (-1886), 69, 76, chronology43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1886 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(timeOfDay49);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(100);
        int int20 = dateTime17.getSecondOfDay();
        boolean boolean22 = dateTime17.isBefore((long) 2000);
        org.joda.time.DateTime dateTime24 = dateTime17.withWeekyear(1970);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 34785 + "'", int20 == 34785);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.lang.String str8 = locale3.getCountry();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category9, locale12);
        java.lang.String str14 = locale3.getDisplayVariant(locale12);
        java.lang.String str15 = locale3.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "francese" + "'", str7, "francese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr-FR" + "'", str15, "fr-FR");
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.setCopy(59);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths((int) 'u');
        boolean boolean19 = yearMonthDay15.equals((java.lang.Object) 106L);
        java.lang.String str20 = yearMonthDay15.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0059-01-01" + "'", str20, "0059-01-01");
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.lang.String str15 = dateTimeField13.getAsShortText((long) 696);
        long long17 = dateTimeField13.remainder(42000L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:45.433" + "'", str8, "T09:39:45.433");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "45" + "'", str12, "45");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(954, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        int int10 = dateTimeField8.getMaximumTextLength(locale9);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 1, (long) 7, chronology38);
        org.joda.time.Duration duration40 = interval39.toDuration();
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime42 = dateTime21.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Chronology chronology43 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate48 = localDate46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = localDate46.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate51 = localDate46.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property52 = localDate51.weekyear();
        org.joda.time.LocalDate localDate54 = localDate51.withWeekyear(3);
        org.joda.time.LocalDate localDate56 = localDate51.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = localDate51.toInterval(dateTimeZone58);
        int[] intArray64 = chronology43.get((org.joda.time.ReadablePartial) localDate51, (long) 17);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = dateTimeField8.getMaximumValue(readablePartial11, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1]");
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.LocalDate localDate14 = localDate10.minusDays(1);
        org.joda.time.LocalDate.Property property15 = localDate10.monthOfYear();
        int int16 = property15.getMinimumValueOverall();
        org.joda.time.LocalDate localDate17 = property15.withMaximumValue();
        org.joda.time.LocalDate localDate19 = property15.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = localDate19.toDateTime(localTime20, dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        boolean boolean36 = locale34.hasExtensions();
        boolean boolean37 = locale34.hasExtensions();
        boolean boolean38 = dateTimeZone24.equals((java.lang.Object) boolean37);
        java.lang.String str40 = dateTimeZone24.getShortName(534L);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(3787257600000L, dateTimeZone24);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(625, 366, 693, (-1), 86399999, 2005, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'u');
        java.util.Locale locale8 = dateTimeFormatter7.getLocale();
        boolean boolean9 = dateTimeFormatter7.isParser();
        int int10 = dateTimeFormatter7.getDefaultYear();
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer11, (long) 593);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 117 + "'", int10 == 117);
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfDay((int) ' ');
        org.joda.time.DateTime dateTime44 = dateTime39.minusSeconds(22);
        int int45 = dateTime39.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime39.plusWeeks(924);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology58 = localDate56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType52.getField(chronology58);
        boolean boolean60 = localDate49.isSupported(dateTimeFieldType52);
        int int61 = localDate49.size();
        org.joda.time.DateTime dateTime62 = dateTime39.withFields((org.joda.time.ReadablePartial) localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay3.withMinuteOfHour(34);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        int int25 = property16.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) localDate24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:45.581" + "'", str8, "T09:39:45.581");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = localDate6.toInterval(dateTimeZone13);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay14 = property11.withMaximumValue();
        int int15 = timeOfDay14.getHourOfDay();
        int int16 = timeOfDay14.getMinuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay14.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar8.getActualMaximum(600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 600");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "France" + "'", str5, "France");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572385672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=45,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        int int16 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        long long27 = dateTimeField24.add((long) 100, 70);
        boolean boolean28 = dateTimeField24.isLenient();
        int int29 = dateTime15.get(dateTimeField24);
        long long32 = dateTimeField24.add((long) '#', (long) 34530);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale34.getDisplayVariant(locale38);
        java.lang.String str42 = dateTimeField24.getAsShortText(1644572138904L, locale34);
        boolean boolean43 = dateTimeField24.isLenient();
        int int45 = dateTimeField24.get(863999990L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3024000100L + "'", long27 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1491696000035L + "'", long32 == 1491696000035L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "France" + "'", str40, "France");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5348\u524d" + "'", str42, "\u5348\u524d");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) str16, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(604800000L, 6974852348000L, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(3, 34785, 2022, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34785 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate39 = localDate34.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate39.weekyear();
        org.joda.time.LocalDate localDate42 = localDate39.withWeekyear(3);
        org.joda.time.LocalDate localDate44 = localDate39.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = localDate39.toInterval(dateTimeZone46);
        int[] intArray52 = chronology31.get((org.joda.time.ReadablePartial) localDate39, (long) 17);
        org.joda.time.DateTimeField dateTimeField53 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology31.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.withYear((int) 'u');
        boolean boolean20 = dateTime13.isAfter((long) 13);
        org.joda.time.DateTime dateTime22 = dateTime13.plusMinutes(35);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfMinute();
        int int24 = dateTime22.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        java.lang.String str26 = dateTimeField24.getAsText((long) 11);
        int int27 = dateTime14.get(dateTimeField24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusMonths(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.lang.String str44 = dateTimeZone39.getName((long) 11);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeZone39.getName((long) '4', locale46);
        java.lang.String str48 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) yearMonthDay30, 70, locale46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(chronology49);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.plusMinutes(0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = timeOfDay59.getFieldTypes();
        boolean boolean61 = timeOfDay57.isAfter((org.joda.time.ReadablePartial) timeOfDay59);
        int int62 = timeOfDay59.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = timeOfDay59.toString(dateTimeFormatter63);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay59.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property67 = timeOfDay59.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay69 = property67.addNoWrapToCopy(12);
        int int70 = timeOfDay69.getHourOfDay();
        org.joda.time.TimeOfDay.Property property71 = timeOfDay69.millisOfSecond();
        int[] intArray72 = timeOfDay69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField24.addWrapField((org.joda.time.ReadablePartial) timeOfDay52, 34546, intArray72, 34719);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34546");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "T09:39:45.923" + "'", str64, "T09:39:45.923");
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[9, 39, 57, 923]");
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder20 = builder18.setLenient(true);
        java.util.Calendar.Builder builder24 = builder18.setTimeOfDay(0, 12562035, 86399999);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval23.withPeriodBeforeEnd(readablePeriod25);
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        boolean boolean38 = interval26.overlaps((org.joda.time.ReadableInterval) interval35);
        boolean boolean39 = interval15.equals((java.lang.Object) interval26);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMonths(4);
        org.joda.time.DateTime dateTime55 = dateTime49.minusDays(8);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfSecond(0);
        boolean boolean58 = interval26.contains((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime55.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime55.plusMillis(31);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.LocalDate localDate14 = property8.addToCopy(36);
        org.joda.time.LocalDate localDate16 = property8.addToCopy(11);
        java.lang.String str17 = property8.getName();
        org.joda.time.LocalDate localDate18 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e00\u6708" + "'", str12, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "monthOfYear" + "'", str17, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration39, 106);
        org.joda.time.DateMidnight.Property property44 = dateMidnight10.yearOfEra();
        org.joda.time.DateMidnight dateMidnight45 = property44.withMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTime.Property property12 = dateTime9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.minus(readablePeriod13);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 17);
        long long11 = dateTimeZone8.adjustOffset(1644572130023L, true);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(34785, 365, 2067, 1429331, 32769, 33, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1429331 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572130023L + "'", long11 == 1644572130023L);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate39 = localDate34.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate39.weekyear();
        org.joda.time.LocalDate localDate42 = localDate39.withWeekyear(3);
        org.joda.time.LocalDate localDate44 = localDate39.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = localDate39.toInterval(dateTimeZone46);
        int[] intArray52 = chronology31.get((org.joda.time.ReadablePartial) localDate39, (long) 17);
        org.joda.time.DateTimeField dateTimeField53 = chronology31.minuteOfHour();
        org.joda.time.DurationField durationField54 = dateTimeField53.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate15 = localDate12.withWeekyear(3);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDate12.toDateTime(localTime17, dateTimeZone21);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate30 = localDate28.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate33 = localDate28.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.DateTime dateTime52 = localDate33.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = dateTime50.isEqual(93L);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset((long) (byte) 10);
        boolean boolean59 = dateTimeZone56.isFixed();
        int int61 = dateTimeZone56.getOffsetFromLocal((long) 10);
        long long65 = dateTimeZone56.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime66 = dateTime50.toDateTime(dateTimeZone56);
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = dateTimeZone70.getName((long) (byte) 10, locale72);
        java.lang.String str74 = locale72.getDisplayCountry();
        java.lang.String str75 = locale68.getDisplayVariant(locale72);
        java.lang.String str76 = dateTimeZone56.getShortName(97L, locale72);
        boolean boolean77 = dateTimeZone21.equals((java.lang.Object) dateTimeZone56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(34546, 2303, 2000, (-13827), 58, 43, dateTimeZone56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -13827 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 87L + "'", long65 == 87L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "France" + "'", str74, "France");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.minusMillis(2);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusSeconds(8);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minusHours(655);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        long long49 = interval48.getStartMillis();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval48.withDurationBeforeEnd(readableDuration50);
        long long52 = interval48.toDurationMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        int int55 = period54.size();
        int int56 = period54.size();
        org.joda.time.DateTime dateTime57 = dateTime39.minus((org.joda.time.ReadablePeriod) period54);
        java.util.Date date58 = dateTime39.toDate();
        org.joda.time.DateTime.Property property59 = dateTime39.secondOfMinute();
        int int60 = property59.get();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        boolean boolean23 = calendar6.after((java.lang.Object) localDate19);
        org.joda.time.LocalDate.Property property24 = localDate19.centuryOfEra();
        org.joda.time.LocalDate localDate25 = property24.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=28,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=5,MINUTE=264,SECOND=17,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1644572331728L);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.DateMidnight dateMidnight39 = property37.roundHalfEvenCopy();
        boolean boolean40 = dateMidnight39.isEqualNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = dateMidnight39.get(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar.Builder builder7 = builder0.setWeekDate((int) (short) -1, 13, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder10 = builder7.setWeekDefinition(1439, 631);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572386361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=46,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        long long49 = interval48.getStartMillis();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval48.withDurationBeforeEnd(readableDuration50);
        long long52 = interval48.toDurationMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        int int55 = period54.size();
        int int56 = period54.size();
        org.joda.time.DateTime dateTime57 = dateTime39.minus((org.joda.time.ReadablePeriod) period54);
        java.util.Date date58 = dateTime39.toDate();
        java.time.Instant instant59 = date58.toInstant();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(11);
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfMonth();
        org.joda.time.Chronology chronology65 = localDate63.getChronology();
        org.joda.time.LocalDate.Property property66 = localDate63.dayOfWeek();
        org.joda.time.LocalDate localDate67 = property66.roundHalfEvenCopy();
        int int68 = property66.getMaximumValue();
        org.joda.time.LocalDate localDate69 = property66.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeZone73.getName((long) (byte) 10, locale75);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone73);
        java.util.TimeZone timeZone78 = dateTimeZone73.toTimeZone();
        org.joda.time.DateMidnight dateMidnight79 = org.joda.time.DateMidnight.now(dateTimeZone73);
        int int81 = dateTimeZone73.getOffsetFromLocal(0L);
        org.joda.time.Interval interval82 = localDate69.toInterval(dateTimeZone73);
        int int84 = dateTimeZone73.getStandardOffset(1644572246144L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((java.lang.Object) instant59, dateTimeZone73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 7 + "'", int68 == 7);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = localDate8.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean34 = dateTime30.isEqual(93L);
        org.joda.time.DateTime dateTime36 = dateTime30.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime30.withMillis((long) 5);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        int int56 = dateTimeZone53.getOffsetFromLocal((long) '#');
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime30.toDateTime(dateTimeZone53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(106, 3600011, 54, 41, 13920, 0, 724, dateTimeZone53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("26");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 26");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime19.getZone();
        org.joda.time.DateTime dateTime25 = localDate3.toDateTime(localTime9, dateTimeZone24);
        int int26 = localDate3.getDayOfWeek();
        org.joda.time.LocalDate.Property property27 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate29 = localDate3.withWeekyear(32772);
        int int30 = localDate3.getYearOfEra();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(11);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfWeek();
        org.joda.time.LocalDate localDate38 = localDate35.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.LocalDate localDate40 = localDate35.withFields(readablePartial39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 100, chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) localDate3, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay10.plus((org.joda.time.ReadablePeriod) period16);
        int int18 = timeOfDay10.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay10.minusMillis(23);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay10.minusMinutes(1932);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property6.getAsText(locale8);
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property6.getFieldType();
        java.lang.String str12 = property6.getAsShortText();
        org.joda.time.LocalDate localDate13 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(28L);
        org.joda.time.LocalDate localDate17 = localDate15.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate19 = localDate17.withWeekyear(264);
        int int20 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.year();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u661f\u671f\u65e5" + "'", str12, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weeks();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths(19);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtStartOfDay();
        int int22 = localDate18.getWeekyear();
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtStartOfDay();
        int int24 = localDate18.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getStart();
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfWeek(4);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime57 = dateTime51.toDateTime(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime35, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withMillis((long) (short) 100);
        int int63 = dateMidnight58.getWeekOfWeekyear();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readablePeriod25, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 1, (long) 7, chronology67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = interval68.toPeriod(periodType69);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate74 = localDate72.plusMonths((int) '4');
        org.joda.time.DateTime dateTime75 = localDate72.toDateTimeAtStartOfDay();
        int int76 = localDate72.getWeekyear();
        org.joda.time.DateTime dateTime77 = localDate72.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period70, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight58.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 6);
        org.joda.time.LocalDate localDate81 = localDate18.minus((org.joda.time.ReadablePeriod) period70);
        int int82 = period70.size();
        org.joda.time.MutablePeriod mutablePeriod83 = period70.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay14.plus((org.joda.time.ReadablePeriod) mutablePeriod83);
        int[] intArray87 = chronology11.get((org.joda.time.ReadablePeriod) mutablePeriod83, 19000L, (long) 2922789);
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(chronology11);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 48, 23, 789]");
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear((int) (short) 1);
        java.lang.Appendable appendable11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay14.year();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable11, (org.joda.time.ReadablePartial) yearMonthDay14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate13 = localDate11.withMonthOfYear(5);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e00\u6708" + "'", str9, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        int int4 = yearMonthDay2.getYear();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears((int) '#');
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay6.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.PRC;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology11);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay12.toDateMidnight(dateTimeZone15);
        java.lang.String str20 = dateTimeZone15.getName((long) 11);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = dateTimeZone15.getName((long) '4', locale22);
        java.lang.String str24 = locale9.getDisplayCountry(locale22);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime35.getZone();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.weekyear();
        org.joda.time.DateMidnight dateMidnight43 = property42.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        java.lang.String str49 = locale47.getISO3Language();
        java.lang.String str50 = locale47.getDisplayCountry();
        java.lang.String str51 = locale47.getDisplayName();
        java.lang.String str52 = locale47.getDisplayCountry();
        int int53 = property42.getMaximumTextLength(locale47);
        java.lang.String str54 = locale22.getDisplayCountry(locale47);
        int int55 = property8.getMaximumShortTextLength(locale47);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(dateMidnight18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Cina" + "'", str24, "Cina");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fra" + "'", str49, "fra");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "France" + "'", str50, "France");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "French (France)" + "'", str51, "French (France)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "France" + "'", str52, "France");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italie" + "'", str54, "Italie");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.DateTime dateTime50 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        long long60 = interval59.getStartMillis();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval59.withDurationBeforeEnd(readableDuration61);
        long long63 = interval59.toDurationMillis();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval59.toPeriod(periodType64);
        int int66 = period65.size();
        org.joda.time.MutablePeriod mutablePeriod67 = period65.toMutablePeriod();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.TimeOfDay timeOfDay69 = dateTime50.toTimeOfDay();
        org.joda.time.DateTime dateTime71 = dateTime50.minus(252000017L);
        int int72 = dateTime50.getYearOfEra();
        org.joda.time.DateTime dateTime74 = dateTime50.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime76 = dateTime50.withMillisOfDay(69);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.millisOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 1003);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter12.getPrinter();
        int int19 = dateTimeFormatter12.getDefaultYear();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimePrinter18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        java.util.Date date1 = new java.util.Date(3024000000L);
        int int2 = date1.getDay();
        date1.setSeconds(625);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 05 00:10:25 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy(32);
        org.joda.time.DateMidnight dateMidnight43 = property37.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plusMonths((-907));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setYear(11);
        java.util.Date date18 = new java.util.Date(3024000000L);
        boolean boolean19 = date13.before(date18);
        java.util.Date date26 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date33 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean34 = date26.after(date33);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromDateFields(date26);
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromDateFields(date26);
        java.lang.String str37 = date26.toGMTString();
        int int38 = date18.compareTo(date26);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 07 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Feb 05 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date33.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "7 Mar 2164 04:06:02 GMT" + "'", str37, "7 Mar 2164 04:06:02 GMT");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguageTag("weeks");
        java.util.Locale locale9 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder5.setRegion("Japanese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Japanese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "weeks");
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        boolean boolean20 = locale19.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = property16.setCopy("Jul 21, 1915 4:06:02 AM", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jul 21, 1915 4:06:02 AM\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfYear();
        java.lang.String str22 = property21.toString();
        boolean boolean23 = localDate6.equals((java.lang.Object) str22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        long long59 = dateTimeZone55.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(0L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight61 = localDate6.toDateMidnight(dateTimeZone55);
        int int63 = dateTimeZone55.getOffset((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(456825, 99, 1990, 2059, 99, dateTimeZone55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2059 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[dayOfYear]" + "'", str22, "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 87L + "'", long59 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 1003);
        java.lang.StringBuffer stringBuffer18 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfMonth();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(11);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfMonth();
        org.joda.time.Chronology chronology36 = localDate34.getChronology();
        org.joda.time.LocalDate.Property property37 = localDate34.dayOfWeek();
        org.joda.time.LocalDate localDate38 = property37.roundCeilingCopy();
        int int39 = property30.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate41 = localDate38.plusWeeks((int) '#');
        int int42 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate41.plusWeeks(32769);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer18, (org.joda.time.ReadablePartial) localDate44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        int int34 = dateMidnight32.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight70 = property68.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = property68.getAsText(locale74);
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = locale74.getDisplayName(locale78);
        java.util.Calendar calendar80 = dateMidnight32.toCalendar(locale74);
        int int82 = calendar80.getMaximum(7);
        java.util.Locale locale85 = java.util.Locale.UK;
        java.lang.String str86 = locale85.getDisplayCountry();
        java.lang.String str87 = locale85.getDisplayName();
        java.util.Locale locale88 = java.util.Locale.PRC;
        java.lang.String str89 = locale85.getDisplayLanguage(locale88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap90 = calendar80.getDisplayNames((-58), 27, locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fran\347ais (France)" + "'", str79, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "United Kingdom" + "'", str86, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "English (United Kingdom)" + "'", str87, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u82f1\u6587" + "'", str89, "\u82f1\u6587");
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        org.joda.time.DateTime.Property property20 = dateTime13.weekOfWeekyear();
        java.lang.String str21 = property20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = timeOfDay25.getFieldTypes();
        boolean boolean27 = timeOfDay23.isAfter((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay23.minus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.withPeriodAdded(readablePeriod30, 10);
        org.joda.time.TimeOfDay.Property property33 = timeOfDay29.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay34 = property33.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfWeek(4);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime61.toDateTime(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) dateTime45, dateTimeZone66);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight71 = property69.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeZone73.getName((long) (byte) 10, locale75);
        boolean boolean77 = locale75.hasExtensions();
        java.lang.String str78 = property69.getAsText(locale75);
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale75.getDisplayName(locale79);
        int int81 = property33.getMaximumShortTextLength(locale79);
        java.util.Set<java.lang.String> strSet82 = locale79.getUnicodeLocaleAttributes();
        int int83 = property20.getMaximumTextLength(locale79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = property20.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[weekOfWeekyear]" + "'", str21, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fran\347ais (France)" + "'", str80, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str11 = dateTimeFieldType10.toString();
        int int12 = localDate9.get(dateTimeFieldType10);
        java.util.Date date13 = localDate9.toDate();
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minus(readableDuration48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight47.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight47.plusDays((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Interval interval66 = interval63.withPeriodBeforeEnd(readablePeriod65);
        boolean boolean67 = interval66.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = dateTimeZone71.getName((long) (byte) 10, locale73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone71);
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.DateTime dateTime77 = interval75.getStart();
        boolean boolean78 = interval66.overlaps((org.joda.time.ReadableInterval) interval75);
        org.joda.time.MutableInterval mutableInterval79 = interval66.toMutableInterval();
        org.joda.time.Duration duration80 = interval66.toDuration();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight55.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTime dateTime83 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration80, 13);
        java.util.Date date84 = dateTime14.toDate();
        java.lang.Object obj85 = date84.clone();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfYear" + "'", str11, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 360 + "'", int12 == 360);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 26 00:00:00 UTC 3");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(date84);
// flaky:         org.junit.Assert.assertEquals(date84.toString(), "Fri Dec 28 09:39:47 UTC 3");
        org.junit.Assert.assertNotNull(obj85);
// flaky:         org.junit.Assert.assertEquals(obj85.toString(), "Fri Dec 28 09:39:47 UTC 3");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "Fri Dec 28 09:39:47 UTC 3");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "Fri Dec 28 09:39:47 UTC 3");
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology(chronology5);
        int int7 = dateTimeFormatter3.getDefaultYear();
        boolean boolean8 = dateTimeFormatter3.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone9);
        java.lang.Integer int11 = dateTimeFormatter10.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        java.util.TimeZone timeZone20 = dateTimeZone15.toTimeZone();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = dateTimeField27.getAsText(14, locale32);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone20, locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter10.withLocale(locale32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(397);
        java.lang.String str41 = dateTimeZone39.getNameKey((-5L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.parse("158", dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "14" + "'", str35, "14");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572387201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=47,MILLISECOND=211,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.property(dateTimeFieldType36);
        int int39 = property38.get();
        java.lang.Object obj40 = null;
        boolean boolean41 = property38.equals(obj40);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType20.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfMonth();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        int int30 = dateTimeField28.getMaximumTextLength(locale29);
        java.util.Map<java.lang.String, java.lang.Integer> strMap31 = calendar6.getDisplayNames(5, 4, locale29);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add(95, 1968);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNull(strMap31);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone19);
        org.joda.time.LocalDate localDate21 = dateTime20.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDate27.getChronology();
        boolean boolean30 = durationFieldType23.isSupported(chronology29);
        boolean boolean31 = dateTimeFieldType22.isSupported(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime20.withChronology(chronology29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 1, (long) 7, chronology35);
        org.joda.time.Duration duration37 = interval36.toDuration();
        org.joda.time.DateTime dateTime38 = dateTime20.minus((org.joda.time.ReadableDuration) duration37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime20.withTime(743, 578, 56, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 743 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale locale12 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale45 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale.LanguageRange languageRange52 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] { languageRange52 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale69 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList75);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList76);
        boolean boolean78 = locale0.equals((java.lang.Object) languageRangeList2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 264);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra(600);
        org.joda.time.LocalDate localDate5 = localDate1.withYear(100);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = timeOfDay32.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay32.getFieldTypes();
        org.joda.time.DateTime dateTime35 = dateTime30.withFields((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.DateTime.Property property36 = dateTime30.hourOfDay();
        org.joda.time.Chronology chronology37 = dateTime30.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval41.toPeriod(periodType42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Interval interval54 = interval51.withPeriodBeforeEnd(readablePeriod53);
        boolean boolean55 = interval54.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        boolean boolean66 = interval54.overlaps((org.joda.time.ReadableInterval) interval63);
        boolean boolean67 = interval41.isAfter((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Chronology chronology68 = interval41.getChronology();
        java.lang.String str69 = chronology68.toString();
        org.joda.time.DateTime dateTime70 = dateTime30.withChronology(chronology68);
        boolean boolean71 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime70);
        int int72 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime74 = dateTime15.withYearOfEra(2067);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[+00:00:00.010]" + "'", str69, "ISOChronology[+00:00:00.010]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 70500000 + "'", int72 == 70500000);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay10.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = timeOfDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfDay();
        org.joda.time.DurationField durationField22 = chronology18.days();
        org.joda.time.DurationField durationField23 = chronology18.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMillis((int) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay1.plusMinutes((int) (byte) 0);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = timeOfDay13.toLocalTime();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology16.getDateTimeMillis(1644572181983L, 611, 34534, 54, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 611 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight32.withDurationAdded(87L, 34536);
        org.joda.time.LocalDate localDate42 = dateMidnight32.toLocalDate();
        java.util.Date date43 = localDate42.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        java.util.Locale locale1 = new java.util.Locale("T09:38:43.177");
        org.junit.Assert.assertEquals(locale1.toString(), "t09:38:43.177");
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear(9);
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeFormatter15.parseMillis("T09:38:33.983");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int30 = gregorianCalendar29.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval38.withPeriodBeforeEnd(readablePeriod40);
        boolean boolean43 = interval38.contains((long) '4');
        boolean boolean44 = gregorianCalendar29.before((java.lang.Object) interval38);
        gregorianCalendar29.setLenient(true);
        java.lang.Object obj47 = gregorianCalendar29.clone();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone27);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = dateTimeZone27.getName((long) 11, locale30);
        java.lang.String str32 = dateTimeZone20.getName(1644572138904L, locale30);
        java.util.Calendar calendar33 = dateTime9.toCalendar(locale30);
        calendar33.setMinimalDaysInFirstWeek(59);
        calendar33.setFirstDayOfWeek((int) (short) 10);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate44 = localDate39.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((java.lang.Object) (short) 10, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=10,minimalDaysInFirstWeek=59,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        int int18 = dateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.setCopy(59);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        int int20 = property11.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.YearMonthDay yearMonthDay21 = property11.withMinimumValue();
        java.lang.Class<?> wildcardClass22 = property11.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        int int24 = calendar6.getWeekYear();
        calendar6.set((-1), (-13827), 35, 28, 1, (int) 'x');
        calendar6.setFirstDayOfWeek(34534);
        calendar6.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.setWeekDate(999, 1003, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -292275054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34534,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=-13827,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=28,MINUTE=1,SECOND=120,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray10 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap14);
        java.util.Set<java.lang.String> strSet16 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange languageRange19 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] { languageRange19 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap32);
        java.util.Locale.LanguageRange languageRange35 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] { languageRange35 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList43);
        java.util.Set<java.lang.String> strSet46 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet46);
        java.lang.String str48 = java.util.Locale.lookupTag(languageRangeList33, (java.util.Collection<java.lang.String>) strList47);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap50);
        java.util.Set<java.lang.String> strSet52 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet52, filteringMode53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList51, strMap55);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtStartOfDay();
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withMillis((long) (short) 100);
        int int46 = dateMidnight41.getWeekOfWeekyear();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readablePeriod8, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.plusMonths((int) '4');
        org.joda.time.DateTime dateTime58 = localDate55.toDateTimeAtStartOfDay();
        int int59 = localDate55.getWeekyear();
        org.joda.time.DateTime dateTime60 = localDate55.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight41.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 6);
        org.joda.time.LocalDate localDate64 = localDate1.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property67 = dateTime66.monthOfYear();
        long long68 = property67.remainder();
        java.lang.String str69 = property67.toString();
        org.joda.time.DateTime dateTime70 = property67.withMaximumValue();
        java.lang.String str71 = property67.getAsString();
        org.joda.time.DateTime dateTime72 = property67.roundCeilingCopy();
        org.joda.time.DateTime dateTime73 = property67.roundFloorCopy();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime73);
        int int75 = dateTime73.getMinuteOfDay();
        boolean boolean77 = dateTime73.isBefore((long) 17);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 110L + "'", long68 == 110L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Property[monthOfYear]" + "'", str69, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = localDate3.plusMonths((-1));
        org.joda.time.LocalDate localDate9 = localDate3.withYear(43);
        org.joda.time.LocalDate localDate11 = localDate3.withCenturyOfEra(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate11.getFieldType(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int14 = property11.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property11.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:48.007" + "'", str8, "T09:39:48.007");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "48" + "'", str12, "48");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(11);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        boolean boolean11 = durationFieldType4.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology10.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(100, 456825, 54000, (int) (short) 0, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusDays((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight3.toMutableDateTimeISO();
        int int8 = dateMidnight3.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight3.withYear(55);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.lang.String str15 = dateTimeField13.getAsShortText((long) 696);
        int int16 = dateTimeField13.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:48.055" + "'", str8, "T09:39:48.055");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "48" + "'", str12, "48");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromDateFields(date6);
        java.util.Date date23 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean24 = date6.after(date23);
        date6.setYear(269);
        java.lang.String str27 = date6.toLocaleString();
        int int28 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Tue Mar 07 04:06:02 UTC 2169");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2169-3-7 4:06:02" + "'", str27, "2169-3-7 4:06:02");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(4);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(70);
        int int30 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime27.withYear((int) 'u');
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfEra(35);
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.TimeOfDay timeOfDay37 = property11.addNoWrapToCopy((-1));
        org.joda.time.TimeOfDay timeOfDay38 = property11.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withSecondOfMinute(0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight44 = property37.addWrapFieldToCopy(22);
        org.joda.time.DateMidnight dateMidnight45 = property37.roundHalfEvenCopy();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withFieldAdded(durationFieldType46, 70500000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfWeek();
        org.joda.time.LocalDate localDate55 = localDate52.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.LocalDate localDate57 = localDate52.withFields(readablePartial56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 1, (long) 7, chronology60);
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 1, (long) 7, chronology65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval66.toPeriod(periodType67);
        org.joda.time.DateTime dateTime69 = dateTime62.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology71);
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay72.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay74 = dateMidnight73.toYearMonthDay();
        int int75 = yearMonthDay74.getYear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone79);
        org.joda.time.Interval interval84 = interval83.toInterval();
        long long85 = interval84.getStartMillis();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Interval interval87 = interval84.withDurationBeforeEnd(readableDuration86);
        long long88 = interval84.toDurationMillis();
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Period period90 = interval84.toPeriod(periodType89);
        int int91 = period90.size();
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay74.minus((org.joda.time.ReadablePeriod) period90);
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadablePeriod) period90);
        org.joda.time.LocalDate localDate94 = localDate52.plus((org.joda.time.ReadablePeriod) period90);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight45.plus((org.joda.time.ReadablePeriod) period90);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(localDate94);
        org.junit.Assert.assertNotNull(dateMidnight95);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        java.util.Locale locale6 = new java.util.Locale("AM", "ISOChronology[Etc/UTC]");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = property3.getAsText(locale6);
        int int9 = property3.get();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals(locale6.toString(), "am_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset((long) (byte) 10);
        boolean boolean5 = dateTimeZone2.isFixed();
        int int7 = dateTimeZone2.getOffsetFromLocal((long) 10);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 11, dateTimeZone2);
        org.joda.time.DateTime dateTime14 = dateTime12.minus((-1L));
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMinutes((-18));
        int int18 = dateTime14.getWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        boolean boolean24 = timeOfDay20.isAfter((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay20.minus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.withPeriodAdded(readablePeriod27, 10);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay26.minuteOfHour();
        java.lang.String str31 = property30.getName();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMonths(4);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillisOfDay(70);
        int int49 = dateTime46.getSecondOfMinute();
        org.joda.time.DateTime dateTime51 = dateTime46.withYear((int) 'u');
        org.joda.time.DateTime dateTime53 = dateTime46.withYearOfEra(35);
        int int54 = property30.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int55 = property30.get();
        org.joda.time.TimeOfDay timeOfDay57 = property30.addWrapFieldToCopy(1969);
        int int58 = property30.get();
        java.util.Locale locale62 = new java.util.Locale("FRA", "T09:35:17.686", "dayOfYear");
        int int63 = property30.getMaximumShortTextLength(locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property30.getFieldType();
        org.joda.time.DateTime.Property property65 = dateTime14.property(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 87L + "'", long11 == 87L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfHour" + "'", str31, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 39 + "'", int55 == 39);
        org.junit.Assert.assertNotNull(timeOfDay57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 39 + "'", int58 == 39);
        org.junit.Assert.assertEquals(locale62.toString(), "fra_T09:35:17.686_dayOfYear");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime23 = interval19.getEnd();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(31536034534L, 1644572225039L);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.DateTime dateTime29 = dateTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 7070);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeFormatter32.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withChronology(chronology34);
        int int36 = dateTimeFormatter32.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter32.withDefaultYear((int) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology40);
        org.joda.time.DateTime dateTime42 = yearMonthDay41.toDateTimeAtMidnight();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight47 = yearMonthDay41.toDateMidnight(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfWeek(4);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        int int61 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter38.withZone(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTime23.toString(dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2000 + "'", int36 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight15 = property13.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight16 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = property13.setCopy(33);
        int int19 = property13.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight21 = property13.addWrapFieldToCopy(117);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear(34546);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withOffsetParsed();
        java.lang.StringBuffer stringBuffer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer13, (-625L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDate localDate8 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths(34530);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7" + "'", str7, "7");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = property13.setCopy(19);
        org.joda.time.DateTime dateTime32 = property13.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.plusYears((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(0, 7, 999);
        java.util.Calendar.Builder builder13 = builder0.setWeekDate((-19034), 724, (int) (short) 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addNoWrapToCopy(8);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMinutes(999);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 71);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        boolean boolean21 = timeOfDay15.equals((java.lang.Object) dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(12562035, 49, 5, 1439, 34771, 839, 7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime13.plusDays((int) (short) 100);
        int int21 = dateTime20.getEra();
        int int22 = dateTime20.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate18 = localDate15.minusMonths((int) '4');
        int int19 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYearOfCentury();
        org.joda.time.LocalDate localDate22 = localDate18.minusMonths(32770);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime49.toDateTime(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, dateTimeZone54);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight58 = property57.roundHalfFloorCopy();
        boolean boolean59 = dateTimeZone23.equals((java.lang.Object) dateMidnight58);
        long long61 = dateTimeZone23.nextTransition((long) 34530);
        long long63 = dateTimeZone23.previousTransition((long) 20);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight65 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now(dateTimeZone23);
        java.lang.String str68 = dateTimeZone23.getShortName(3024000100L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 65 + "'", int20 == 65);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 34530L + "'", long61 == 34530L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 20L + "'", long63 == 20L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtStartOfDay();
        int int3 = localDate1.getYearOfEra();
        int int4 = localDate1.getDayOfWeek();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(11);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfWeek();
        org.joda.time.LocalDate localDate11 = localDate8.minusMonths((int) '4');
        org.joda.time.LocalDate localDate13 = localDate8.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate15 = localDate8.plusWeeks(31);
        org.joda.time.DateTime dateTime16 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.minusYears(11);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        org.joda.time.DateTime dateTime35 = dateTime28.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology37);
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay38.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay40 = dateMidnight39.toYearMonthDay();
        int int41 = yearMonthDay40.getYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        long long51 = interval50.getStartMillis();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        long long54 = interval50.toDurationMillis();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval50.toPeriod(periodType55);
        int int57 = period56.size();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay40.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.PeriodType periodType60 = period56.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay23.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.LocalDate localDate63 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) period56, (-13827));
        org.joda.time.LocalDate localDate64 = localDate1.withFields((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate66 = localDate64.plusDays(34265);
        org.joda.time.LocalDate.Property property67 = localDate64.dayOfWeek();
        org.joda.time.LocalDate.Property property68 = localDate64.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.addWrapFieldToCopy(12);
        java.lang.String str12 = property8.getName();
        org.joda.time.LocalDate localDate13 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property8.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate15.withMonthOfYear(909);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 909 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(39);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int14 = dateTime10.get(dateTimeFieldType13);
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((java.lang.Object) str27, chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        long long43 = chronology33.add((org.joda.time.ReadablePeriod) period40, 87L, 1);
        java.util.Locale.LanguageRange languageRange45 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] { languageRange45 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList53);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(11);
        org.joda.time.LocalDate.Property property60 = localDate59.dayOfMonth();
        org.joda.time.Chronology chronology61 = localDate59.getChronology();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((java.lang.Object) str55, chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 1, (long) 7, chronology65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval66.toPeriod(periodType67);
        long long71 = chronology61.add((org.joda.time.ReadablePeriod) period68, 87L, 1);
        int[] intArray74 = chronology33.get((org.joda.time.ReadablePeriod) period68, (long) 10, (long) 13);
        org.joda.time.DurationField durationField75 = chronology33.months();
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) 'u', chronology33);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField78 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField79 = chronology33.seconds();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DurationField durationField81 = chronology33.millis();
        boolean boolean82 = dateTimeFieldType13.isSupported(chronology33);
        java.lang.String str83 = dateTimeFieldType13.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 93L + "'", long43 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 93L + "'", long71 == 93L);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "weekOfWeekyear" + "'", str83, "weekOfWeekyear");
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(25, 13920, 34567);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguage("Jan");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.setRegion("696");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale14);
        java.util.Set<java.lang.Character> charSet18 = locale14.getExtensionKeys();
        java.util.Locale locale22 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.lang.String str23 = locale14.getDisplayScript(locale22);
        java.util.Locale locale24 = locale22.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("Property[era]");
        java.lang.String str27 = locale24.getDisplayLanguage(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder10.setLocale(locale24);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: dayofyear [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572388808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=48,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals(locale22.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals(locale26.toString(), "property[era]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayofyear" + "'", str27, "dayofyear");
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTime dateTime36 = dateTime9.plusHours(2922789);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfDay(11);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.DateTime dateTime41 = property39.getDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(34567);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = dateTime43.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        boolean boolean23 = calendar6.before((java.lang.Object) interval21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime49.toDateTime(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.withMillis((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight56.plusDays(32769);
        boolean boolean63 = interval21.isBefore((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.year();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.withYear(34546);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=48,MILLISECOND=954,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset((long) (byte) 10);
        boolean boolean4 = dateTimeZone1.isFixed();
        int int6 = dateTimeZone1.getOffsetFromLocal((long) 10);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = dateTimeZone1.getName(10L, locale15);
        boolean boolean20 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withMillis(604800192L);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.minusWeeks(8);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus(1644572345813L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 87L + "'", long10 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "France" + "'", str17, "France");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime9.minusMonths(13920);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(34567);
        org.joda.time.DateTime.Property property36 = dateTime33.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 2922789);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusMonths((-1));
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.weekOfWeekyear();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.year();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        java.lang.String str26 = dateTimeField24.getAsText((long) 11);
        int int27 = dateTime14.get(dateTimeField24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = new org.joda.time.Interval((java.lang.Object) dateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        java.util.Date date3 = new java.util.Date(39, 15, 117);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jul 26 00:00:00 UTC 1940");
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date6.setDate(5);
        date6.setMinutes(70);
        int int11 = date6.getHours();
        date6.setMinutes(11);
        int int14 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Mar 05 05:11:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange languageRange13 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] { languageRange13 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap38);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) '#');
        long long33 = dateTimeZone28.convertUTCToLocal((long) 11);
        java.lang.String str35 = dateTimeZone28.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime36 = localDate9.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(273);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfEra(34615);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 21L + "'", long33 == 21L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addNoWrapToCopy((int) '#');
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMillis(12);
        java.lang.String str14 = timeOfDay11.toString();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        int int21 = localDate18.getDayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.DateTime dateTime25 = yearMonthDay24.toDateTimeAtMidnight();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.minus(readablePeriod31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.year();
        int int34 = localDate18.compareTo((org.joda.time.ReadablePartial) yearMonthDay32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        long long44 = interval43.getStartMillis();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Interval interval46 = interval43.withDurationBeforeEnd(readableDuration45);
        long long47 = interval43.toDurationMillis();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval43.toPeriod(periodType48);
        int int50 = period49.size();
        org.joda.time.MutablePeriod mutablePeriod51 = period49.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfWeek(4);
        org.joda.time.DateTime dateTime65 = dateTime61.minusMonths(4);
        org.joda.time.DateTime dateTime67 = dateTime65.withMillisOfDay(70);
        int int68 = dateTime65.getSecondOfMinute();
        org.joda.time.DateTime dateTime70 = dateTime65.withYear((int) 'u');
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period49, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay32.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay72.minusDays((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = timeOfDay11.isAfter((org.joda.time.ReadablePartial) yearMonthDay72);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "49" + "'", str7, "49");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "T08:48:24.002" + "'", str14, "T08:48:24.002");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(16);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withZoneRetainFields(dateTimeZone37);
        java.lang.String str40 = dateTimeZone37.getName(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval41 = new org.joda.time.Interval(1644572331728L, 28L, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withYear(11);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight25.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime43.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.withDurationAdded(readableDuration48, (int) (short) -1);
        int int51 = dateTime47.getYearOfEra();
        org.joda.time.DateTime dateTime53 = dateTime47.withWeekOfWeekyear(5);
        int int54 = dateTime47.getMonthOfYear();
        org.joda.time.DateTime dateTime56 = dateTime47.withHourOfDay((int) (byte) 1);
        int int57 = dateMidnight33.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateMidnight.Property property58 = dateMidnight33.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight33.withYear(34615);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight33.plusDays(34615);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1969 + "'", int51 == 1969);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate14.withDayOfWeek((-716240));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -716240 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime9.withMonthOfYear(7);
        java.util.Date date15 = dateTime9.toDate();
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromDateFields(date15);
        java.util.Date date23 = new java.util.Date((int) 'u', (int) 'u', (int) '4', 27, 35, 6);
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getSeconds();
        int int26 = date24.getDay();
        int int27 = date24.getSeconds();
        boolean boolean28 = date23.after(date24);
        boolean boolean29 = date15.before(date24);
        long long30 = date15.getTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Nov 22 03:35:06 UTC 2026");
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 11 09:39:49 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 49 + "'", int25 == 49);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 49 + "'", int27 == 49);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set((int) (short) -1, 7, (int) 'u', (int) (short) 10, 22);
        calendar0.setTimeInMillis(1644572125925L);
        java.lang.String str11 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar0.getMinimum(631);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 631");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572125925,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=25,MILLISECOND=925,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate15 = localDate10.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.LocalDate localDate18 = localDate15.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        int int21 = localDate18.get(dateTimeFieldType19);
        boolean boolean22 = localDate1.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate1.getFields();
        boolean boolean25 = localDate1.equals((java.lang.Object) "CN");
        org.joda.time.DateMidnight dateMidnight26 = localDate1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime42 = dateTime36.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekyear((int) (byte) 1);
        int int46 = dateTime42.getMillisOfSecond();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear(11);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfMonth();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.LocalDate localDate54 = localDate50.minusDays(1);
        org.joda.time.LocalDate.Property property55 = localDate50.monthOfYear();
        int int56 = property55.getMinimumValueOverall();
        org.joda.time.LocalDate localDate57 = property55.withMaximumValue();
        org.joda.time.LocalDate localDate59 = property55.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime60 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone64);
        org.joda.time.DateTime dateTime69 = localDate59.toDateTime(localTime60, dateTimeZone64);
        java.util.TimeZone timeZone70 = dateTimeZone64.toTimeZone();
        org.joda.time.DateTime dateTime71 = dateTime42.toDateTime(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight72 = localDate1.toDateMidnight(dateTimeZone64);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfYear" + "'", str20, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 360 + "'", int21 == 360);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight72);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        int int5 = calendar0.getActualMinimum(10);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572389915,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=49,MILLISECOND=915,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        java.util.Locale locale0 = java.util.Locale.UK;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate localDate10 = localDate8.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property12 = localDate10.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDate10.getFieldType(0);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.minuteOfHour();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.weekyears();
        org.joda.time.DurationField durationField24 = chronology20.millis();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType14.getField(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) locale0, chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime.Property property18 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime12.minusMinutes(8);
        org.joda.time.DateTime dateTime22 = dateTime12.minusMonths((int) '#');
        org.joda.time.DateTime dateTime24 = dateTime22.plus((long) ' ');
        org.joda.time.DateTime.Property property25 = dateTime22.era();
        int int26 = dateTime22.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        long long18 = interval14.toDurationMillis();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval14.toPeriod(periodType19);
        int int21 = period20.size();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.LocalDate localDate24 = yearMonthDay22.toLocalDate();
        java.util.Date date25 = localDate24.toDate();
        date25.setHours(54);
        java.lang.Object obj28 = date25.clone();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 03 06:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "Sat Jan 03 06:00:00 UTC 1970");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "Sat Jan 03 06:00:00 UTC 1970");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "Sat Jan 03 06:00:00 UTC 1970");
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.getYearMonthDay();
        int int17 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay18 = property11.getYearMonthDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withLocale(locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.Duration duration53 = interval52.toDuration();
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime55 = dateTime34.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology56 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfMonth();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate61 = localDate59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime62 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate64 = localDate59.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate64.weekyear();
        org.joda.time.LocalDate localDate67 = localDate64.withWeekyear(3);
        org.joda.time.LocalDate localDate69 = localDate64.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = dateTimeZone71.getName((long) (byte) 10, locale73);
        org.joda.time.Interval interval75 = localDate64.toInterval(dateTimeZone71);
        int[] intArray77 = chronology56.get((org.joda.time.ReadablePartial) localDate64, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter22.withChronology(chronology56);
        org.joda.time.Chronology chronology79 = dateTimeFormatter78.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter78.withOffsetParsed();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.util.Locale locale82 = locale81.stripExtensions();
        java.lang.String str83 = locale82.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter80.withLocale(locale82);
        int int85 = property11.getMaximumShortTextLength(locale82);
        java.util.Locale.Builder builder86 = new java.util.Locale.Builder();
        java.util.Locale locale87 = builder86.build();
        java.util.Locale.Builder builder88 = builder86.clear();
        java.util.Locale.Builder builder89 = builder86.clear();
        java.util.Locale.Builder builder91 = builder89.setLanguageTag("francese");
        java.util.Locale.Builder builder94 = builder91.setExtension('a', "");
        java.util.Locale.Builder builder95 = builder94.clearExtensions();
        java.util.Locale.Builder builder96 = builder95.clearExtensions();
        java.util.Locale locale97 = builder96.build();
        int int98 = property11.getMaximumTextLength(locale97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "IT" + "'", str83, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "francese");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 9 + "'", int98 == 9);
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = localDate20.minusDays(1);
        org.joda.time.LocalDate.Property property25 = localDate20.monthOfYear();
        int int26 = property25.getMinimumValueOverall();
        int int27 = property25.getMinimumValue();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = localDate29.toDateTimeAtStartOfDay();
        int int33 = property25.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfMonth();
        org.joda.time.Chronology chronology40 = localDate38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType34.getField(chronology40);
        long long44 = dateTimeField41.add((long) 100, 70);
        boolean boolean45 = dateTimeField41.isLenient();
        int int46 = dateTime32.get(dateTimeField41);
        org.joda.time.DateTime.Property property47 = dateTime32.year();
        boolean boolean48 = localDate16.equals((java.lang.Object) dateTime32);
        org.joda.time.DateTime dateTime50 = dateTime32.minusMinutes((int) '4');
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3024000100L + "'", long44 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime13.plusDays((int) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime13.plusSeconds(36);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone29);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfWeek();
        org.joda.time.LocalDate localDate41 = localDate38.minusMonths((int) '4');
        int int42 = localDate34.compareTo((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate.Property property43 = localDate41.dayOfYear();
        org.joda.time.DateTime dateTime44 = dateTime13.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate.Property property45 = localDate41.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight24 = dateTime13.toDateMidnight();
        org.joda.time.DateTime dateTime26 = dateTime13.minusHours(273);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology(chronology5);
        int int7 = dateTimeFormatter3.getDefaultYear();
        boolean boolean8 = dateTimeFormatter3.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone9);
        java.lang.Integer int11 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withDefaultYear((int) (byte) 1);
        boolean boolean14 = dateTimeFormatter13.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 1003);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.parse("T09:39:48.007", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        long long28 = chronology18.add((org.joda.time.ReadablePeriod) period25, 87L, 1);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] { languageRange30 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) str40, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        long long56 = chronology46.add((org.joda.time.ReadablePeriod) period53, 87L, 1);
        int[] intArray59 = chronology18.get((org.joda.time.ReadablePeriod) period53, (long) 10, (long) 13);
        org.joda.time.DurationField durationField60 = chronology18.months();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 'u', chronology18);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology18);
        long long66 = chronology18.add(0L, 87L, 3);
        org.joda.time.DurationField durationField67 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField68 = chronology18.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long71 = dateTimeField68.set(1676108246355L, (-19034));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19034 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 93L + "'", long28 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 93L + "'", long56 == 93L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 261L + "'", long66 == 261L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        org.joda.time.tz.Provider provider0 = null;
        org.joda.time.DateTimeZone.setProvider(provider0);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 7, chronology20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.Interval interval24 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval27 = interval24.withEnd((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval28 = interval3.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) 13, chronology35);
        org.joda.time.DurationField durationField39 = chronology35.hours();
        org.joda.time.Interval interval40 = interval27.withChronology(chronology35);
        org.joda.time.Duration duration41 = interval40.toDuration();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTime42.toString("T09:38:37.487");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        long long11 = interval10.getStartMillis();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = interval10.withDurationBeforeEnd(readableDuration12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 7, chronology16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval17.toPeriod(periodType18);
        org.joda.time.Interval interval20 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.Duration duration25 = interval24.toDuration();
        boolean boolean26 = interval13.overlaps((org.joda.time.ReadableInterval) interval24);
        boolean boolean27 = interval24.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        long long37 = interval36.getStartMillis();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.Interval interval46 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.MutableInterval mutableInterval47 = interval39.toMutableInterval();
        boolean boolean48 = interval24.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Chronology chronology49 = interval24.getChronology();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 32, 43200100L, chronology49);
        long long51 = interval50.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone67);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.DateTime dateTime75 = dateTime73.minusDays(0);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) 1, (long) 7, chronology78);
        org.joda.time.Duration duration80 = interval79.toDuration();
        org.joda.time.DateTime dateTime81 = dateTime75.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTime dateTime82 = dateTime61.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Chronology chronology83 = dateTime61.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.seconds();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.weekyearOfCentury();
        org.joda.time.Interval interval87 = interval50.withChronology(chronology83);
        org.joda.time.DateTimeField dateTimeField88 = chronology83.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 43200068L + "'", long51 == 43200068L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        int int20 = property11.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks((int) '#');
        int int23 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        int int41 = dateTimeZone38.getOffsetFromLocal((long) '#');
        org.joda.time.DateMidnight dateMidnight42 = localDate22.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate44 = localDate22.minusMonths(292278994);
        org.joda.time.LocalDate localDate46 = localDate22.minusYears(10);
        int int47 = localDate22.getYear();
        org.joda.time.LocalDate localDate49 = localDate22.withWeekyear(593);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        org.joda.time.DurationField durationField9 = dateTimeField7.getLeapDurationField();
        long long11 = dateTimeField7.remainder((long) 16);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayVariant();
        java.lang.String str15 = dateTimeField7.getAsShortText((int) (byte) -1, locale13);
        java.util.Calendar.Builder builder16 = builder0.setLocale(locale13);
        java.util.Locale.LanguageRange languageRange18 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] { languageRange18 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList26);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((java.lang.Object) str28, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay39, 1, locale47);
        java.lang.String str49 = locale47.getScript();
        java.lang.String str50 = locale13.getDisplayScript(locale47);
        java.lang.String str51 = locale47.getVariant();
        java.lang.String str52 = locale47.getLanguage();
        boolean boolean53 = locale47.hasExtensions();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1" + "'", str15, "-1");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "lun" + "'", str48, "lun");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) 100, 70);
        org.joda.time.DurationField durationField11 = dateTimeField7.getRangeDurationField();
        int int12 = dateTimeField7.getMinimumValue();
        long long14 = dateTimeField7.remainder((-61725542400000L));
        long long17 = dateTimeField7.add((long) ' ', 95);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3024000100L + "'", long10 == 3024000100L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4104000032L + "'", long17 == 4104000032L);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate16.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekyear(3);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDate21.toDateTime(localTime26, dateTimeZone30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.minus(readablePeriod46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.year();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getStart();
        org.joda.time.DateTime dateTime77 = dateTime75.withDayOfWeek(4);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime81 = dateTime75.toDateTime(dateTimeZone80);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateTime59, dateTimeZone80);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = property83.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = dateTimeZone87.getName((long) (byte) 10, locale89);
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = property83.getAsText(locale89);
        java.lang.String str93 = property48.getAsShortText(locale89);
        java.lang.String str94 = dateTimeZone30.getShortName(16L, locale89);
        java.util.Locale.Builder builder95 = builder14.setLocale(locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder98 = builder14.setUnicodeLocaleKeyword("T09:35:55.386", "-1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: T09:35:55.386 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.010" + "'", str90, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.010" + "'", str94, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 1, (long) 7, chronology7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = interval8.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = dateTime4.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate localDate19 = localDate15.minusDays(1);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property23 = localDate21.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDate21.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        int int43 = dateTimeZone40.getOffsetFromLocal((long) '#');
        long long45 = dateTimeZone40.convertUTCToLocal((long) 11);
        java.lang.String str47 = dateTimeZone40.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime48 = localDate21.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(273);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime50.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 21L + "'", long45 == 21L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 0, chronology6);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths(19);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear(11);
        int int20 = property10.getDifference((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime21 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = property10.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13896 + "'", int20 == 13896);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = property13.setCopy(19);
        org.joda.time.DateTimeField dateTimeField32 = property13.getField();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(11);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfMonth();
        org.joda.time.Chronology chronology38 = localDate36.getChronology();
        org.joda.time.LocalDate.Property property39 = localDate36.dayOfWeek();
        org.joda.time.LocalDate localDate40 = property39.roundCeilingCopy();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = property39.getAsText(locale41);
        org.joda.time.LocalDate localDate43 = property39.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate44 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate46 = property39.addToCopy(34657);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear(11);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfMonth();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.LocalDate.Property property53 = localDate50.dayOfWeek();
        org.joda.time.LocalDate localDate54 = property53.roundCeilingCopy();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = property53.getAsText(locale55);
        org.joda.time.LocalDate localDate57 = property53.roundHalfEvenCopy();
        int int58 = property53.get();
        org.joda.time.LocalDate localDate59 = property53.getLocalDate();
        int[] intArray60 = localDate59.getValues();
        int int61 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDate46, intArray60);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u661f\u671f\u65e5" + "'", str42, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u661f\u671f\u65e5" + "'", str56, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7 + "'", int58 == 7);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 11]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 86399 + "'", int61 == 86399);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        int int12 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter10.getPrinter();
        org.joda.time.Chronology chronology14 = dateTimeFormatter10.getChronolgy();
        java.lang.Appendable appendable15 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = property22.getAsText(locale24);
        int int26 = property22.get();
        org.joda.time.LocalDate localDate27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate28 = property22.roundCeilingCopy();
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.LocalDate localDate30 = property29.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate31 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = property29.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable15, (org.joda.time.ReadablePartial) localDate32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u661f\u671f\u65e5" + "'", str25, "\u661f\u671f\u65e5");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        int int9 = dateTimeField6.getDifference((long) 11, (long) 4);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = dateTimeField6.getAsShortText(1644572124561L, locale11);
        long long16 = dateTimeField6.addWrapField((long) (byte) 100, 1439);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "561" + "'", str13, "561");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 539L + "'", long16 == 539L);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime dateTime26 = dateTime23.minusMinutes(15);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(6);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(32772);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        java.util.Date date19 = dateTime15.toDate();
        date19.setYear(27);
        java.util.Date date28 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date28.setMinutes(3);
        boolean boolean31 = date19.after(date28);
        date19.setMonth(69);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Oct 01 00:00:00 UTC 1932");
        org.junit.Assert.assertEquals(date28.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.centuryOfEra();
        org.joda.time.LocalDate localDate11 = localDate8.minusMonths(37);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(17);
        org.joda.time.TimeOfDay timeOfDay15 = property11.addNoWrapToCopy(17);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str19 = property11.getAsShortText(locale16);
        int int20 = property11.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay22 = property11.addNoWrapToCopy(4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:51.193" + "'", str8, "T09:39:51.193");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ja-JP" + "'", str18, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "51" + "'", str19, "51");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        boolean boolean23 = calendar6.after((java.lang.Object) localDate19);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight57.withMillis((long) (short) 100);
        int int62 = dateMidnight57.getWeekOfWeekyear();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readablePeriod24, (org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Chronology chronology64 = dateMidnight57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight57.getZone();
        org.joda.time.DateTime dateTime66 = localDate19.toDateTimeAtMidnight(dateTimeZone65);
        org.joda.time.DateTime.Property property67 = dateTime66.weekOfWeekyear();
        org.joda.time.DateTime dateTime68 = property67.withMaximumValue();
        org.joda.time.DateTime dateTime69 = property67.withMaximumValue();
        org.joda.time.DateTime dateTime70 = property67.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=28,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=5,MINUTE=264,SECOND=17,MILLISECOND=218,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar calendar6 = builder0.build();
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(40, 34530, 34534, 2719);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay(1971, 41, 16, (int) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay20.getFieldTypes();
        boolean boolean22 = timeOfDay18.isAfter((org.joda.time.ReadablePartial) timeOfDay20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay18.minus(readablePeriod23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusHours(3);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay24.millisOfSecond();
        int[] intArray28 = timeOfDay24.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder11.setFields(intArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[9, 39, 51, 270]");
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField21 = chronology18.centuries();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) -1, chronology18);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.secondOfMinute();
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(65);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(1);
        org.joda.time.LocalDate localDate38 = localDate36.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = localDate38.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property40 = localDate38.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDate38.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfWeek(4);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(dateTimeZone57);
        int int60 = dateTimeZone57.getOffsetFromLocal((long) '#');
        long long62 = dateTimeZone57.convertUTCToLocal((long) 11);
        java.lang.String str64 = dateTimeZone57.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime65 = localDate38.toDateTimeAtMidnight(dateTimeZone57);
        long long67 = dateTimeZone28.getMillisKeepLocal(dateTimeZone57, (long) 34530);
        org.joda.time.Chronology chronology68 = chronology26.withZone(dateTimeZone28);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("");
        boolean boolean71 = dateTimeZone28.equals((java.lang.Object) locale70);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 21L + "'", long62 == 21L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 234034520L + "'", long67 == 234034520L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date6.setDate(5);
        long long9 = date6.getTime();
        int int10 = date6.getDate();
        int int11 = date6.getMinutes();
        java.util.Date date18 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date25 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean26 = date18.after(date25);
        date25.setYear(11);
        int int29 = date25.getSeconds();
        int int30 = date25.getHours();
        boolean boolean31 = date6.before(date25);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Mar 05 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 6127589162000L + "'", long9 == 6127589162000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date25.toString(), "Tue Mar 07 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(352);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        int int19 = property11.getMaximumTextLength(locale16);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale16);
        calendar20.set((int) (short) -1, 95, 365);
        calendar20.setFirstDayOfWeek(34662);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:51.400" + "'", str8, "T09:39:51.400");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34662,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=95,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=365,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=51,MILLISECOND=391,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((java.lang.Object) "49", chronology12);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        long long48 = dateTimeZone44.previousTransition(87L);
        boolean boolean49 = dateTime12.equals((java.lang.Object) long48);
        org.joda.time.DateTime dateTime51 = dateTime12.withYearOfCentury((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) 360);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getStart();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTime dateTime66 = dateTime63.toDateTime(dateTimeZone65);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean68 = dateTime63.equals((java.lang.Object) locale67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 1, (long) 7, chronology71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval72.toPeriod(periodType73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) period74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay53.minus((org.joda.time.ReadablePeriod) period74);
        int int77 = period74.size();
        org.joda.time.DateTime dateTime78 = dateTime51.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTime dateTime80 = dateTime78.plusHours(5970);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 87L + "'", long48 == 87L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) dateTime28, dateTimeZone49);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = property52.roundHalfFloorCopy();
        boolean boolean54 = dateTimeZone18.equals((java.lang.Object) dateMidnight53);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.minuteOfHour();
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(chronology62);
        java.lang.String str65 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(66L, chronology62);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) dateTime55, chronology62);
        org.joda.time.DurationField durationField69 = chronology62.minutes();
        boolean boolean70 = dateTimeFieldType17.isSupported(chronology62);
        org.joda.time.DurationField durationField71 = chronology62.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long76 = chronology62.getDateTimeMillis(1020000, 32772, 122, 577);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime13.withMillisOfDay(13);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) 'u');
        org.joda.time.DateTime dateTime21 = dateTime17.withMillisOfDay(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = dateTime17.get(dateTimeFieldType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.setFirstDayOfWeek(36);
        calendar4.setTimeInMillis((long) 7);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572391601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=51,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=7,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=36,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime26.getZone();
        int int32 = property16.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay();
        int int34 = yearMonthDay33.getMonthOfYear();
        org.joda.time.LocalDate localDate35 = yearMonthDay33.toLocalDate();
        org.joda.time.DateTime dateTime36 = dateTime26.withFields((org.joda.time.ReadablePartial) localDate35);
        int int37 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime26.withDurationAdded((long) 10, 1);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime45 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate47 = localDate42.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime26.toDateTime(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(126, (int) 'a', 11, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        int int14 = dateTimeField12.getMinimumValue((long) 5);
        long long16 = dateTimeField12.roundHalfFloor(1644572353587L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1641168000000L + "'", long16 == 1641168000000L);
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] { languageRange15 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((java.lang.Object) str25, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay36, 1, locale44);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay36.minusDays((int) '#');
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight11.withFields((org.joda.time.ReadablePartial) yearMonthDay47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((long) 27);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withMillis(6L);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.weekyear();
        org.joda.time.DateMidnight dateMidnight54 = property53.roundCeilingCopy();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "lun" + "'", str45, "lun");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 7, chronology27);
        org.joda.time.Duration duration29 = interval28.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = dateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = dateTime10.getChronology();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) "561", chronology32);
        org.joda.time.LocalDate.Property property34 = localDate33.year();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology60.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("T09:35:45.160");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: T09:35:45.160 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        boolean boolean13 = calendar6.after((java.lang.Object) property11);
        org.joda.time.YearMonthDay yearMonthDay15 = property11.addToCopy(593);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572391800,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=51,MILLISECOND=800,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property2.addToCopy(37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay7 = property2.addNoWrapToCopy(352);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate.Property property9 = localDate1.era();
        org.joda.time.LocalDate localDate11 = localDate1.minusMonths(1969);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        int int13 = localDate11.getCenturyOfEra();
        int int14 = localDate11.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType15.getField(chronology21);
        java.util.Locale locale26 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = dateTimeField22.getAsText((long) 'u', locale29);
        int int34 = dateTimeField22.getMinimumValue(0L);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale35.getISO3Country();
        java.util.Set<java.lang.Character> charSet37 = locale35.getExtensionKeys();
        int int38 = dateTimeField22.getMaximumShortTextLength(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField22.getType();
        int int40 = localDate11.indexOf(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getRangeDurationType();
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 18 + "'", int13 == 18);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italy" + "'", str31, "Italy");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AM" + "'", str32, "AM");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JPN" + "'", str36, "JPN");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType41);
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = dateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField8 = dateTimeField6.getLeapDurationField();
        long long10 = dateTimeField6.remainder((long) 16);
        java.lang.String str12 = dateTimeField6.getAsShortText(4612278983L);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = localDate14.toDateTimeAtStartOfDay();
        int int18 = localDate14.getWeekyear();
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay();
        int int20 = localDate14.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.withMillis((long) (short) 100);
        int int59 = dateMidnight54.getWeekOfWeekyear();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readablePeriod21, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 1, (long) 7, chronology63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval64.toPeriod(periodType65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.plusMonths((int) '4');
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtStartOfDay();
        int int72 = localDate68.getWeekyear();
        org.joda.time.DateTime dateTime73 = localDate68.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period66, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight54.withPeriodAdded((org.joda.time.ReadablePeriod) period66, 6);
        org.joda.time.LocalDate localDate77 = localDate14.minus((org.joda.time.ReadablePeriod) period66);
        int int78 = localDate14.getCenturyOfEra();
        org.joda.time.LocalDate localDate80 = localDate14.withWeekyear(2);
        org.joda.time.LocalDate localDate82 = localDate14.minusWeeks((int) (short) 1);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = dateTimeField6.set((org.joda.time.ReadablePartial) localDate82, (-30800), intArray84, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "983" + "'", str12, "983");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 19 + "'", int78 == 19);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        boolean boolean3 = calendar0.isWeekDateSupported();
        long long4 = calendar0.getTimeInMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        long long40 = dateTimeZone36.previousTransition(87L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-5L), dateTimeZone36);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(11);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfMonth();
        org.joda.time.Chronology chronology47 = localDate45.getChronology();
        org.joda.time.LocalDate localDate49 = localDate45.minusDays(1);
        org.joda.time.LocalDate.Property property50 = localDate45.monthOfYear();
        int int51 = property50.getMinimumValueOverall();
        org.joda.time.LocalDate localDate52 = property50.withMaximumValue();
        org.joda.time.LocalDate localDate54 = property50.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime55 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.DateTime dateTime64 = localDate54.toDateTime(localTime55, dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean66 = localDate54.isSupported(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getDurationType();
        org.joda.time.DateTime.Property property68 = dateTime41.property(dateTimeFieldType65);
        org.joda.time.DateTime dateTime70 = property68.addWrapFieldToCopy(273);
        boolean boolean71 = calendar0.before((java.lang.Object) dateTime70);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(655, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572391967,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=51,MILLISECOND=967,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572391967L + "'", long4 == 1644572391967L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 87L + "'", long40 == 87L);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int31 = gregorianCalendar29.getActualMaximum((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusDays(1965);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.withDayOfMonth(273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 273 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278994 + "'", int31 == 292278994);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        int int5 = calendar4.getFirstDayOfWeek();
        calendar4.set(0, 269, (-1886));
        int int11 = calendar4.getMaximum((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar4.getActualMaximum(724);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 724");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572392047,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=52,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=269,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=-1886,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=52,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278994 + "'", int11 == 292278994);
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy(32);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((long) 12);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight44.withChronology(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.withDayOfMonth(37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateMidnight55);
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay16.getFieldTypes();
        org.joda.time.DateTime dateTime19 = dateTime14.withFields((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime31.minusMonths(4);
        org.joda.time.DateTime.Property property36 = dateTime31.monthOfYear();
        org.joda.time.Chronology chronology37 = dateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime21.toMutableDateTime(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(927, 0, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 927 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone17.isLocalDateTimeGap(localDateTime23);
        long long26 = dateTimeZone17.convertUTCToLocal((long) 31);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone17.isLocalDateTimeGap(localDateTime27);
        boolean boolean29 = dateTimeZone17.isFixed();
        int int31 = dateTimeZone17.getOffset(0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 41L + "'", long26 == 41L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((java.lang.Object) str14, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 1, (long) 7, chronology24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        long long30 = chronology20.add((org.joda.time.ReadablePeriod) period27, 87L, 1);
        java.util.Locale.LanguageRange languageRange32 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] { languageRange32 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList40);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(11);
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.Chronology chronology48 = localDate46.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((java.lang.Object) str42, chronology48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 1, (long) 7, chronology52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval53.toPeriod(periodType54);
        long long58 = chronology48.add((org.joda.time.ReadablePeriod) period55, 87L, 1);
        int[] intArray61 = chronology20.get((org.joda.time.ReadablePeriod) period55, (long) 10, (long) 13);
        org.joda.time.DurationField durationField62 = chronology20.months();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) 'u', chronology20);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 53, 1644572179680L, chronology20);
        org.joda.time.DateTimeField dateTimeField65 = chronology20.yearOfEra();
        boolean boolean66 = dateTimeField65.isLenient();
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 93L + "'", long30 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 93L + "'", long58 == 93L);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        boolean boolean8 = dateTimeZone5.isFixed();
        int int10 = dateTimeZone5.getOffsetFromLocal((long) 10);
        long long14 = dateTimeZone5.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 11, dateTimeZone5);
        java.lang.String str17 = dateTimeZone5.getShortName(1961L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay51 = dateTime27.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime27.getZone();
        long long54 = dateTimeZone5.getMillisKeepLocal(dateTimeZone52, 1644572130064L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0, (int) (short) 1, 0, dateTimeZone5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 87L + "'", long14 == 87L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572130064L + "'", long54 == 1644572130064L);
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration39, 106);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.minusDays(12);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusMonths(65);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays(2922789);
        org.joda.time.DateMidnight.Property property50 = dateMidnight47.weekyear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.parse("27 f\351vr. 1970 18:09:00", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray10 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap14);
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList25);
        java.util.Set<java.lang.String> strSet28 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.String str30 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale.LanguageRange languageRange32 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] { languageRange32 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList40);
        java.util.Set<java.lang.String> strSet43 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet43);
        java.lang.String str45 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray54 = new java.lang.String[] { "11 Feb 2022 09:35:57 GMT", "java.util.GregorianCalendar[time=1644572152906,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=52,MILLISECOND=906,ZONE_OFFSET=0,DST_OFFSET=0]", "secondOfMinute", "francese", "11 f\351vr. 2022 09:35:59", "T09:35:52.177", "JPN", "days" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.lang.String str57 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange languageRange59 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] { languageRange59 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray68 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap72 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList73 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, strMap72);
        java.util.Locale.LanguageRange languageRange75 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] { languageRange75 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strList83);
        java.util.Set<java.lang.String> strSet86 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strSet86);
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList73, (java.util.Collection<java.lang.String>) strList87);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strList87, filteringMode89);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(languageRangeList73);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear((int) (short) 1);
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category12, locale13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfSecond();
        int int24 = dateTimeField21.getDifference((long) 11, (long) 4);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.lang.String str28 = dateTimeField21.getAsShortText(1644572124561L, locale26);
        java.util.Locale.setDefault(category12, locale26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.Locale.setDefault(category12, locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter11.withLocale(locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.parse("Sat Jan 24 23:34:00 UTC 1970", dateTimeFormatter33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str27, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "561" + "'", str28, "561");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        int int9 = dateTimeField6.getDifference(93L, (long) 13920);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        int int24 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDate21);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.lang.String str28 = dateTimeField18.getAsText((long) 22, locale27);
        java.lang.String str29 = locale27.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale27.getDisplayName(locale33);
        java.lang.String str37 = locale27.getDisplayVariant();
        java.lang.String str38 = dateTimeField6.getAsText((long) (short) 10, locale27);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale40.getCountry();
        java.util.Locale locale44 = new java.util.Locale("271", "T09:35:18.216");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime60 = dateTime54.toDateTime(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone64);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getStart();
        org.joda.time.DateTime dateTime72 = dateTime70.withDayOfWeek(4);
        org.joda.time.DateTime dateTime73 = dateTime70.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime76 = dateTime70.toDateTime(dateTimeZone75);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((java.lang.Object) dateTime54, dateTimeZone75);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight80 = property78.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.lang.String str85 = dateTimeZone82.getName((long) (byte) 10, locale84);
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str87 = property78.getAsText(locale84);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale84.getDisplayName(locale88);
        java.lang.String str90 = locale44.getDisplayCountry(locale88);
        java.lang.String str91 = locale40.getDisplayName(locale44);
        java.lang.String str92 = locale27.getDisplayVariant(locale44);
        java.util.Set<java.lang.Character> charSet93 = locale27.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-13827) + "'", int9 == (-13827));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2922789 + "'", int24 == 2922789);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "19" + "'", str28, "19");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fra" + "'", str35, "fra");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "IT" + "'", str41, "IT");
        org.junit.Assert.assertEquals(locale44.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.010" + "'", str85, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "fran\347ais (France)" + "'", str89, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "T09:35:18.216" + "'", str90, "T09:35:18.216");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Italian (Italy)" + "'", str91, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(charSet93);
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        java.util.TimeZone timeZone0 = null;
        java.util.Locale locale1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0, locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.DateMidnight.Property property56 = dateMidnight33.era();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        org.joda.time.DateMidnight dateMidnight58 = property56.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.era();
        org.joda.time.DateMidnight dateMidnight60 = property59.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((-61747120148658L), dateTimeZone6);
        int int11 = localDate10.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 13 + "'", int11 == 13);
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int7 = calendar6.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add((int) (byte) -1, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572392784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=52,MILLISECOND=784,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(12, 37);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(1644572267982L, dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate11 = localDate6.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime22.toDateTime(dateTimeZone27);
        int int29 = dateTime28.getYearOfCentury();
        org.joda.time.DateTime dateTime30 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = dateTime28.isEqual(93L);
        int int33 = dateTime28.getHourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime28.plusMinutes((int) 'u');
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        boolean boolean43 = durationFieldType36.isSupported(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology42);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.secondOfMinute();
        org.joda.time.DateTime dateTime48 = dateTime35.toDateTime(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(2005, 2789, 3600011, 58, 34567, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Locale locale14 = locale10.stripExtensions();
        int int15 = property6.getMaximumTextLength(locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay17 = property6.setCopy(173);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 173 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fra" + "'", str12, "fra");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Francia" + "'", str13, "Francia");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        long long13 = interval11.toDurationMillis();
        org.joda.time.Interval interval14 = interval11.toInterval();
        java.util.Locale.LanguageRange languageRange16 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange16 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate30 = localDate28.withDayOfYear(11);
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfMonth();
        org.joda.time.Chronology chronology32 = localDate30.getChronology();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((java.lang.Object) str26, chronology32);
        long long34 = interval33.getStartMillis();
        org.joda.time.Interval interval35 = interval33.toInterval();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        long long45 = interval44.getStartMillis();
        org.joda.time.Interval interval46 = interval44.toInterval();
        org.joda.time.Chronology chronology47 = interval44.getChronology();
        boolean boolean48 = interval33.isBefore((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Interval interval49 = interval11.gap((org.joda.time.ReadableInterval) interval44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval51 = interval44.withStartMillis((long) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572392869L + "'", long34 == 1644572392869L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(interval49);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withYear(11);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight25.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight33.toYearMonthDay();
        int int35 = dateMidnight33.getHourOfDay();
        int int36 = dateMidnight33.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.LocalDate localDate14 = property8.addToCopy(13);
        org.joda.time.LocalDate localDate15 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property8.addToCopy(999);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate17.withDayOfYear(34703);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34703 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "71" + "'", str12, "71");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("55");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category7, locale8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfSecond();
        int int19 = dateTimeField16.getDifference((long) 11, (long) 4);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = dateTimeField16.getAsShortText(1644572124561L, locale21);
        java.util.Locale.setDefault(category7, locale21);
        java.util.Locale locale25 = java.util.Locale.getDefault(category7);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category7, locale26);
        java.util.Locale.Builder builder28 = builder6.setLocale(locale26);
        java.util.Locale.Builder builder30 = builder28.addUnicodeLocaleAttribute("era");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("DateTimeField[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[weekyear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str22, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "561" + "'", str23, "561");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.year();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology6);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate6.withDayOfYear((int) '#');
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime22.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.minusMonths(31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusMonths(2);
        boolean boolean34 = localDate6.isAfter((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval(31536034534L, 1644572225039L);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.LocalDate localDate39 = localDate6.plus((org.joda.time.ReadablePeriod) period38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate6.withWeekOfWeekyear(655);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 655 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.time.Instant instant7 = calendar6.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.util.Date date9 = java.util.Date.from(instant7);
        int int10 = date9.getHours();
        java.lang.String str11 = date9.toGMTString();
        java.time.Instant instant12 = date9.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572392988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=52,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:39:52 UTC 2022");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:39:52 UTC 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11 Feb 2022 09:39:52 GMT" + "'", str11, "11 Feb 2022 09:39:52 GMT");
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int8 = yearMonthDay4.getYear();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) yearMonthDay4);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = yearMonthDay10.getValue(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        java.lang.String str10 = dateTimeZone3.getShortName((long) 35);
        int int12 = dateTimeZone3.getStandardOffset(1676108246355L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setScript("Cina");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setExtension(' ', "Property[centuryOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate.Property property9 = localDate1.era();
        org.joda.time.LocalDate localDate10 = property9.withMinimumValue();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay15.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = dateTimeZone25.getName((long) 11, locale28);
        java.lang.String str30 = dateTimeZone18.getName(1644572138904L, locale28);
        org.joda.time.Interval interval31 = localDate10.toInterval(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime41.minusMonths(4);
        org.joda.time.DateTime.Property property46 = dateTime41.monthOfYear();
        org.joda.time.Chronology chronology47 = dateTime41.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.Interval interval49 = interval31.withChronology(chronology47);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateMidnight14.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        int int9 = dateTimeField8.getMaximumValue();
        long long11 = dateTimeField8.remainder((long) 49);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 999 + "'", int9 == 999);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) 13, chronology20);
        org.joda.time.Chronology chronology24 = chronology20.withUTC();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate31 = localDate26.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        org.joda.time.LocalDate.Property property33 = localDate31.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone34);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = dateTimeZone34.getName((long) 11, locale37);
        int int39 = property33.getMaximumTextLength(locale37);
        java.lang.String str40 = property33.toString();
        org.joda.time.LocalDate localDate41 = property33.roundHalfFloorCopy();
        java.util.Date date42 = localDate41.toDate();
        long long44 = chronology24.set((org.joda.time.ReadablePartial) localDate41, 66269664034534L);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(28L, chronology24);
        boolean boolean46 = localDate12.isAfter((org.joda.time.ReadablePartial) yearMonthDay45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField48 = yearMonthDay45.getField(5970);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 5970");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[yearOfCentury]" + "'", str40, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 01 00:00:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31536034534L + "'", long44 == 31536034534L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        long long19 = interval18.getStartMillis();
        org.joda.time.DateTime dateTime20 = interval18.getEnd();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.LocalDate.Property property27 = localDate24.dayOfWeek();
        org.joda.time.LocalDate localDate28 = property27.roundCeilingCopy();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = property27.getAsText(locale29);
        org.joda.time.LocalDate localDate31 = property27.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime32 = dateTime20.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTime.Property property33 = dateTime20.monthOfYear();
        java.lang.String str34 = property33.toString();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572393267L + "'", long19 == 1644572393267L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u661f\u671f\u65e5" + "'", str30, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[monthOfYear]" + "'", str34, "Property[monthOfYear]");
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int10 = dateTimeField8.get(0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay2.minusDays(13920);
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(11);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.Chronology chronology30 = localDate28.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((java.lang.Object) str24, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 1, (long) 7, chronology34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval35.toPeriod(periodType36);
        long long40 = chronology30.add((org.joda.time.ReadablePeriod) period37, 87L, 1);
        java.util.Locale.LanguageRange languageRange42 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] { languageRange42 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList50);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology58 = localDate56.getChronology();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((java.lang.Object) str52, chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 1, (long) 7, chronology62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval63.toPeriod(periodType64);
        long long68 = chronology58.add((org.joda.time.ReadablePeriod) period65, 87L, 1);
        int[] intArray71 = chronology30.get((org.joda.time.ReadablePeriod) period65, (long) 10, (long) 13);
        java.lang.String str72 = period65.toString();
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.YearMonthDay.Property property74 = yearMonthDay12.year();
        int int75 = property74.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 93L + "'", long40 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 93L + "'", long68 == 93L);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.006S" + "'", str72, "PT0.006S");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-292275054) + "'", int75 == (-292275054));
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(11);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.Chronology chronology11 = localDate9.getChronology();
        boolean boolean12 = durationFieldType5.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(23, 3, 31, 0, 6, chronology11);
        org.joda.time.DateTimeField dateTimeField19 = chronology11.yearOfEra();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.LocalDate localDate27 = localDate23.minusDays(1);
        org.joda.time.LocalDate.Property property28 = localDate23.monthOfYear();
        int int29 = property28.getMinimumValueOverall();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime33 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localDate32.toDateTime(localTime33, dateTimeZone37);
        java.util.Date date43 = localDate32.toDate();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate32, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField19.getType();
        boolean boolean47 = dateTimeField19.isSupported();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Apr 11 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        java.lang.Integer int6 = dateTimeFormatter3.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(35);
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set((int) (short) -1, 7, (int) 'u', (int) (short) 10, 22);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-62170551426605,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=329,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=53,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int7 = calendar6.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withOffsetParsed();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withLocale(locale15);
        java.lang.Integer int17 = dateTimeFormatter14.getPivotYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset((long) (byte) 10);
        boolean boolean23 = dateTimeZone20.isFixed();
        int int25 = dateTimeZone20.getOffsetFromLocal((long) 10);
        long long29 = dateTimeZone20.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 11, dateTimeZone20);
        java.lang.String str32 = dateTimeZone20.getShortName(1961L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getStart();
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfWeek(4);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime58.toDateTime(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, dateTimeZone63);
        org.joda.time.TimeOfDay timeOfDay66 = dateTime42.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime42.getZone();
        long long69 = dateTimeZone20.getMillisKeepLocal(dateTimeZone67, 1644572130064L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter14.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, 19);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(1644572138904L, dateTimeZone75);
        java.util.Locale locale78 = java.util.Locale.JAPAN;
        java.lang.String str79 = locale78.getISO3Country();
        java.lang.String str80 = dateTimeZone75.getName(150810L, locale78);
        java.lang.String str81 = dateTimeZone20.getName(0L, locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = calendar6.getDisplayName(55, 11, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572393407,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=53,MILLISECOND=407,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1644572130054L + "'", long69 == 1644572130054L);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "JPN" + "'", str79, "JPN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+07:19" + "'", str80, "+07:19");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(575, (-716240));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -716240");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 100, chronology19);
        org.joda.time.LocalDate localDate24 = localDate22.plusYears(11);
        org.joda.time.LocalDate.Property property25 = localDate22.weekyear();
        org.joda.time.LocalDate.Property property26 = localDate22.dayOfWeek();
        org.joda.time.LocalDate localDate28 = property26.addWrapFieldToCopy(2719);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withMillis((long) (short) 100);
        int int52 = dateMidnight47.getWeekOfWeekyear();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readablePeriod14, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 7, chronology56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval57.toPeriod(periodType58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate63 = localDate61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtStartOfDay();
        int int65 = localDate61.getWeekyear();
        org.joda.time.DateTime dateTime66 = localDate61.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 6);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight47.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight47.minus(11L);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        java.lang.String str80 = dateTimeZone77.getName((long) (byte) 10, locale79);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone77);
        org.joda.time.Interval interval82 = interval81.toInterval();
        long long83 = interval82.getStartMillis();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Interval interval85 = interval82.withDurationBeforeEnd(readableDuration84);
        long long86 = interval82.toDurationMillis();
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval82.toPeriod(periodType87);
        int int89 = period88.size();
        int int90 = period88.size();
        org.joda.time.Period period91 = period88.toPeriod();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight73.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate((long) 9);
        boolean boolean95 = period91.equals((java.lang.Object) localDate94);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay96.plusMonths(122);
        org.joda.time.YearMonthDay.Property property99 = yearMonthDay96.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.010" + "'", str80, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(yearMonthDay98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("+07:19");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("French (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: French (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(11);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.Chronology chronology30 = localDate28.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((java.lang.Object) str24, chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 1, (long) 7, chronology34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval35.toPeriod(periodType36);
        long long40 = chronology30.add((org.joda.time.ReadablePeriod) period37, 87L, 1);
        org.joda.time.Interval interval41 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        java.lang.String str42 = interval8.toString();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        boolean boolean50 = durationFieldType43.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.minuteOfDay();
        org.joda.time.DurationField durationField55 = chronology49.days();
        boolean boolean56 = interval8.equals((java.lang.Object) chronology49);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = dateTimeZone60.getName((long) (byte) 10, locale62);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone60);
        org.joda.time.Interval interval65 = interval64.toInterval();
        long long66 = interval65.getStartMillis();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        long long69 = interval65.toDurationMillis();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval65.toPeriod(periodType70);
        long long74 = chronology49.add((org.joda.time.ReadablePeriod) period71, (long) 43, 31);
        org.joda.time.DurationField durationField75 = chronology49.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 93L + "'", long40 == 93L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010" + "'", str42, "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 43L + "'", long74 == 43L);
        org.junit.Assert.assertNotNull(durationField75);
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        int int35 = dateMidnight32.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.plusDays(27);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.plusDays(51);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(15);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.LocalDate localDate20 = localDate16.minusDays(1);
        org.joda.time.LocalDate.Property property21 = localDate16.monthOfYear();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property21.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDate25.toDateTime(localTime26, dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone30.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime38 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone30);
        int int40 = dateTimeZone30.getStandardOffset(1644572134751L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyearOfCentury();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay3.toDateMidnight();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property7.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight10 = property7.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        int int29 = dateTimeZone26.getOffsetFromLocal((long) '#');
        long long31 = dateTimeZone26.convertUTCToLocal((long) 11);
        java.lang.String str33 = dateTimeZone26.getNameKey(1644572124561L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        java.util.TimeZone timeZone43 = dateTimeZone38.toTimeZone();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        java.lang.String str57 = locale55.getISO3Language();
        java.lang.String str58 = dateTimeField50.getAsText(14, locale55);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone43, locale55);
        java.lang.String str60 = dateTimeZone26.getName(1L, locale55);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight11.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((-716240));
        long long65 = dateTimeZone26.getMillisKeepLocal(dateTimeZone63, 77L);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 86399999, dateTimeZone63);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 21L + "'", long31 == 21L);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fra" + "'", str57, "fra");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "14" + "'", str58, "14");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572393712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=53,MILLISECOND=722,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 716327L + "'", long65 == 716327L);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(54000, 34536);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        int int23 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay25 = property11.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate26 = yearMonthDay25.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime60 = dateTime54.toDateTime(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, dateTimeZone59);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = property62.roundHalfFloorCopy();
        boolean boolean64 = dateTimeZone28.equals((java.lang.Object) dateMidnight63);
        int int66 = dateTimeZone28.getOffsetFromLocal(6127761962000L);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(100L, dateTimeZone28);
        boolean boolean68 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime69 = localDate26.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.Interval interval72 = property71.toInterval();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.lang.String str79 = dateTimeZone76.getName((long) (byte) 10, locale78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone76);
        org.joda.time.Interval interval81 = interval80.toInterval();
        long long82 = interval81.getStartMillis();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Interval interval84 = interval81.withDurationBeforeEnd(readableDuration83);
        org.joda.time.DateTime dateTime85 = interval84.getEnd();
        org.joda.time.Duration duration86 = interval84.toDuration();
        org.joda.time.MutableInterval mutableInterval87 = interval84.toMutableInterval();
        boolean boolean88 = interval72.isAfter((org.joda.time.ReadableInterval) mutableInterval87);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572393848,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=53,MILLISECOND=848,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology5);
        java.lang.String str8 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int31 = gregorianCalendar29.getActualMaximum((int) (byte) 1);
        java.util.TimeZone timeZone32 = gregorianCalendar29.getTimeZone();
        int int33 = gregorianCalendar29.getWeeksInWeekYear();
        gregorianCalendar29.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = gregorianCalendar29.getGreatestMinimum(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278994 + "'", int31 == 292278994);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.Chronology chronology15 = dateTime9.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay18.toDateMidnight(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.minus(readablePeriod25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay26.year();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.YearMonthDay yearMonthDay29 = property27.withMaximumValue();
        int int30 = property27.get();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale34);
        int int38 = property27.getMaximumTextLength(locale34);
        int int39 = property27.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay41 = property27.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate42 = yearMonthDay41.toLocalDate();
        org.joda.time.DateTime dateTime43 = dateTime9.withFields((org.joda.time.ReadablePartial) yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1969 + "'", int30 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572393945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=53,MILLISECOND=945,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.LocalDate localDate18 = dateTime16.toLocalDate();
        org.joda.time.DateTime dateTime20 = dateTime16.withDayOfYear(56);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setUnicodeLocaleKeyword("T09:37:57.209", "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: T09:37:57.209 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology6.weekyearOfCentury();
        long long17 = dateTimeField15.remainder(3283200000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3283200000L + "'", long17 == 3283200000L);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtMidnight();
        int int3 = dateTime2.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime2.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) 100, 70);
        long long13 = dateTimeField7.add(87L, 3024000100L);
        java.lang.String str15 = dateTimeField7.getAsText(915148800019L);
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField7.getMaximumValue(readablePartial16);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3024000100L + "'", long10 == 3024000100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 130636804320000087L + "'", long13 == 130636804320000087L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e0a\u5348" + "'", str15, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        int int16 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        long long27 = dateTimeField24.add((long) 100, 70);
        boolean boolean28 = dateTimeField24.isLenient();
        int int29 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime15.withField(dateTimeFieldType30, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3024000100L + "'", long27 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromDateFields(date6);
        int int17 = date6.getDay();
        java.lang.String str18 = date6.toLocaleString();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2164-3-7 4:06:02" + "'", str18, "2164-3-7 4:06:02");
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone1 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = calendar0.get(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572394300,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=54,MILLISECOND=300,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        int int7 = property6.get();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addWrapFieldToCopy(34534);
        org.joda.time.TimeOfDay timeOfDay10 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property6.setCopy(35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = property6.setCopy(34565);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34565 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54 + "'", int7 == 54);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay14 = property11.addNoWrapToCopy(1003);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = property11.setCopy("T09:38:03.577");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:38:03.577\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:54.338" + "'", str8, "T09:39:54.338");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale3);
        calendar8.setMinimalDaysInFirstWeek(0);
        calendar8.add(8, 1429331);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str5, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=866103961194538,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=29415,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=272,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=54,MILLISECOND=538,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ISOChronology[UTC]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        boolean boolean15 = calendar6.isWeekDateSupported();
        calendar6.set(43, 577, 34546, 33, 106, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar6.getMaximum(1932);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1932");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=43,MONTH=577,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=34546,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=33,MINUTE=106,SECOND=1,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add((int) (byte) 1, (int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        long long5 = calendar0.getTimeInMillis();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = localDate9.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withWeekyear(3);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTime(localTime19, dateTimeZone23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology31);
        org.joda.time.DateTime dateTime33 = yearMonthDay32.toDateTimeAtMidnight();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay32.toDateMidnight(dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay32.minus(readablePeriod39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.year();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfWeek(4);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTimeZone62.getName((long) (byte) 10, locale64);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone62);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getStart();
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfWeek(4);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime74 = dateTime68.toDateTime(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((java.lang.Object) dateTime52, dateTimeZone73);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight78 = property76.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = dateTimeZone80.getName((long) (byte) 10, locale82);
        boolean boolean84 = locale82.hasExtensions();
        java.lang.String str85 = property76.getAsText(locale82);
        java.lang.String str86 = property41.getAsShortText(locale82);
        java.lang.String str87 = dateTimeZone23.getShortName(16L, locale82);
        java.lang.String str88 = locale82.getVariant();
        java.util.Set<java.lang.String> strSet89 = locale82.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap90 = calendar0.getDisplayNames(360000000, (int) 'x', locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1676108394639,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=54,MILLISECOND=639,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1676108394639L + "'", long5 == 1676108394639L);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1969" + "'", str86, "1969");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.010" + "'", str87, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay3.getFieldTypes();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 34536);
        boolean boolean15 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime16 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:54.692" + "'", str8, "T09:39:54.692");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromCalendarFields(calendar6);
        calendar6.roll(0, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths(4);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withChronology(chronology17);
        org.joda.time.Chronology chronology19 = dateTime12.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(0, 52, 15, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DateTimeField[hourOfDay]");
        java.lang.String str3 = locale1.getExtension('a');
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        int[] intArray58 = chronology17.get((org.joda.time.ReadablePeriod) period52, (long) 10, (long) 13);
        org.joda.time.DurationField durationField59 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField60 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology17.yearOfCentury();
        long long65 = chronology17.add((long) 3600011, (long) 600, 122);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3673211L + "'", long65 == 3673211L);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int13 = localDate6.get(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate20 = localDate15.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate20.weekyear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = property21.getLocalDate();
        int int24 = localDate23.getCenturyOfEra();
        boolean boolean25 = localDate6.isAfter((org.joda.time.ReadablePartial) localDate23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = localDate6.withYearOfCentury(779);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 779 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = localDate1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        long long16 = interval15.getStartMillis();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        long long19 = interval15.toDurationMillis();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval15.toPeriod(periodType20);
        int int22 = period21.size();
        int int23 = period21.size();
        org.joda.time.Period period24 = period21.toPeriod();
        org.joda.time.LocalDate localDate25 = localDate1.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.LocalDate localDate27 = localDate1.minusYears(36);
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withWeekOfWeekyear(40);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight19 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime29.getZone();
        org.joda.time.DateTime dateTime35 = dateTime16.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) 32769, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology36.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(20, 8, 70, 34565, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = locale18.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = property11.setCopy("T09:37:56.466", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:56.466\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.Interval interval50 = property2.toInterval();
        java.util.Locale.LanguageRange languageRange52 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] { languageRange52 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList60);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.withDayOfYear(11);
        org.joda.time.LocalDate.Property property67 = localDate66.dayOfMonth();
        org.joda.time.Chronology chronology68 = localDate66.getChronology();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((java.lang.Object) str62, chronology68);
        long long70 = interval69.getStartMillis();
        boolean boolean71 = interval50.overlaps((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 1, (long) 7, chronology74);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = dateTimeZone80.getName((long) (byte) 10, locale82);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone80);
        org.joda.time.Interval interval85 = interval84.toInterval();
        long long86 = interval85.getStartMillis();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Interval interval88 = interval85.withDurationBeforeEnd(readableDuration87);
        long long89 = interval85.toDurationMillis();
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = interval85.toPeriod(periodType90);
        int int92 = period91.size();
        org.joda.time.MutablePeriod mutablePeriod93 = period91.toMutablePeriod();
        org.joda.time.Interval interval94 = interval75.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period91);
        org.joda.time.Interval interval95 = interval75.toInterval();
        boolean boolean96 = interval69.isAfter((org.joda.time.ReadableInterval) interval75);
        org.joda.time.DateTime dateTime97 = interval69.getEnd();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644572395159L + "'", long70 == 1644572395159L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.property(dateTimeFieldType36);
        int int39 = property38.get();
        java.lang.String str40 = property38.getAsShortText();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.minusMonths(19);
        int int46 = yearMonthDay43.size();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay43.plus(readablePeriod47);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay43.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.minusDays(269);
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay52.toDateMidnight();
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight55 = property54.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight57 = property54.setCopy(17);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay();
        int int59 = yearMonthDay58.getMonthOfYear();
        org.joda.time.LocalDate localDate60 = yearMonthDay58.toLocalDate();
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay58.dayOfMonth();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate65 = localDate63.withDayOfYear(11);
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfMonth();
        org.joda.time.Chronology chronology67 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfSecond();
        int int71 = dateTimeField68.getDifference((long) 11, (long) 4);
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = locale73.getDisplayCountry();
        java.lang.String str75 = dateTimeField68.getAsShortText(1644572124561L, locale73);
        java.lang.String str76 = property61.getAsShortText(locale73);
        java.lang.String str77 = property54.getAsText(locale73);
        java.lang.String str78 = property54.getAsShortText();
        org.joda.time.DateMidnight dateMidnight80 = property54.addToCopy((long) 13896);
        int int81 = property38.getDifference((org.joda.time.ReadableInstant) dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str74, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "561" + "'", str75, "561");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "11" + "'", str76, "11");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "19" + "'", str77, "19");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "19" + "'", str78, "19");
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1389599) + "'", int81 == (-1389599));
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval11.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime22.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        boolean boolean30 = interval11.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        java.lang.String str41 = dateTimeZone34.getShortName((long) 35);
        org.joda.time.DateTime dateTime42 = dateTime28.toDateTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus(readablePeriod44);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plusDays(31);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.minusYears(264);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.year();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withYearOfCentury((int) (short) 10);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        java.lang.String str31 = dateTimeField30.getName();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "monthOfYear" + "'", str31, "monthOfYear");
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withMillis((long) (short) 100);
        int int47 = dateMidnight42.getWeekOfWeekyear();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readablePeriod9, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtStartOfDay();
        int int60 = localDate56.getWeekyear();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period54, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 6);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight42.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight42.minus(11L);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone72);
        org.joda.time.Interval interval77 = interval76.toInterval();
        long long78 = interval77.getStartMillis();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Interval interval80 = interval77.withDurationBeforeEnd(readableDuration79);
        long long81 = interval77.toDurationMillis();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval77.toPeriod(periodType82);
        int int84 = period83.size();
        int int85 = period83.size();
        org.joda.time.Period period86 = period83.toPeriod();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight68.minus((org.joda.time.ReadablePeriod) period86);
        int[] intArray89 = chronology6.get((org.joda.time.ReadablePeriod) period86, 1644572161256L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = period86.getFieldType(405);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 2719, 1, 9, 36, 1, 256]");
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        int int7 = dateTime6.getHourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        org.joda.time.DateTime dateTime17 = dateTime13.withSecondOfMinute((int) ' ');
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 1, (long) 7, chronology45);
        org.joda.time.Duration duration47 = interval46.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime49 = dateTime28.minus((org.joda.time.ReadableDuration) duration47);
        int int50 = dateTime49.getCenturyOfEra();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property53 = dateTime52.monthOfYear();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(11);
        org.joda.time.LocalDate.Property property58 = localDate57.dayOfMonth();
        org.joda.time.Chronology chronology59 = localDate57.getChronology();
        org.joda.time.LocalDate.Property property60 = localDate57.dayOfWeek();
        org.joda.time.LocalDate localDate61 = property60.roundCeilingCopy();
        int int62 = property53.compareTo((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate localDate64 = localDate61.plusWeeks((int) '#');
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset((long) (byte) 10);
        boolean boolean69 = dateTimeZone66.isFixed();
        int int71 = dateTimeZone66.getOffsetFromLocal((long) 10);
        long long75 = dateTimeZone66.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        java.lang.String str82 = locale80.getDisplayCountry();
        java.lang.String str83 = dateTimeZone66.getName(10L, locale80);
        org.joda.time.Interval interval84 = localDate64.toInterval(dateTimeZone66);
        org.joda.time.DateTime dateTime85 = dateTime49.withZoneRetainFields(dateTimeZone66);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Interval interval89 = new org.joda.time.Interval((long) 1, (long) 7, chronology88);
        org.joda.time.Duration duration90 = interval89.toDuration();
        org.joda.time.DateTime dateTime91 = dateTime49.minus((org.joda.time.ReadableDuration) duration90);
        org.joda.time.DateTime dateTime92 = dateTime18.minus((org.joda.time.ReadableDuration) duration90);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 97L + "'", long75 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str82, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-1L), (long) 9);
        org.joda.time.DurationField durationField29 = chronology17.weeks();
        org.joda.time.DurationField durationField30 = chronology17.centuries();
        org.joda.time.DurationField durationField31 = chronology17.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology17.getDateTimeMillis(1644572130023L, 970, (int) (short) 100, 1439, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        java.util.Date date3 = new java.util.Date(954, (int) (short) 100, 12);
        int int4 = date3.getMonth();
        java.lang.String str5 = date3.toLocaleString();
        org.junit.Assert.assertEquals(date3.toString(), "Fri May 12 00:00:00 UTC 2862");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2862-5-12 0:00:00" + "'", str5, "2862-5-12 0:00:00");
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        int int11 = yearMonthDay2.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        java.lang.String str9 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str9, "DateTimeField[clockhourOfHalfday]");
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight17 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime27.getZone();
        org.joda.time.DateTime dateTime33 = dateTime14.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(35, 579, 53, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 1, (long) 7, chronology14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = interval15.toPeriod(periodType16);
        org.joda.time.Interval interval18 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.Duration duration23 = interval22.toDuration();
        boolean boolean24 = interval11.overlaps((org.joda.time.ReadableInterval) interval22);
        boolean boolean26 = interval11.isAfter(14400004L);
        long long27 = interval11.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval11.overlaps(readableInterval28);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 22, chronology18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.DateTime dateTime25 = yearMonthDay24.toDateTimeAtMidnight();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.minus(readablePeriod31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.year();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.YearMonthDay yearMonthDay35 = property33.withMaximumValue();
        long long37 = chronology18.set((org.joda.time.ReadablePartial) yearMonthDay35, (long) 2000);
        int int38 = yearMonthDay35.getYear();
        int int39 = yearMonthDay35.size();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9223372017043202000L + "'", long37 == 9223372017043202000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        java.util.Set<java.lang.String> strSet12 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap16);
        java.util.Locale.LanguageRange languageRange19 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] { languageRange19 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale36 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale.LanguageRange languageRange44 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] { languageRange44 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale61 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.Locale.LanguageRange languageRange69 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] { languageRange69 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale86 = java.util.Locale.FRANCE;
        java.lang.String str87 = dateTimeZone84.getName((long) (byte) 10, locale86);
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale86 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.Locale locale92 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList93, filteringMode94);
        java.util.Locale locale96 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.010" + "'", str87, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode94.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNull(locale96);
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        long long19 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property57 = dateMidnight52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        int int60 = dateTime15.get(dateTimeField58);
        org.joda.time.DateTime dateTime62 = dateTime15.minusMillis(65);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.property(dateTimeFieldType36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.minus((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekOfWeekyear(924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 924 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        int int13 = dateTime11.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.weekyears();
        org.joda.time.DateTime dateTime23 = dateTime11.toDateTime(chronology19);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        java.util.Calendar calendar13 = builder12.build();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder15 = builder12.setLocale(locale14);
        java.util.Calendar.Builder builder20 = builder12.setTimeOfDay(954, 0, 600, 100);
        java.util.Calendar.Builder builder24 = builder12.setDate(22, 1971, 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=24016348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2731,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=19,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, dateTimeZone38);
        long long42 = dateTimeZone38.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(0L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone38);
        org.joda.time.Interval interval45 = localDate1.toInterval(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval47 = interval45.withStartMillis(1644537599990L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 87L + "'", long42 == 87L);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        java.lang.String str10 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        int int13 = yearMonthDay12.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = property48.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withMonthOfYear(3);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.withCenturyOfEra(58);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = timeOfDay58.getFieldTypes();
        boolean boolean60 = timeOfDay56.isAfter((org.joda.time.ReadablePartial) timeOfDay58);
        int int61 = timeOfDay58.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = timeOfDay58.toString(dateTimeFormatter62);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay58.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property66 = timeOfDay58.secondOfMinute();
        int int67 = property66.getMinimumValueOverall();
        org.joda.time.DurationField durationField68 = property66.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay70 = property66.addWrapFieldToCopy(16);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight50.withFields((org.joda.time.ReadablePartial) timeOfDay70);
        int[] intArray72 = timeOfDay70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) yearMonthDay12, 15, intArray72, 5970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 15");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "T09:39:56.028" + "'", str63, "T09:39:56.028");
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[9, 39, 12, 28]");
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay18.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusWeeks(13);
        long long22 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight23 = property15.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight25 = property15.setCopy(593);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        int int37 = dateMidnight32.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.minusWeeks((int) 'a');
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusWeeks(8);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(11);
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.Chronology chronology48 = localDate46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfSecond();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) 13, chronology48);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minus(1644572124561L);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight51.plusDays(34536);
        org.joda.time.DateMidnight.Property property56 = dateMidnight51.weekyear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology58);
        org.joda.time.DateTime dateTime60 = yearMonthDay59.toDateTimeAtMidnight();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        int int64 = dateTimeZone62.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay59.toDateMidnight(dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay59.minus(readablePeriod66);
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay67.year();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        org.joda.time.YearMonthDay yearMonthDay70 = property68.withMaximumValue();
        int int71 = property68.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property68.getFieldType();
        org.joda.time.DateMidnight.Property property73 = dateMidnight51.property(dateTimeFieldType72);
        org.joda.time.DateMidnight.Property property74 = dateMidnight41.property(dateTimeFieldType72);
        int int75 = property74.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        int int14 = localDate10.getEra();
        org.joda.time.LocalDate.Property property15 = localDate10.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(34704, 69, 464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight38 = property37.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusWeeks(292278994);
        int int41 = dateMidnight38.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        java.util.Date date3 = new java.util.Date((-19034), 34521, 42);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Nov 11 00:00:00 UTC 14259");
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder3.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale.Builder builder15 = builder3.setLocale(locale14);
        java.util.Locale.Builder builder16 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setVariant("T09:36:48.625");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: T09:36:48.625 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(1);
        org.joda.time.DateMidnight dateMidnight9 = property6.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale13.getDisplayLanguage(locale16);
        java.lang.String str18 = locale13.getCountry();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category19, locale22);
        java.lang.String str24 = locale13.getDisplayVariant(locale22);
        java.lang.String str26 = locale22.getExtension('x');
        java.lang.String str27 = property6.getAsShortText(locale22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime37.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property47 = dateTime43.yearOfEra();
        org.joda.time.DurationField durationField48 = property47.getLeapDurationField();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate61 = localDate59.withDayOfYear(11);
        int int62 = dateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) localDate59);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale locale65 = builder64.build();
        java.lang.String str66 = dateTimeField56.getAsText((long) 22, locale65);
        java.lang.String str67 = locale65.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str74 = locale65.getDisplayName(locale71);
        int int75 = property47.getMaximumShortTextLength(locale65);
        boolean boolean76 = locale65.hasExtensions();
        java.lang.String str77 = locale22.getDisplayVariant(locale65);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "francese" + "'", str17, "francese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FR" + "'", str18, "FR");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "31" + "'", str27, "31");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2922789 + "'", int62 == 2922789);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "19" + "'", str66, "19");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fra" + "'", str73, "fra");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Date date16 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date23 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean24 = date16.after(date23);
        date23.setDate(1969);
        calendar6.setTime(date23);
        java.util.Date date29 = new java.util.Date(3024000000L);
        int int30 = date29.getDay();
        int int31 = date29.getDay();
        date29.setYear(13920);
        int int34 = date23.compareTo(date29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=6297278762000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2169,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=202,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jul 21 04:06:02 UTC 2169");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Feb 05 00:00:00 UTC 15820");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate18 = localDate15.minusMonths((int) '4');
        int int19 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYearOfCentury();
        org.joda.time.LocalDate localDate22 = localDate18.minusMonths(32770);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime49.toDateTime(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, dateTimeZone54);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight58 = property57.roundHalfFloorCopy();
        boolean boolean59 = dateTimeZone23.equals((java.lang.Object) dateMidnight58);
        long long61 = dateTimeZone23.nextTransition((long) 34530);
        long long63 = dateTimeZone23.previousTransition((long) 20);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight65 = localDate18.toDateMidnight(dateTimeZone23);
        boolean boolean67 = dateMidnight65.isBefore(1644580799990L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 65 + "'", int20 == 65);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 34530L + "'", long61 == 34530L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 20L + "'", long63 == 20L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setYear(11);
        int int17 = date13.getSeconds();
        int int18 = date13.getYear();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 07 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        java.util.Date date3 = new java.util.Date(990, 2005, (int) ' ');
        org.junit.Assert.assertEquals(date3.toString(), "Wed Mar 04 00:00:00 UTC 3057");
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        java.util.Locale locale6 = new java.util.Locale("AM", "ISOChronology[Etc/UTC]");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = property3.getAsText(locale6);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale6);
        calendar9.set(32772, 13920, 0);
        java.util.Date date14 = calendar9.getTime();
        date14.setHours(743);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals(locale6.toString(), "am_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1008623180396486,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=33931,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=56,MILLISECOND=486,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 30 23:39:56 UTC 33932");
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.Chronology chronology35 = dateMidnight32.getChronology();
        org.joda.time.DateMidnight.Property property36 = dateMidnight32.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        java.util.Date date5 = new java.util.Date((int) (byte) 1, 51, 724, 245, 19);
        int int6 = date5.getDay();
        int int7 = date5.getMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Apr 04 05:19:00 UTC 1907");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(1);
        org.joda.time.LocalDate.Property property24 = localDate19.monthOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime35.getZone();
        org.joda.time.DateTime dateTime41 = localDate19.toDateTime(localTime25, dateTimeZone40);
        org.joda.time.Interval interval42 = yearMonthDay15.toInterval(dateTimeZone40);
        int int44 = dateTimeZone40.getOffsetFromLocal(9223371985593602010L);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str47 = locale46.getISO3Language();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getISO3Country();
        java.lang.String str50 = dateTimeZone40.getName(1644572189498L, locale46);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho" + "'", str47, "zho");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TWN" + "'", str49, "TWN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtStartOfDay();
        int int3 = localDate1.getYearOfEra();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime15.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime50.getZone();
        org.joda.time.DateTime dateTime56 = dateTime40.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate5.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate60 = localDate5.withField(dateTimeFieldType58, 6);
        boolean boolean61 = localDate1.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDate.Property property62 = localDate1.era();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        java.lang.String str8 = dateTimeField7.toString();
        org.joda.time.DurationField durationField9 = dateTimeField7.getLeapDurationField();
        int int10 = dateTimeField7.getMinimumValue();
        java.lang.String str12 = dateTimeField7.getAsText((-2208988800000L));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        boolean boolean18 = timeOfDay14.isAfter((org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay14.minus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusHours(3);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay20.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = property23.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMinutes(0);
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder32 = builder28.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder36 = builder32.setDate(12, 3, 17);
        java.util.Calendar.Builder builder40 = builder32.setDate((int) (byte) 10, 70500000, 1971);
        java.util.Calendar.Builder builder44 = builder32.setTimeOfDay(95, 22, 32769);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, 3, 3, 7);
        int[] intArray50 = timeOfDay49.getValues();
        java.util.Calendar.Builder builder51 = builder44.setFields(intArray50);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = dateTimeField7.set((org.joda.time.ReadablePartial) timeOfDay26, (int) (byte) -1, intArray50, 69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str8, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19" + "'", str12, "19");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 3, 3, 7]");
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfSecond(397);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        boolean boolean36 = interval25.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = dateTime17.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime49.toDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfWeek(4);
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime71 = dateTime65.toDateTime(dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime49, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight72.withMillis((long) (short) 100);
        int int77 = dateMidnight72.getWeekOfWeekyear();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readablePeriod39, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) 1, (long) 7, chronology81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval82.toPeriod(periodType83);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate88 = localDate86.plusMonths((int) '4');
        org.joda.time.DateTime dateTime89 = localDate86.toDateTimeAtStartOfDay();
        int int90 = localDate86.getWeekyear();
        org.joda.time.DateTime dateTime91 = localDate86.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period84, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight72.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 6);
        org.joda.time.DateMidnight.Property property95 = dateMidnight72.era();
        org.joda.time.DateTimeField dateTimeField96 = property95.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = dateTimeField96.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType98 = dateTimeField96.getType();
        org.joda.time.DateTime.Property property99 = dateTime17.property(dateTimeFieldType98);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1970 + "'", int90 == 1970);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
        org.junit.Assert.assertNotNull(dateTimeFieldType98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(25, (-19034), 54);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.LocalDate localDate22 = localDate18.minusDays(1);
        org.joda.time.LocalDate.Property property23 = localDate18.monthOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime34.getZone();
        org.joda.time.DateTime dateTime40 = localDate18.toDateTime(localTime24, dateTimeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval48.toPeriod(periodType49);
        org.joda.time.DateTime dateTime51 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight11.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.YearMonthDay yearMonthDay53 = dateMidnight52.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getStart();
        org.joda.time.DateTime dateTime64 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property68 = dateTime63.property(dateTimeFieldType67);
        java.lang.String str69 = dateTimeFieldType67.toString();
        boolean boolean70 = yearMonthDay53.isSupported(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "dayOfYear" + "'", str69, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        java.util.Date date5 = new java.util.Date(2922789, 31, 30, 7, 8);
        date5.setHours(35);
        int int8 = date5.getHours();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay23.getFieldTypes();
        org.joda.time.DateTime dateTime26 = dateTime21.withFields((org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.DateTime.Property property27 = dateTime21.hourOfDay();
        org.joda.time.Chronology chronology28 = dateTime21.getChronology();
        boolean boolean29 = date5.equals((java.lang.Object) chronology28);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Aug 31 11:08:00 UTC 2924691");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        boolean boolean66 = dateTimeFormatter65.isOffsetParsed();
        org.joda.time.Chronology chronology67 = dateTimeFormatter65.getChronology();
        java.lang.String str68 = chronology67.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long76 = chronology67.getDateTimeMillis(32769, 25, 990, (int) 'x', 3600011, 245, 34771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+00:00:00.010]" + "'", str68, "ISOChronology[+00:00:00.010]");
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay12 = property11.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMillis(13920);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMinutes(1969);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusHours(954);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.withHourOfDay((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.minusMonths(54);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        long long9 = interval8.getEndMillis();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-192067200000L) + "'", long9 == (-192067200000L));
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 1969, (long) 13920);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) 'a', true, (long) 4);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(dateTimeZone17);
        boolean boolean24 = interval2.isAfter((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.minusMonths(58);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 87L + "'", long22 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.minus(readablePeriod10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        java.lang.Integer int18 = dateTimeFormatter15.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, dateTimeZone51);
        long long55 = dateTimeZone51.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(0L, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter15.withZone(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay11.toDateMidnight(dateTimeZone51);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(1496560659993778L, dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 87L + "'", long55 == 87L);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(11);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.LocalDate localDate12 = localDate8.minusDays(1);
        org.joda.time.LocalDate.Property property13 = localDate8.monthOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) (byte) 10);
        boolean boolean18 = dateTimeZone15.isFixed();
        boolean boolean19 = dateTimeZone15.isFixed();
        org.joda.time.Interval interval20 = localDate8.toInterval(dateTimeZone15);
        java.util.Locale locale24 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        boolean boolean25 = dateTimeZone15.equals((java.lang.Object) "+00:00:00.010");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(579, 99, 0, 724, 50, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 724 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertEquals(locale24.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.LocalDate localDate11 = localDate7.minusDays(1);
        org.joda.time.LocalDate.Property property12 = localDate7.monthOfYear();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property12.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDate16.toDateTime(localTime17, dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        boolean boolean33 = locale31.hasExtensions();
        boolean boolean34 = locale31.hasExtensions();
        boolean boolean35 = dateTimeZone21.equals((java.lang.Object) boolean34);
        java.lang.String str37 = dateTimeZone21.getShortName(534L);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(380130023L, dateTimeZone21);
        long long41 = dateTimeZone21.convertLocalToUTC(0L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(0, 34546, (int) '#', dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34546 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-10L) + "'", long41 == (-10L));
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay18 = property11.getYearMonthDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology20);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusWeeks(13);
        org.joda.time.DateMidnight.Property property25 = dateMidnight22.monthOfYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate28 = dateMidnight22.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        boolean boolean36 = durationFieldType29.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(0);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 1, (long) 7, chronology66);
        org.joda.time.Duration duration68 = interval67.toDuration();
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime dateTime70 = dateTime49.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight39.withDurationAdded((org.joda.time.ReadableDuration) duration68, 106);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight39.minusDays(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateMidnight.Property property76 = dateMidnight39.property(dateTimeFieldType75);
        org.joda.time.LocalDate localDate78 = localDate28.withField(dateTimeFieldType75, 6);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType75.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay18.withFieldAdded(durationFieldType79, 1969);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay81.minus(readablePeriod82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField85 = yearMonthDay83.getField(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.lang.String str8 = locale3.getCountry();
        java.lang.String str9 = locale3.getLanguage();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale3.getDisplayVariant(locale10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology13);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay14.minus(readablePeriod21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay22.year();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.YearMonthDay yearMonthDay25 = property23.withMaximumValue();
        int int26 = property23.get();
        org.joda.time.YearMonthDay yearMonthDay28 = property23.addWrapFieldToCopy(28);
        org.joda.time.YearMonthDay yearMonthDay29 = property23.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight44 = dateTime41.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime54.getZone();
        org.joda.time.DateTime dateTime60 = dateTime41.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = yearMonthDay29.toDateTimeAtMidnight(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) str11, dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "francese" + "'", str7, "francese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property14 = localDate10.weekyear();
        org.joda.time.LocalDate localDate16 = localDate10.withCenturyOfEra((int) (byte) 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("und");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("fr-FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: fr-FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(42, 44, 2233, 2190, 117, (-18), 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2190 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        int int6 = localDate3.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        int int19 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.LocalDate localDate23 = localDate3.withField(dateTimeFieldType20, 8);
        int int24 = localDate3.getDayOfYear();
        org.joda.time.LocalDate.Property property25 = localDate3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setVariant("T09:38:36.481");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: T09:38:36.481 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("T09:37:59.133", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t09:37:59.133");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay2.minusDays(13920);
        org.joda.time.Chronology chronology13 = yearMonthDay2.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        long long18 = dateTimeField15.addWrapField((long) 65, 0);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 65L + "'", long18 == 65L);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'u');
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter5.withDefaultYear((int) (byte) 100);
        java.io.Writer writer13 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay16.toDateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight22 = property20.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight23 = property20.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(1);
        org.joda.time.LocalDate.Property property37 = localDate32.monthOfYear();
        org.joda.time.LocalTime localTime38 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTime.Property property52 = dateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime48.getZone();
        org.joda.time.DateTime dateTime54 = localDate32.toDateTime(localTime38, dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.secondOfMinute();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 1, (long) 7, chronology61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval62.toPeriod(periodType63);
        org.joda.time.DateTime dateTime65 = dateTime57.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight25.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.withYear(34521);
        org.joda.time.DateMidnight.Property property69 = dateMidnight66.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer13, (org.joda.time.ReadableInstant) dateMidnight66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        int int7 = localDate1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime19.toYearMonthDay();
        int int22 = yearMonthDay21.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        int int6 = property2.get();
        org.joda.time.DateTime dateTime7 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        int int9 = dateTime7.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.withMillis((long) (short) 100);
        int int48 = dateMidnight43.getWeekOfWeekyear();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readablePeriod10, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 1, (long) 7, chronology52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval53.toPeriod(periodType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate59 = localDate57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtStartOfDay();
        int int61 = localDate57.getWeekyear();
        org.joda.time.DateTime dateTime62 = localDate57.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period55, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight43.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.DateMidnight.Property property66 = dateMidnight43.era();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = dateTimeField67.getType();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime7.withField(dateTimeFieldType68, 292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNull(durationFieldType69);
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(28L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay4.toDateMidnight(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay4.minus(readablePeriod11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.YearMonthDay yearMonthDay15 = property13.withMaximumValue();
        int int16 = property13.get();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.util.Set<java.lang.Character> charSet22 = locale20.getExtensionKeys();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale20);
        int int24 = property13.getMaximumTextLength(locale20);
        int int25 = property13.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay27 = property13.setCopy((int) (short) 10);
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        boolean boolean31 = dateTime28.isBefore((long) (byte) 1);
        org.joda.time.DateTime dateTime32 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572397637,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=57,MILLISECOND=637,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight2 = dateTime1.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar3 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar3);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((-18));
        org.joda.time.LocalDate.Property property7 = localDate6.centuryOfEra();
        java.util.Locale locale12 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property7.setCopy("ISOChronology[+00:00:00.010]", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[+00:00:00.010]\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale12.toString(), "dayofyear_HI!_+00:00:00.010");
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.Interval interval10 = interval8.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.Duration duration15 = interval14.toDuration();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 1, (long) 7, chronology18);
        org.joda.time.Duration duration20 = interval19.toDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        long long30 = interval29.getStartMillis();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        long long33 = interval29.toDurationMillis();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval29.toPeriod(periodType34);
        int int36 = period35.size();
        org.joda.time.MutablePeriod mutablePeriod37 = period35.toMutablePeriod();
        org.joda.time.Interval interval38 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 7, chronology41);
        org.joda.time.Duration duration43 = interval42.toDuration();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        long long53 = interval52.getStartMillis();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        long long56 = interval52.toDurationMillis();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval52.toPeriod(periodType57);
        int int59 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod60 = period58.toMutablePeriod();
        org.joda.time.Interval interval61 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        boolean boolean62 = interval19.overlaps((org.joda.time.ReadableInterval) interval42);
        boolean boolean63 = interval14.overlaps((org.joda.time.ReadableInterval) interval42);
        boolean boolean64 = interval10.abuts((org.joda.time.ReadableInterval) interval14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval66 = interval10.withStartMillis(1644572286370L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths(365);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        int int7 = localDate1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone13);
        int int21 = dateTimeZone13.getOffsetFromLocal(1644572160245L);
        boolean boolean23 = dateTimeZone13.isStandardOffset(2100041L);
        long long27 = dateTimeZone13.convertLocalToUTC(1644572241822L, true, (long) 65);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572241822L + "'", long27 == 1644572241822L);
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder12 = builder4.setDate(58, 22, 2000);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone15 = calendar14.getTimeZone();
        java.util.Calendar.Builder builder16 = builder13.setTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Calendar.Builder builder18 = builder4.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate(34567, 23, 366);
        java.util.Calendar.Builder builder24 = builder18.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder26 = builder24.setInstant(1971L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572397837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=57,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 8, chronology18);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology18);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        java.util.Locale locale1 = new java.util.Locale("T09:36:19.624");
        org.junit.Assert.assertEquals(locale1.toString(), "t09:36:19.624");
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(34521, 9, 21);
        int int4 = localDate3.getYearOfCentury();
        java.lang.String str5 = localDate3.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "34521-09-21" + "'", str5, "34521-09-21");
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime57.minusMinutes(366);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(269);
        int int63 = dateTime62.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone67);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfWeek(4);
        org.joda.time.DateTime dateTime76 = dateTime73.toDateTime();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(chronology77);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = timeOfDay78.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = timeOfDay78.getFieldTypes();
        org.joda.time.DateTime dateTime81 = dateTime76.withFields((org.joda.time.ReadablePartial) timeOfDay78);
        org.joda.time.DateTime.Property property82 = dateTime76.hourOfDay();
        org.joda.time.DateTime dateTime84 = dateTime76.withMinuteOfHour(55);
        org.joda.time.DateTime dateTime85 = dateTime84.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 68040011 + "'", int63 == 68040011);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=34521,MONTH=19,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=12,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=1,year=34521,month=19,week_of_year=1,week_of_month=1,day_of_month=12,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=0,zone_offset=0,dst_offset=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getCountry();
        java.lang.String str16 = property11.getAsText(locale14);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category18, locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        boolean boolean28 = locale26.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str31 = locale26.getDisplayScript(locale30);
        java.util.Locale.setDefault(category18, locale30);
        java.util.Locale.setDefault(locale30);
        org.joda.time.TimeOfDay timeOfDay34 = property11.setCopy("35", locale30);
        java.lang.String str35 = locale30.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:58.005" + "'", str8, "T09:39:58.005");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DE" + "'", str15, "DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "58" + "'", str16, "58");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        long long29 = chronology19.add((org.joda.time.ReadablePeriod) period26, 87L, 1);
        java.util.Locale.LanguageRange languageRange31 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] { languageRange31 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList39);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(11);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfMonth();
        org.joda.time.Chronology chronology47 = localDate45.getChronology();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((java.lang.Object) str41, chronology47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        long long57 = chronology47.add((org.joda.time.ReadablePeriod) period54, 87L, 1);
        java.util.Locale.LanguageRange languageRange59 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] { languageRange59 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList67);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate73 = localDate71.withDayOfYear(11);
        org.joda.time.LocalDate.Property property74 = localDate73.dayOfMonth();
        org.joda.time.Chronology chronology75 = localDate73.getChronology();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((java.lang.Object) str69, chronology75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 1, (long) 7, chronology79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval80.toPeriod(periodType81);
        long long85 = chronology75.add((org.joda.time.ReadablePeriod) period82, 87L, 1);
        int[] intArray88 = chronology47.get((org.joda.time.ReadablePeriod) period82, (long) 10, (long) 13);
        long long91 = chronology19.add((org.joda.time.ReadablePeriod) period82, 604800000L, 32);
        org.joda.time.DateTime dateTime92 = dateTime1.toDateTime(chronology19);
        int int93 = dateTime1.getEra();
        org.joda.time.DateTime dateTime95 = dateTime1.minusDays(19);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 93L + "'", long29 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 93L + "'", long57 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 93L + "'", long85 == 93L);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 604800192L + "'", long91 == 604800192L);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime29.minusMonths(4);
        org.joda.time.DateTime.Property property34 = dateTime29.monthOfYear();
        org.joda.time.Chronology chronology35 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime19.toMutableDateTime(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.halfdays();
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfYear();
        long long42 = dateTimeField39.set(1644572373376L, 5);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1641375573376L + "'", long42 == 1641375573376L);
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay3.getFieldTypes();
        int[] intArray13 = timeOfDay3.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay3.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:58.130" + "'", str8, "T09:39:58.130");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[9, 39, 58, 130]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay15.toDateMidnight(dateTimeZone18);
        boolean boolean22 = dateMidnight21.isEqualNow();
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.yearOfCentury();
        org.joda.time.DateMidnight.Property property25 = dateMidnight21.centuryOfEra();
        org.joda.time.LocalDate localDate26 = dateMidnight21.toLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "71" + "'", str12, "71");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) '#');
        long long33 = dateTimeZone28.convertUTCToLocal((long) 11);
        java.lang.String str35 = dateTimeZone28.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime36 = localDate9.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(273);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfEra(34615);
        org.joda.time.DateTime.Property property41 = dateTime36.secondOfMinute();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 21L + "'", long33 == 21L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear((int) (short) 1);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category11, locale12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfSecond();
        int int23 = dateTimeField20.getDifference((long) 11, (long) 4);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = dateTimeField20.getAsShortText(1644572124561L, locale25);
        java.util.Locale.setDefault(category11, locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale.setDefault(category11, locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter10.withLocale(locale29);
        boolean boolean33 = dateTimeFormatter10.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeFormatter10.parseMillis("1970-01-01T00:00:00.000+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str26, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "561" + "'", str27, "561");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusDays(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDate7.getFieldTypes();
        org.joda.time.LocalDate.Property property10 = localDate7.year();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        int int10 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        int int12 = localDate6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withMillis((long) (short) 100);
        int int51 = dateMidnight46.getWeekOfWeekyear();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readablePeriod13, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate62 = localDate60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.getWeekyear();
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.LocalDate localDate69 = localDate6.minus((org.joda.time.ReadablePeriod) period58);
        int int70 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod71 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTimeField dateTimeField74 = yearMonthDay2.getField(2);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay2);
        org.joda.time.DateTime dateTime76 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        int int81 = dateTimeZone79.getOffset((long) (byte) 10);
        boolean boolean82 = dateTimeZone79.isFixed();
        int int84 = dateTimeZone79.getOffsetFromLocal((long) 10);
        long long88 = dateTimeZone79.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 11, dateTimeZone79);
        org.joda.time.DateTime dateTime90 = yearMonthDay2.toDateTimeAtMidnight(dateTimeZone79);
        long long92 = dateTimeZone79.nextTransition(123073084799990L);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 97L + "'", long88 == 97L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 123073084799990L + "'", long92 == 123073084799990L);
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        int[] intArray58 = chronology17.get((org.joda.time.ReadablePeriod) period52, (long) 10, (long) 13);
        org.joda.time.DateTimeField dateTimeField59 = chronology17.dayOfMonth();
        java.lang.String str61 = dateTimeField59.getAsShortText(1644572153841L);
        java.util.Locale locale67 = new java.util.Locale("FRA", "T09:35:17.686", "dayOfYear");
        // The following exception was thrown during execution in test generation
        try {
            long long68 = dateTimeField59.set(2077L, "T09:37:56.642", locale67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:56.642\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertEquals(locale67.toString(), "fra_T09:35:17.686_dayOfYear");
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("T09:35:55.129", (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.DateTime dateTime18 = property16.setCopy(19);
        org.joda.time.DateTime dateTime19 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        int int7 = dateMidnight5.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond(10);
        java.util.Date date11 = dateTime8.toDate();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillisOfDay(36);
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) 575, 22);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(1970);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight24 = yearMonthDay18.toDateMidnight(dateTimeZone21);
        java.lang.String str26 = dateTimeZone21.getName((long) 11);
        org.joda.time.DateTime dateTime27 = localDate13.toDateTimeAtCurrentTime(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime27.withDate(34615, 464, 963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 464 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        long long19 = interval18.getStartMillis();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        long long22 = interval18.toDurationMillis();
        java.util.Locale.LanguageRange languageRange24 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] { languageRange24 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfMonth();
        org.joda.time.Chronology chronology40 = localDate38.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((java.lang.Object) str34, chronology40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        long long50 = chronology40.add((org.joda.time.ReadablePeriod) period47, 87L, 1);
        org.joda.time.Interval interval51 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        boolean boolean52 = interval8.isBefore((org.joda.time.ReadableInterval) interval18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval54 = interval8.withStartMillis(336510025043000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 93L + "'", long50 == 93L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay11.withYear((int) (short) -1);
        int int15 = yearMonthDay11.getYear();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((java.lang.Object) int15, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.DateMidnight dateMidnight40 = property37.addToCopy(2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusDays(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDate7.getFieldTypes();
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(360);
        int int12 = localDate7.getDayOfMonth();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 24 + "'", int12 == 24);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        boolean boolean23 = durationFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration55, 106);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration55, 0);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withWeekOfWeekyear(4);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight61.withDayOfYear(20);
        org.joda.time.DateMidnight.Property property67 = dateMidnight61.weekOfWeekyear();
        java.lang.String str68 = property67.getAsShortText();
        org.joda.time.DateMidnight dateMidnight70 = property67.addWrapFieldToCopy(517);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(1);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 0, chronology19);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.plusSeconds((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight26 = dateTime22.toDateMidnight();
        org.joda.time.DateTime dateTime28 = dateTime22.plus(839L);
        int int29 = dateTime22.getMinuteOfDay();
        boolean boolean30 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate34 = localDate32.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate37 = localDate32.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.year();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime22.toMutableDateTime(chronology38);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.time.Instant instant7 = calendar6.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.set(34534, 600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34534");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572398694,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=58,MILLISECOND=694,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        boolean boolean32 = dateTimeField19.isLenient();
        org.joda.time.DurationField durationField33 = dateTimeField19.getLeapDurationField();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = dateTimeField19.getAsShortText((long) 33, locale35);
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = locale35.getDisplayName();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Do" + "'", str36, "Do");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tedesco" + "'", str38, "tedesco");
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay15.toDateMidnight(dateTimeZone18);
        boolean boolean22 = dateMidnight21.isEqualNow();
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight21);
        int int24 = property8.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "71" + "'", str12, "71");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        int int2 = localDate1.getDayOfWeek();
        org.joda.time.LocalDate.Property property3 = localDate1.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = property3.setCopy("java.util.GregorianCalendar[time=1644572174560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=14,MILLISECOND=570,ZONE_OFFSET=10,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=1644572174560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=14,MILLISECOND=570,ZONE_OFFSET=10,DST_OFFSET=0]\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property6.getAsText(locale8);
        int int10 = property6.get();
        org.joda.time.LocalDate localDate11 = property6.roundHalfCeilingCopy();
        java.util.Date date12 = localDate11.toDate();
        int int13 = localDate11.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Jan 11 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        calendar19.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = calendar19.getMaximum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572398939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=58,MILLISECOND=949,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        java.lang.Integer int7 = dateTimeFormatter4.getPivotYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) (byte) 10);
        boolean boolean13 = dateTimeZone10.isFixed();
        int int15 = dateTimeZone10.getOffsetFromLocal((long) 10);
        long long19 = dateTimeZone10.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 11, dateTimeZone10);
        java.lang.String str22 = dateTimeZone10.getShortName(1961L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay56 = dateTime32.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime32.getZone();
        long long59 = dateTimeZone10.getMillisKeepLocal(dateTimeZone57, 1644572130064L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter4.withZone(dateTimeZone10);
        org.joda.time.Chronology chronology61 = dateTimeFormatter60.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.parse("Mar 21, 15821 3:27:30 PM", dateTimeFormatter60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1644572130054L + "'", long59 == 1644572130054L);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNull(chronology61);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays(292278994);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withYear(1429331);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMonths(4);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(70);
        org.joda.time.DateTime dateTime25 = dateTime21.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate32 = localDate27.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weeks();
        org.joda.time.DateTime dateTime35 = dateTime21.toDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "centuries", 2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale3);
        calendar7.set(1965, 50, 35, 47, 456825);
        calendar7.clear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572399049,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=59,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths((int) '4');
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate4.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(dateTimeZone25);
        int int27 = dateTime26.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean30 = dateTime26.isEqual(93L);
        int int31 = dateTime26.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime26.toGregorianCalendar();
        int int34 = gregorianCalendar32.getActualMaximum((int) (byte) 1);
        java.util.TimeZone timeZone35 = gregorianCalendar32.getTimeZone();
        gregorianCalendar32.set((int) 'x', 39, 34534, 36, 292278994, 2022);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        boolean boolean50 = durationFieldType43.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology49);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) gregorianCalendar32, chronology49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(11, (-292275054), 360, chronology49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278994 + "'", int34 == 292278994);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 100, chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDate27.getChronology();
        org.joda.time.LocalDate localDate31 = localDate27.minusDays(1);
        org.joda.time.LocalDate localDate33 = localDate31.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property35 = localDate33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDate33.getFieldType(0);
        int int38 = localDate33.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale42.getDisplayName();
        java.lang.String str47 = locale42.getDisplayCountry();
        java.util.Set<java.lang.String> strSet48 = locale42.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale42);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        java.util.Set<java.lang.Character> charSet55 = locale53.getExtensionKeys();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale53);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.fromCalendarFields(calendar56);
        java.util.TimeZone timeZone58 = calendar56.getTimeZone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology60);
        org.joda.time.DateTime dateTime62 = yearMonthDay61.toDateTimeAtMidnight();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight67 = yearMonthDay61.toDateMidnight(dateTimeZone64);
        java.lang.String str69 = dateTimeZone64.getName((long) 11);
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = dateTimeZone64.getName((long) '4', locale71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone58, locale71);
        java.lang.String str74 = locale42.getDisplayCountry(locale71);
        java.lang.String str75 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDate33, locale71);
        java.lang.String str76 = locale71.getScript();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Francia" + "'", str45, "Francia");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "francese (Francia)" + "'", str46, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Francia" + "'", str47, "Francia");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572399084,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=59,MILLISECOND=84,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572399084,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=59,MILLISECOND=84,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Francia" + "'", str74, "Francia");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1971" + "'", str75, "1971");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        java.util.Locale locale2 = new java.util.Locale("T09:38:58.667", "T09:39:42.493");
        org.junit.Assert.assertEquals(locale2.toString(), "t09:38:58.667_T09:39:42.493");
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        java.util.Date date19 = dateTime15.toDate();
        date19.setYear(27);
        java.util.Date date28 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date28.setMinutes(3);
        boolean boolean31 = date19.after(date28);
        date19.setMonth(33);
        java.lang.String str34 = date19.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Tue Oct 01 00:00:00 UTC 1929");
        org.junit.Assert.assertEquals(date28.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Tue Oct 01 00:00:00 UTC 1929" + "'", str34, "Tue Oct 01 00:00:00 UTC 1929");
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        int int7 = property6.get();
        java.lang.String str8 = property6.getName();
        org.joda.time.TimeOfDay timeOfDay9 = property6.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay10 = property6.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572399181,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=59,MILLISECOND=181,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((java.lang.Object) str14, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology20.centuries();
        org.joda.time.DurationField durationField24 = chronology20.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1965, 2789, 2922789, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2789 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDate localDate8 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.withMaximumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfWeek();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.LocalDate localDate19 = property17.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = property17.withMaximumValue();
        int int22 = property6.compareTo((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate23 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7" + "'", str7, "7");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7" + "'", str18, "7");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        int int9 = dateTimeField6.getDifference((long) 11, (long) 4);
        long long12 = dateTimeField6.add(0L, (int) (short) 0);
        long long14 = dateTimeField6.roundFloor((long) 1971);
        boolean boolean15 = dateTimeField6.isSupported();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1971L + "'", long14 == 1971L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        long long13 = interval8.getEndMillis();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        long long17 = property16.remainder();
        java.lang.String str18 = property16.toString();
        org.joda.time.DateTime dateTime19 = property16.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight55 = property53.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = property53.getAsText(locale59);
        java.lang.String str63 = property16.getAsText(locale59);
        org.joda.time.Interval interval64 = property16.toInterval();
        java.util.Locale.LanguageRange languageRange66 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] { languageRange66 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList74);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate80 = localDate78.withDayOfYear(11);
        org.joda.time.LocalDate.Property property81 = localDate80.dayOfMonth();
        org.joda.time.Chronology chronology82 = localDate80.getChronology();
        org.joda.time.Interval interval83 = new org.joda.time.Interval((java.lang.Object) str76, chronology82);
        long long84 = interval83.getStartMillis();
        boolean boolean85 = interval64.overlaps((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Duration duration86 = interval83.toDuration();
        org.joda.time.Interval interval87 = interval8.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTime dateTime88 = interval8.getStart();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[monthOfYear]" + "'", str18, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "janvier" + "'", str63, "janvier");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology82);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1644572399296L + "'", long84 == 1644572399296L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(1644572130023L, 4);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = dateTime30.isBefore(readableInstant34);
        boolean boolean36 = interval7.contains(readableInstant34);
        boolean boolean37 = interval7.isBeforeNow();
        org.joda.time.Interval interval39 = interval7.withEndMillis((long) 36);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int31 = gregorianCalendar29.getActualMaximum((int) (byte) 1);
        java.util.TimeZone timeZone32 = gregorianCalendar29.getTimeZone();
        int int33 = gregorianCalendar29.getWeeksInWeekYear();
        gregorianCalendar29.set(58, 32770, 52, 31, 33);
        int int40 = gregorianCalendar29.getWeeksInWeekYear();
        boolean boolean41 = gregorianCalendar29.isWeekDateSupported();
        org.joda.time.YearMonthDay yearMonthDay42 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar29);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(11);
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfMonth();
        org.joda.time.Chronology chronology51 = localDate49.getChronology();
        boolean boolean52 = durationFieldType45.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(chronology51);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) 1969, chronology51);
        long long60 = chronology51.add((-5178038399999L), (long) 32772, 269);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone64);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getStart();
        org.joda.time.Period period71 = interval68.toPeriod();
        int[] intArray73 = chronology51.get((org.joda.time.ReadablePeriod) period71, (long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay42.plus((org.joda.time.ReadablePeriod) period71);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278994 + "'", int31 == 292278994);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-5178029584331L) + "'", long60 == (-5178029584331L));
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(yearMonthDay74);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(106, 33, 1969, 9);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        int int16 = yearMonthDay15.getMonthOfYear();
        org.joda.time.LocalDate localDate17 = yearMonthDay15.toLocalDate();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay15.dayOfMonth();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = property18.getAsText(locale19);
        java.lang.String str22 = property18.getAsString();
        java.util.Locale locale24 = new java.util.Locale("20");
        java.util.Locale locale27 = new java.util.Locale("AM", "ISOChronology[Etc/UTC]");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale24.getDisplayScript(locale27);
        java.lang.String str30 = property18.getAsText(locale24);
        java.util.Calendar.Builder builder31 = builder12.setLocale(locale24);
        java.lang.String str32 = locale24.getDisplayScript();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr-FR" + "'", str20, "fr-FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11" + "'", str21, "11");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertEquals(locale24.toString(), "20");
        org.junit.Assert.assertEquals(locale27.toString(), "am_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "11" + "'", str30, "11");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfDay();
        java.lang.String str37 = dateTimeField35.getAsShortText(1644572241822L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "34641" + "'", str37, "34641");
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1644572130064L);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.LocalDate localDate9 = localDate5.minusDays(1);
        org.joda.time.LocalDate localDate11 = localDate9.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate11.getFieldType(0);
        int int16 = localDate11.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean18 = localDate11.isSupported(dateTimeFieldType17);
        boolean boolean19 = dateTime1.isSupported(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.clear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime.Property property22 = dateTime21.centuryOfEra();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        boolean boolean24 = calendar6.after((java.lang.Object) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.plusMinutes(579);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", "T09:37:26.871", "Sunday");
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd_T09:37:26.871_Sunday");
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.year();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.withMillis((long) (short) 100);
        int int48 = dateMidnight43.getWeekOfWeekyear();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readablePeriod10, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 1, (long) 7, chronology52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval53.toPeriod(periodType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate59 = localDate57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtStartOfDay();
        int int61 = localDate57.getWeekyear();
        org.joda.time.DateTime dateTime62 = localDate57.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period55, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight43.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Chronology chronology67 = yearMonthDay66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight3.toMutableDateTime(chronology67);
        org.joda.time.DurationField durationField71 = chronology67.seconds();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        int int16 = dateTimeField14.getMaximumTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getDisplayVariant();
        int int20 = dateTimeField14.getMaximumShortTextLength(locale17);
        java.util.Locale.Builder builder21 = builder3.setLocale(locale17);
        java.util.Locale.Builder builder22 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder3.setUnicodeLocaleKeyword("French", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cor\351en" + "'", str18, "cor\351en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.minus(readablePeriod6);
        int[] intArray8 = timeOfDay7.getValues();
        java.lang.String str9 = timeOfDay7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.withSecondOfMinute(34741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34741 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 39, 59, 613]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "T09:39:59.613" + "'", str9, "T09:39:59.613");
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        int int27 = dateTimeField25.getMaximumTextLength(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getDisplayVariant();
        int int31 = dateTimeField25.getMaximumShortTextLength(locale28);
        java.util.Calendar calendar32 = dateTime16.toCalendar(locale28);
        java.lang.String str33 = locale28.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, dateTimeZone64);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight68 = property67.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight69 = property67.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        boolean boolean76 = locale74.hasExtensions();
        boolean boolean77 = locale74.hasExtensions();
        org.joda.time.DateMidnight dateMidnight78 = property67.setCopy("14", locale74);
        java.lang.String str79 = locale28.getDisplayLanguage(locale74);
        java.lang.String str81 = locale28.getExtension('u');
        java.util.Set<java.lang.Character> charSet82 = locale28.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cor\351en" + "'", str29, "cor\351en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ko" + "'", str33, "ko");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "cor\351en" + "'", str79, "cor\351en");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(charSet82);
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("5");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfSecond();
        int int12 = dateTimeField9.getDifference((long) 11, (long) 4);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = dateTimeField9.getAsShortText(1644572124561L, locale14);
        java.util.Locale.setDefault(category0, locale14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology19);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay20.toDateMidnight(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.year();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate33 = localDate31.withYear((int) (byte) 100);
        org.joda.time.LocalDate.Property property34 = localDate31.dayOfWeek();
        org.joda.time.LocalDate localDate36 = localDate31.withWeekyear(106);
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] { languageRange38 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((java.lang.Object) str48, chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfWeek();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology58);
        org.joda.time.DateTime dateTime60 = yearMonthDay59.toDateTimeAtMidnight();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        int int64 = dateTimeZone62.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay59.toDateMidnight(dateTimeZone62);
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay59, 1, locale67);
        java.lang.String str69 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDate36, locale67);
        java.util.Locale.setDefault(category0, locale67);
        java.lang.Object obj71 = locale67.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str15, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "561" + "'", str16, "561");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "lun" + "'", str68, "lun");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "106" + "'", str69, "106");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "it_IT");
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Mar 21, 15821 3:27:30 PM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=mar21");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        java.util.Date date1 = new java.util.Date((long) 34615);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:34 UTC 1970");
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(999);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime15.minusYears((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = timeOfDay7.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(0);
        int int15 = dateTime12.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusMonths((int) '4');
        int int64 = yearMonthDay56.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay56.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        org.joda.time.Interval interval71 = yearMonthDay56.toInterval(dateTimeZone67);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate75 = localDate73.plusMonths((int) '4');
        org.joda.time.DateTime dateTime76 = localDate73.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate78 = localDate73.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property79 = localDate78.weekyear();
        org.joda.time.LocalDate localDate81 = localDate78.withWeekyear(3);
        org.joda.time.DateTime dateTime82 = localDate78.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime83 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = dateTimeZone87.getName((long) (byte) 10, locale89);
        org.joda.time.Interval interval91 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone87);
        org.joda.time.DateTime dateTime92 = localDate78.toDateTime(localTime83, dateTimeZone87);
        int int94 = dateTimeZone87.getStandardOffset((long) 0);
        org.joda.time.DateTime dateTime95 = yearMonthDay56.toDateTimeAtCurrentTime(dateTimeZone87);
        java.lang.String str96 = dateTimeZone87.getID();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.010" + "'", str90, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00:00.010" + "'", str96, "+00:00:00.010");
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.lang.String str14 = property11.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "39" + "'", str14, "39");
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 1, (long) 7, chronology5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = interval6.toPeriod(periodType7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Interval interval19 = interval16.withPeriodBeforeEnd(readablePeriod18);
        boolean boolean20 = interval19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        boolean boolean31 = interval19.overlaps((org.joda.time.ReadableInterval) interval28);
        boolean boolean32 = interval6.isAfter((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology33 = interval6.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        boolean boolean39 = timeOfDay35.isAfter((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean41 = timeOfDay35.isSupported(dateTimeFieldType40);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay35.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay35.minusMillis((int) 'a');
        int[] intArray47 = chronology33.get((org.joda.time.ReadablePartial) timeOfDay35, 130636804320000087L);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(28, 34265, 12562035, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 87]");
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        int int6 = localDate3.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        int int19 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        long long29 = interval28.getStartMillis();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval28.withDurationBeforeEnd(readableDuration30);
        long long32 = interval28.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        int int35 = period34.size();
        org.joda.time.MutablePeriod mutablePeriod36 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime46.minusMonths(4);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(70);
        int int53 = dateTime50.getSecondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime50.withYear((int) 'u');
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay57.minusDays((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((java.lang.Object) yearMonthDay57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int16 = dateTimeField13.getDifference((long) (short) 1, (long) 'a');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfWeek();
        org.joda.time.LocalDate localDate25 = property24.roundCeilingCopy();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = property24.getAsText(locale26);
        int int28 = property24.get();
        org.joda.time.LocalDate localDate29 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate30 = property24.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 1, (long) 7, chronology57);
        org.joda.time.Duration duration59 = interval58.toDuration();
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime61 = dateTime40.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Chronology chronology62 = dateTime40.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.seconds();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfEra();
        org.joda.time.Chronology chronology65 = chronology62.withUTC();
        boolean boolean66 = property24.equals((java.lang.Object) chronology62);
        long long67 = property24.remainder();
        java.util.Locale.Category category68 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category68, locale69);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate74 = localDate72.withDayOfYear(11);
        org.joda.time.LocalDate.Property property75 = localDate74.dayOfMonth();
        org.joda.time.Chronology chronology76 = localDate74.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.millisOfSecond();
        int int80 = dateTimeField77.getDifference((long) 11, (long) 4);
        java.util.Locale locale82 = java.util.Locale.UK;
        java.lang.String str83 = locale82.getDisplayCountry();
        java.lang.String str84 = dateTimeField77.getAsShortText(1644572124561L, locale82);
        java.util.Locale.setDefault(category68, locale82);
        java.lang.String str86 = property24.getAsText(locale82);
        java.lang.String str87 = dateTimeField13.getAsShortText((int) (short) 100, locale82);
        java.lang.Object obj88 = locale82.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u661f\u671f\u65e5" + "'", str27, "\u661f\u671f\u65e5");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category68.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str83, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "561" + "'", str84, "561");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Sunday" + "'", str86, "Sunday");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100" + "'", str87, "100");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "en_GB");
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.clockhourOfHalfday();
        long long16 = dateTimeField14.roundHalfCeiling((long) 'x');
        int int18 = dateTimeField14.getLeapAmount(30L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = property33.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight35 = property33.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight36 = property33.roundHalfEvenCopy();
        int int37 = property33.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField38 = property33.getField();
        java.util.Locale locale42 = new java.util.Locale("chinois", "");
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = dateTimeField38.getAsText(273, locale42);
        java.util.Locale locale47 = new java.util.Locale("T09:36:21.314");
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = locale47.getDisplayName();
        java.lang.String str50 = dateTimeField38.getAsText(1439, locale47);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "273" + "'", str44, "273");
        org.junit.Assert.assertEquals(locale47.toString(), "t09:36:21.314");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "t09:36:21.314" + "'", str48, "t09:36:21.314");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "t09:36:21.314" + "'", str49, "t09:36:21.314");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1439" + "'", str50, "1439");
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        long long35 = dateTimeZone31.previousTransition(87L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-5L), dateTimeZone31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.LocalDate localDate44 = localDate40.minusDays(1);
        org.joda.time.LocalDate.Property property45 = localDate40.monthOfYear();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.LocalDate localDate47 = property45.withMaximumValue();
        org.joda.time.LocalDate localDate49 = property45.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.DateTime dateTime59 = localDate49.toDateTime(localTime50, dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean61 = localDate49.isSupported(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getDurationType();
        org.joda.time.DateTime.Property property63 = dateTime36.property(dateTimeFieldType60);
        boolean boolean65 = dateTime36.isBefore((long) 5);
        org.joda.time.DateTime dateTime67 = dateTime36.minusSeconds(0);
        org.joda.time.DateTime dateTime69 = dateTime36.plusMinutes((int) (short) 10);
        int int70 = dateTime36.getDayOfYear();
        org.joda.time.DateTime.Property property71 = dateTime36.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 87L + "'", long35 == 87L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusWeeks(16);
        org.joda.time.DateMidnight.Property property35 = dateMidnight32.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.plusYears(3600011);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 5970, chronology18);
        org.joda.time.DurationField durationField22 = chronology18.years();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.Period period11 = interval8.toPeriod();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        boolean boolean19 = durationFieldType12.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        org.joda.time.Interval interval21 = interval8.withChronology(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.millis();
        org.joda.time.DurationField durationField23 = chronology18.months();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(obj0, chronology18);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate32 = localDate27.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekyear(3);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate32.toDateTime(localTime37, dateTimeZone41);
        long long49 = dateTimeZone41.adjustOffset((long) 41, false);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(234034520L, dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay24, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 41L + "'", long49 == 41L);
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property6.getAsText(locale8);
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        long long21 = interval20.getStartMillis();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        long long24 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int int27 = period26.size();
        org.joda.time.MutablePeriod mutablePeriod28 = period26.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        boolean boolean41 = period26.equals((java.lang.Object) 4);
        org.joda.time.PeriodType periodType42 = period26.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        boolean boolean50 = durationFieldType43.isSupported(chronology49);
        boolean boolean51 = period26.isSupported(durationFieldType43);
        boolean boolean52 = localDate11.isSupported(durationFieldType43);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 13920);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("AM", dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.withYear((int) 'x');
        int int22 = yearMonthDay17.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969" + "'", str16, "1969");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfSecond();
        int int12 = dateTimeField9.getDifference((long) 11, (long) 4);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = dateTimeField9.getAsShortText(1644572124561L, locale14);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.lang.String str22 = locale21.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str15, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "561" + "'", str16, "561");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField21 = chronology18.centuries();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) -1, chronology18);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.secondOfDay();
        java.lang.String str28 = dateTimeField26.getAsText(1644572361539L);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "34761" + "'", str28, "34761");
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekyear();
        boolean boolean18 = dateMidnight16.isBeforeNow();
        org.joda.time.DateMidnight.Property property19 = dateMidnight16.weekOfWeekyear();
        org.joda.time.Interval interval20 = dateMidnight16.toInterval();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight16.plusDays(5);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long9 = dateTimeField7.roundCeiling((long) 3);
        boolean boolean10 = dateTimeField7.isLenient();
        int int12 = dateTimeField7.get((long) 1);
        boolean boolean13 = dateTimeField7.isSupported();
        java.lang.String str15 = dateTimeField7.getAsText(864001003L);
        long long18 = dateTimeField7.getDifferenceAsLong(7L, 31L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 43200000L + "'", long9 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e0a\u5348" + "'", str15, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays(13);
        org.joda.time.LocalDate localDate12 = localDate10.plusYears((int) (short) 10);
        int int13 = localDate10.size();
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTime(readableInstant1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str4 = durationFieldType3.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.withFieldAdded(durationFieldType3, (-58));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "weeks" + "'", str4, "weeks");
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getWeeksInWeekYear();
        boolean boolean4 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572400614,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=0,MILLISECOND=614,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        int int4 = localDate3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(4);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(70);
        int int30 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime27.withYear((int) 'u');
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfEra(35);
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int36 = property11.get();
        org.joda.time.TimeOfDay timeOfDay38 = property11.addWrapFieldToCopy(1969);
        int int39 = property11.get();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = property11.getAsShortText(locale40);
        int int43 = property11.getMaximumValueOverall();
        int int44 = property11.getMaximumValueOverall();
        java.lang.String str45 = property11.getAsString();
        int int46 = property11.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40 + "'", int36 == 40);
        org.junit.Assert.assertNotNull(timeOfDay38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "coreano" + "'", str41, "coreano");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "40" + "'", str42, "40");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "40" + "'", str45, "40");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight15 = property13.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight16 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = property13.setCopy(33);
        int int19 = property13.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) property13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withMillis((long) (short) 100);
        int int40 = dateMidnight35.getWeekOfWeekyear();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readablePeriod2, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtStartOfDay();
        int int53 = localDate49.getWeekyear();
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period47, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 6);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology59 = yearMonthDay58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay58.plusMonths(12);
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay61.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay61.withDayOfMonth(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight62);
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay14 = property11.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = property48.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        boolean boolean56 = locale54.hasExtensions();
        java.lang.String str57 = property48.getAsText(locale54);
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = locale54.getDisplayName(locale58);
        int int60 = property11.getMaximumTextLength(locale54);
        org.joda.time.TimeOfDay timeOfDay62 = property11.addToCopy((-18));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fran\347ais (France)" + "'", str59, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(timeOfDay62);
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(1644572130023L, 4);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = dateTime20.isBefore(readableInstant24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime20.toMutableDateTime();
        java.util.Date date27 = mutableDateTime26.toDate();
        java.time.Instant instant28 = date27.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 04 01:12:59 UTC 14");
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setUnicodeLocaleKeyword("21 Jul 1915 04:06:02 GMT", "T09:39:04.068");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 21 Jul 1915 04:06:02 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        int int7 = localDate1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone13);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.minusMonths(19);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtStartOfDay();
        int int31 = localDate27.getWeekyear();
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtStartOfDay();
        int int33 = localDate27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.withMillis((long) (short) 100);
        int int72 = dateMidnight67.getWeekOfWeekyear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readablePeriod34, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime84 = localDate81.toDateTimeAtStartOfDay();
        int int85 = localDate81.getWeekyear();
        org.joda.time.DateTime dateTime86 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period79, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight67.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.LocalDate localDate90 = localDate27.minus((org.joda.time.ReadablePeriod) period79);
        int int91 = period79.size();
        org.joda.time.MutablePeriod mutablePeriod92 = period79.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay23.plus((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.YearMonthDay.Property property94 = yearMonthDay93.dayOfMonth();
        boolean boolean95 = dateMidnight20.equals((java.lang.Object) property94);
        org.joda.time.DateMidnight dateMidnight97 = dateMidnight20.minus(41L);
        org.joda.time.DateMidnight.Property property98 = dateMidnight20.weekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateMidnight97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.withWeekyear(106);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfYear();
        java.lang.String str20 = property19.toString();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = dateTimeField21.getMaximumValue();
        java.util.Locale locale27 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.lang.String str28 = dateTimeField21.getAsText(9, locale27);
        int int30 = dateTimeField21.getMinimumValue((long) 12);
        int int32 = dateTimeField21.getMinimumValue(1644572123240L);
        boolean boolean33 = localDate0.equals((java.lang.Object) int32);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfYear]" + "'", str20, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 366 + "'", int22 == 366);
        org.junit.Assert.assertEquals(locale27.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType7.getField(chronology13);
        java.util.Locale locale18 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter6.withLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.parse("T09:36:50.305", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "coreano" + "'", str22, "coreano");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-2208988800000L));
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("7 mars 2164 04:06:02");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7 mars 2164 04:06:02\" is malformed at \" mars 2164 04:06:02\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] { languageRange15 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((java.lang.Object) str25, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 22, chronology31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology36);
        org.joda.time.DateTime dateTime38 = yearMonthDay37.toDateTimeAtMidnight();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay37.toDateMidnight(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.minus(readablePeriod44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay45.year();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        org.joda.time.YearMonthDay yearMonthDay48 = property46.withMaximumValue();
        long long50 = chronology31.set((org.joda.time.ReadablePartial) yearMonthDay48, (long) 2000);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime55 = localDate52.toDateTimeAtStartOfDay();
        int int56 = localDate52.getWeekyear();
        org.joda.time.DateTime dateTime57 = localDate52.toDateTimeAtStartOfDay();
        int int58 = localDate52.getDayOfMonth();
        org.joda.time.LocalDate localDate60 = localDate52.plusWeeks(100);
        org.joda.time.LocalDate localDate62 = localDate52.plusMonths((int) ' ');
        long long64 = chronology31.set((org.joda.time.ReadablePartial) localDate52, (long) 34534);
        org.joda.time.LocalDate localDate65 = localDate11.withFields((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekOfWeekyear();
        org.joda.time.DurationField durationField68 = chronology66.weekyears();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223372017043202000L + "'", long50 == 9223372017043202000L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 34534L + "'", long64 == 34534L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        int int6 = property2.get();
        org.joda.time.DateTime dateTime7 = property2.roundHalfCeilingCopy();
        int int8 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plusWeeks(13);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((int) (short) -1);
        boolean boolean10 = dateMidnight8.isAfter((long) 3);
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfMonth();
        boolean boolean12 = property11.isLeap();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        boolean boolean23 = calendar6.before((java.lang.Object) interval21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime49.toDateTime(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, dateTimeZone54);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight59 = property57.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight60 = property57.withMinimumValue();
        boolean boolean61 = interval21.isAfter((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = dateTimeZone65.getName((long) (byte) 10, locale67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone65);
        org.joda.time.Interval interval70 = interval69.toInterval();
        long long71 = interval70.getStartMillis();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationBeforeEnd(readableDuration72);
        long long74 = interval70.toDurationMillis();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval70.toPeriod(periodType75);
        int int77 = period76.size();
        org.joda.time.MutablePeriod mutablePeriod78 = period76.toMutablePeriod();
        int int80 = mutablePeriod78.getValue(5);
        org.joda.time.Interval interval81 = interval21.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod78);
        long long82 = interval81.getEndMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=1,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration39, 106);
        org.joda.time.DateMidnight.Property property44 = dateMidnight10.yearOfEra();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight10.plusWeeks(0);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight10.withCenturyOfEra(35);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int int26 = localDate6.getDayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Interval interval43 = interval40.withPeriodBeforeEnd(readablePeriod42);
        boolean boolean44 = interval43.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        boolean boolean55 = interval43.overlaps((org.joda.time.ReadableInterval) interval52);
        boolean boolean56 = interval30.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Chronology chronology57 = interval30.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) localDate6, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology60);
        org.joda.time.DateTime dateTime62 = yearMonthDay61.toDateTimeAtMidnight();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight67 = yearMonthDay61.toDateMidnight(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.minus(readablePeriod68);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.year();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        org.joda.time.YearMonthDay yearMonthDay72 = property70.withMaximumValue();
        int int73 = property70.get();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        java.lang.String str78 = dateTimeZone75.getName((long) (byte) 10, locale77);
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale77);
        int int81 = property70.getMaximumTextLength(locale77);
        int int82 = property70.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay84 = property70.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate85 = yearMonthDay84.toLocalDate();
        int[] intArray87 = chronology57.get((org.joda.time.ReadablePartial) localDate85, 43200000L);
        org.joda.time.LocalDate.Property property88 = localDate85.yearOfCentury();
        org.joda.time.LocalDate localDate90 = localDate85.plusDays(365);
        int int91 = localDate90.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1969 + "'", int73 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644572401125,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=1,MILLISECOND=125,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) 100, 70);
        org.joda.time.DurationField durationField11 = dateTimeField7.getRangeDurationField();
        int int12 = dateTimeField7.getMinimumValue();
        long long14 = dateTimeField7.remainder((-61725542400000L));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, dateTimeZone47);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight52 = property50.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = property50.getAsText(locale56);
        java.lang.String str60 = locale56.getISO3Country();
        java.lang.String str61 = locale56.getLanguage();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(chronology64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = timeOfDay65.getFieldTypes();
        boolean boolean67 = timeOfDay63.isAfter((org.joda.time.ReadablePartial) timeOfDay65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay63.minus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay69.withPeriodAdded(readablePeriod70, 10);
        org.joda.time.TimeOfDay.Property property73 = timeOfDay69.minuteOfHour();
        int int74 = property73.getMaximumValueOverall();
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getDisplayCountry();
        int int77 = property73.getMaximumShortTextLength(locale75);
        java.lang.String str78 = locale56.getDisplayScript(locale75);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeField7.set((long) 999, "T09:37:53.435", locale56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:53.435\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3024000100L + "'", long10 == 3024000100L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FRA" + "'", str60, "FRA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr" + "'", str61, "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italia" + "'", str76, "Italia");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 7, chronology20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.Interval interval24 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval27 = interval24.withEnd((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval28 = interval3.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) 13, chronology35);
        org.joda.time.DurationField durationField39 = chronology35.hours();
        org.joda.time.Interval interval40 = interval27.withChronology(chronology35);
        org.joda.time.Duration duration41 = interval40.toDuration();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getStart();
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfWeek(4);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfYear();
        java.lang.String str56 = property55.toString();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        org.joda.time.DateTime dateTime58 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime58.withYearOfCentury(8);
        boolean boolean62 = interval40.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property63 = dateTime58.year();
        int int64 = dateTime58.getDayOfYear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[dayOfYear]" + "'", str56, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.monthOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        java.lang.String str29 = property28.toString();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        org.joda.time.DateTime dateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime32 = property28.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = property28.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = property28.addToCopy((long) 'x');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale39);
        calendar42.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar42.roll(0, (int) '4');
        int int53 = calendar42.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType56.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.dayOfMonth();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        int int66 = dateTimeField64.getMaximumTextLength(locale65);
        java.util.Map<java.lang.String, java.lang.Integer> strMap67 = calendar42.getDisplayNames(5, 4, locale65);
        java.lang.String str68 = property28.getAsText(locale65);
        java.util.Locale locale69 = locale65.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField13.getAsText(readablePartial14, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[dayOfYear]" + "'", str29, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=211,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNull(strMap67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withMonthOfYear(3);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withCenturyOfEra(58);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(chronology42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = timeOfDay43.getFieldTypes();
        boolean boolean45 = timeOfDay41.isAfter((org.joda.time.ReadablePartial) timeOfDay43);
        int int46 = timeOfDay43.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = timeOfDay43.toString(dateTimeFormatter47);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay43.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property51 = timeOfDay43.secondOfMinute();
        int int52 = property51.getMinimumValueOverall();
        org.joda.time.DurationField durationField53 = property51.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay55 = property51.addWrapFieldToCopy(16);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight35.withFields((org.joda.time.ReadablePartial) timeOfDay55);
        int[] intArray57 = timeOfDay55.getValues();
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeFormatter60.getZone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter60.withChronology(chronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter63.withDefaultYear((int) 'u');
        boolean boolean66 = dateTimeFormatter63.isOffsetParsed();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        boolean boolean74 = durationFieldType67.isSupported(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.minuteOfHour();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter63.withChronology(chronology73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter79.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser81 = dateTimeFormatter79.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = timeOfDay55.toString(dateTimeFormatter79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "T09:40:01.365" + "'", str48, "T09:40:01.365");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[9, 40, 17, 365]");
        org.junit.Assert.assertNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNull(dateTimeParser81);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay11.withYear((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay11.toDateTime(readableInstant15);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(11);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfMonth();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        boolean boolean28 = durationFieldType21.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) 1969, chronology27);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.secondOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.plusMonths((int) '4');
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate41 = localDate36.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property42 = localDate41.weekyear();
        org.joda.time.LocalDate localDate44 = localDate41.withWeekyear(3);
        org.joda.time.LocalDate localDate46 = localDate44.plusDays(0);
        org.joda.time.LocalDate localDate48 = localDate44.plusWeeks(6);
        org.joda.time.LocalDate localDate50 = localDate44.plusMonths((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.withDayOfYear(11);
        int[] intArray55 = localDate52.getValues();
        chronology27.validate((org.joda.time.ReadablePartial) localDate50, intArray55);
        boolean boolean57 = durationFieldType18.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField58 = chronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField59 = chronology27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology27.getZone();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay61.year();
        // The following exception was thrown during execution in test generation
        try {
            int int63 = property17.compareTo((org.joda.time.ReadablePartial) yearMonthDay61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int31 = gregorianCalendar29.getActualMaximum((int) (byte) 1);
        java.util.TimeZone timeZone32 = gregorianCalendar29.getTimeZone();
        java.lang.String str33 = gregorianCalendar29.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = gregorianCalendar29.getLeastMaximum(34719);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34719");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278994 + "'", int31 == 292278994);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gregory" + "'", str33, "gregory");
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = localDate10.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate12.centuryOfEra();
        org.joda.time.LocalDate.Property property14 = localDate12.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = property14.setCopy("T09:37:32.621", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:32.621\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e00\u6708" + "'", str9, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(11);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        int int12 = localDate8.getWeekyear();
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtStartOfDay();
        int int14 = localDate8.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight48.withMillis((long) (short) 100);
        int int53 = dateMidnight48.getWeekOfWeekyear();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readablePeriod15, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 1, (long) 7, chronology57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.plusMonths((int) '4');
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtStartOfDay();
        int int66 = localDate62.getWeekyear();
        org.joda.time.DateTime dateTime67 = localDate62.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period60, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight48.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 6);
        org.joda.time.LocalDate localDate71 = localDate8.minus((org.joda.time.ReadablePeriod) period60);
        int int72 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate74 = localDate8.withWeekyear(2);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.years();
        boolean boolean76 = localDate74.isSupported(durationFieldType75);
        org.joda.time.LocalDate localDate78 = localDate74.withDayOfMonth(19);
        int int79 = yearMonthDay2.compareTo((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay2.plusYears(1990);
        org.joda.time.DateTime dateTime82 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 19 + "'", int72 == 19);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(34521);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology7);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtMidnight();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay8.toDateMidnight(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.minus(readablePeriod15);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.year();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        int int20 = property17.get();
        java.lang.String str21 = property17.getAsShortText();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay24.toDateMidnight();
        boolean boolean26 = property17.equals((java.lang.Object) yearMonthDay24);
        org.joda.time.LocalDate localDate27 = localDate4.withFields((org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay24.withDayOfMonth(16);
        java.lang.String str30 = yearMonthDay29.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969" + "'", str21, "1969");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-16" + "'", str30, "1969-12-16");
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        int int15 = yearMonthDay14.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-59908633258376,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=624,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(34567, 37, 35313);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology8.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(1);
        org.joda.time.LocalDate.Property property24 = localDate19.monthOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime35.getZone();
        org.joda.time.DateTime dateTime41 = localDate19.toDateTime(localTime25, dateTimeZone40);
        org.joda.time.Interval interval42 = yearMonthDay15.toInterval(dateTimeZone40);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = interval42.overlaps(readableInterval43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime54.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTimeZone62.getName((long) (byte) 10, locale64);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone62);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.DateTime dateTime68 = interval66.getStart();
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfWeek(4);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTime.Property property72 = dateTime68.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime68.getZone();
        int int74 = property58.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay();
        int int76 = yearMonthDay75.getMonthOfYear();
        org.joda.time.LocalDate localDate77 = yearMonthDay75.toLocalDate();
        org.joda.time.DateTime dateTime78 = dateTime68.withFields((org.joda.time.ReadablePartial) localDate77);
        int int79 = dateTime68.getSecondOfDay();
        org.joda.time.DateTime dateTime82 = dateTime68.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime84 = dateTime82.withMinuteOfHour((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay85 = dateTime84.toYearMonthDay();
        org.joda.time.DateTime dateTime87 = dateTime84.withMillisOfDay((int) ' ');
        org.joda.time.DateTime dateTime89 = dateTime84.minusSeconds(22);
        boolean boolean90 = interval42.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime9.minusHours((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        int int16 = dateTime14.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 1003);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter12.getPrinter();
        boolean boolean19 = dateTimeFormatter12.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimePrinter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        int int10 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        int int12 = localDate6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withMillis((long) (short) 100);
        int int51 = dateMidnight46.getWeekOfWeekyear();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readablePeriod13, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate62 = localDate60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.getWeekyear();
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.LocalDate localDate69 = localDate6.minus((org.joda.time.ReadablePeriod) period58);
        int int70 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod71 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.LocalDate localDate73 = yearMonthDay2.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str75 = durationFieldType74.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate77 = localDate73.withFieldAdded(durationFieldType74, 352);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "halfdays" + "'", str75, "halfdays");
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property6.getAsText(locale8);
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property6.withMinimumValue();
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(3);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate17 = localDate15.minusYears(15);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) (short) 0, 14);
        boolean boolean11 = dateTimeField7.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField7.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField7.add((long) 173, 1644572267982L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572267982 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800000L + "'", long10 == 604800000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DurationField durationField11 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField13 = chronology6.minutes();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        java.lang.String str3 = timeOfDay1.toString();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusSeconds(360000000);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "T09:40:01.970" + "'", str3, "T09:40:01.970");
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime19.minusMonths(4);
        org.joda.time.DateTime dateTime25 = dateTime19.minusSeconds(5);
        org.joda.time.DateTime dateTime27 = dateTime19.plusMillis(32);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay31.getFieldTypes();
        boolean boolean33 = timeOfDay29.isAfter((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean35 = timeOfDay29.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getDurationType();
        org.joda.time.DateTime dateTime38 = dateTime19.withField(dateTimeFieldType34, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = yearMonthDay8.get(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) 13, chronology20);
        org.joda.time.Chronology chronology24 = chronology20.withUTC();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate31 = localDate26.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        org.joda.time.LocalDate.Property property33 = localDate31.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone34);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = dateTimeZone34.getName((long) 11, locale37);
        int int39 = property33.getMaximumTextLength(locale37);
        java.lang.String str40 = property33.toString();
        org.joda.time.LocalDate localDate41 = property33.roundHalfFloorCopy();
        java.util.Date date42 = localDate41.toDate();
        long long44 = chronology24.set((org.joda.time.ReadablePartial) localDate41, 66269664034534L);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(28L, chronology24);
        boolean boolean46 = localDate12.isAfter((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay45.plusDays((int) (byte) 1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[yearOfCentury]" + "'", str40, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Jan 01 00:00:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31536034534L + "'", long44 == 31536034534L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(yearMonthDay48);
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear(9);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeFormatter15.parseMillis("41");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        int int5 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfCentury(30);
        int int16 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate18 = localDate12.withYearOfEra(924);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight21 = localDate20.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.LocalTime localTime6 = timeOfDay3.toLocalTime();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.millisOfSecond();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        int int9 = property7.get();
        org.joda.time.TimeOfDay timeOfDay10 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 277 + "'", int9 == 277);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        int int35 = dateMidnight32.getMinuteOfDay();
        org.joda.time.LocalDate localDate36 = dateMidnight32.toLocalDate();
        java.lang.String str37 = dateMidnight32.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.010" + "'", str37, "1970-01-01T00:00:00.000+00:00:00.010");
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(14);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfWeek();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsShortText(locale14);
        long long16 = property13.remainder();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u661f\u671f\u56db" + "'", str15, "\u661f\u671f\u56db");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 50400000L + "'", long16 == 50400000L);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        boolean boolean62 = dateTimeFormatter61.isPrinter();
        int int63 = dateTimeFormatter61.getDefaultYear();
        boolean boolean64 = dateTimeFormatter61.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2000 + "'", int63 == 2000);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 1, (long) 7, chronology19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = interval20.toPeriod(periodType21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime46.getZone();
        int int52 = property36.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay();
        int int54 = yearMonthDay53.getMonthOfYear();
        org.joda.time.LocalDate localDate55 = yearMonthDay53.toLocalDate();
        org.joda.time.DateTime dateTime56 = dateTime46.withFields((org.joda.time.ReadablePartial) localDate55);
        int int57 = dateTime46.getSecondOfDay();
        org.joda.time.DateTime dateTime60 = dateTime46.withDurationAdded((long) 10, 1);
        java.util.Locale.LanguageRange languageRange62 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] { languageRange62 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.lang.String str72 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList70);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate76 = localDate74.withDayOfYear(11);
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfMonth();
        org.joda.time.Chronology chronology78 = localDate76.getChronology();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((java.lang.Object) str72, chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.dayOfWeek();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) 1, (long) 7, chronology83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval84.toPeriod(periodType85);
        int[] intArray89 = chronology78.get((org.joda.time.ReadablePeriod) period86, (-1L), (long) 9);
        org.joda.time.DateTime dateTime90 = dateTime46.plus((org.joda.time.ReadablePeriod) period86);
        int int91 = dateTime90.getWeekOfWeekyear();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = dateTime13.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime95 = dateTime93.plus((-62135596800010L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(16);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withZoneRetainFields(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone37.isLocalDateTimeGap(localDateTime39);
        long long42 = dateTimeZone37.nextTransition((long) 13920);
        java.lang.String str44 = dateTimeZone37.getShortName(292278983L);
        int int46 = dateTimeZone37.getOffsetFromLocal(6974852348000L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone48);
        long long51 = dateTimeZone48.previousTransition((long) 34546);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(0L, dateTimeZone48);
        long long54 = dateTimeZone37.getMillisKeepLocal(dateTimeZone48, 6L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval55 = new org.joda.time.Interval(12009600000L, (long) 924, dateTimeZone48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 13920L + "'", long42 == 13920L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 34546L + "'", long51 == 34546L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight2 = dateTime1.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar3 = dateTime1.toGregorianCalendar();
        java.lang.String str4 = gregorianCalendar3.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str4, "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime9.getZone();
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight30 = dateTime27.toDateMidnight();
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(11);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfMonth();
        org.joda.time.Chronology chronology38 = localDate36.getChronology();
        boolean boolean39 = durationFieldType32.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone58);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getStart();
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays(0);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 1, (long) 7, chronology69);
        org.joda.time.Duration duration71 = interval70.toDuration();
        org.joda.time.DateTime dateTime72 = dateTime66.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime52.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight42.withDurationAdded((org.joda.time.ReadableDuration) duration71, 106);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight30.withDurationAdded((org.joda.time.ReadableDuration) duration71, 0);
        org.joda.time.DateTime dateTime78 = dateTime9.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime80 = dateTime9.minusMonths(517);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate85 = localDate83.withDayOfYear(11);
        org.joda.time.LocalDate.Property property86 = localDate85.dayOfMonth();
        org.joda.time.Chronology chronology87 = localDate85.getChronology();
        boolean boolean88 = durationFieldType81.isSupported(chronology87);
        org.joda.time.DateTimeZone dateTimeZone89 = chronology87.getZone();
        org.joda.time.DateTime dateTime90 = dateTime9.withZone(dateTimeZone89);
        org.joda.time.DateTime dateTime91 = dateTime90.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        long long19 = interval18.getStartMillis();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        long long22 = interval18.toDurationMillis();
        boolean boolean23 = interval18.containsNow();
        org.joda.time.Period period24 = interval18.toPeriod();
        long long27 = chronology6.add((org.joda.time.ReadablePeriod) period24, 187200001L, 2022);
        org.joda.time.DateTimeField dateTimeField28 = chronology6.dayOfYear();
        java.lang.String str30 = dateTimeField28.getAsText((-61747120141911L));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 187200001L + "'", long27 == 187200001L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "114" + "'", str30, "114");
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0000-01-16");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis(40);
        boolean boolean21 = dateTime19.isAfter((long) (short) 100);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(11);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfMonth();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.LocalDate.Property property28 = localDate25.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property28.roundCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = property28.getAsText(locale30);
        org.joda.time.LocalDate localDate32 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate33 = property28.withMinimumValue();
        int int34 = localDate33.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(10L, (long) 11, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        org.joda.time.LocalDate localDate41 = localDate33.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate48 = localDate43.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property49 = localDate48.weekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        int int66 = dateTime65.getYearOfCentury();
        org.joda.time.DateTime dateTime67 = localDate48.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = dateTime65.isEqual(93L);
        org.joda.time.DateTime dateTime71 = dateTime65.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime73 = dateTime65.withMillis((long) 5);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate78 = localDate76.withDayOfYear(11);
        org.joda.time.LocalDate.Property property79 = localDate78.dayOfMonth();
        org.joda.time.Chronology chronology80 = localDate78.getChronology();
        boolean boolean81 = durationFieldType74.isSupported(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.hourOfHalfday();
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMinutes(39);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int88 = dateTime84.get(dateTimeFieldType87);
        java.lang.String str89 = dateTimeFieldType87.toString();
        int int90 = dateTime65.get(dateTimeFieldType87);
        org.joda.time.LocalDate.Property property91 = localDate41.property(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime19.withField(dateTimeFieldType87, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u661f\u671f\u65e5" + "'", str31, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 70 + "'", int66 == 70);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "weekOfWeekyear" + "'", str89, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime.Property property18 = dateTime12.hourOfDay();
        org.joda.time.Chronology chronology19 = dateTime12.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Interval interval36 = interval33.withPeriodBeforeEnd(readablePeriod35);
        boolean boolean37 = interval36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        boolean boolean48 = interval36.overlaps((org.joda.time.ReadableInterval) interval45);
        boolean boolean49 = interval23.isAfter((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Chronology chronology50 = interval23.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTime dateTime52 = dateTime12.withChronology(chronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.plusSeconds(724);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMillis(27);
        int int13 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime10.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTime.Property property16 = dateTime10.yearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 34802 + "'", int13 == 34802);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyear();
        org.joda.time.DurationField durationField10 = chronology6.halfdays();
        org.joda.time.DurationField durationField11 = chronology6.days();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight2 = dateTime1.toDateMidnight();
        org.joda.time.ReadableInstant readableInstant3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = dateTime1.compareTo(readableInstant3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addNoWrapToCopy((int) '#');
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = timeOfDay9.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2" + "'", str7, "2");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int16 = dateTimeField15.getMaximumValue();
        int int17 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 366 + "'", int16 == 366);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 366 + "'", int17 == 366);
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        boolean boolean6 = localDate1.isSupported(durationFieldType5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minus(readableDuration40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight39.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight39.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate56 = localDate51.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property57 = localDate56.weekyear();
        org.joda.time.LocalDate localDate59 = localDate56.withWeekyear(3);
        org.joda.time.LocalDate localDate61 = localDate59.plusDays(0);
        org.joda.time.LocalDate localDate63 = localDate61.withCenturyOfEra((int) (byte) 10);
        int int64 = localDate63.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone68);
        org.joda.time.Interval interval73 = interval72.toInterval();
        long long74 = interval73.getStartMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Interval interval76 = interval73.withDurationBeforeEnd(readableDuration75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 1, (long) 7, chronology79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval80.toPeriod(periodType81);
        org.joda.time.Interval interval83 = interval76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDate localDate85 = localDate63.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 1971);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period82, (int) (short) 10);
        org.joda.time.LocalDate localDate88 = localDate1.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.DateTime dateTime89 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay90 = dateTime89.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = yearMonthDay90.getFieldType(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 360 + "'", int64 == 360);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 34536);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        boolean boolean13 = durationFieldType6.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now(chronology12);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) 1969, chronology12);
        org.joda.time.DurationField durationField18 = durationFieldType3.getField(chronology12);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime2.toMutableDateTime(chronology12);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (short) 0, chronology12);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.getYearMonthDay();
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay16.toDateMidnight();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfMonth();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        org.joda.time.LocalDate localDate26 = localDate22.minusDays(1);
        org.joda.time.LocalDate.Property property27 = localDate22.monthOfYear();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime38.getZone();
        org.joda.time.DateTime dateTime44 = localDate22.toDateTime(localTime28, dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.secondOfMinute();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.DateTime dateTime55 = dateTime47.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight17.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight17.withPeriodAdded(readablePeriod57, 32770);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight17.plus(1644572211358L);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) property62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        boolean boolean14 = interval11.containsNow();
        org.joda.time.Interval interval16 = interval11.withEndMillis(1641168000000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        boolean boolean13 = interval8.containsNow();
        org.joda.time.Period period14 = interval8.toPeriod();
        org.joda.time.PeriodType periodType15 = period14.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) period14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths(47);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate19 = localDate14.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology20);
        org.joda.time.Chronology chronology24 = chronology20.withUTC();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateTime dateTime26 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(264);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = property4.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.setCopy(9);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.LocalDate localDate16 = localDate12.minusDays(1);
        org.joda.time.LocalDate.Property property17 = localDate12.monthOfYear();
        int int18 = property17.getMinimumValueOverall();
        org.joda.time.LocalDate localDate19 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property17.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDate21.toDateTime(localTime22, dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        boolean boolean38 = locale36.hasExtensions();
        boolean boolean39 = locale36.hasExtensions();
        boolean boolean40 = dateTimeZone26.equals((java.lang.Object) boolean39);
        java.lang.String str42 = dateTimeZone26.getShortName(534L);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(3787257600000L, dateTimeZone26);
        org.joda.time.DateTime dateTime45 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(34663);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34663 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setScript("Cina");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setExtension('#', "T09:37:59.133");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        long long19 = interval18.getStartMillis();
        org.joda.time.Interval interval20 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        long long30 = interval29.getStartMillis();
        org.joda.time.Interval interval31 = interval29.toInterval();
        org.joda.time.Chronology chronology32 = interval29.getChronology();
        boolean boolean33 = interval18.isBefore((org.joda.time.ReadableInterval) interval29);
        boolean boolean34 = interval29.isBeforeNow();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572403015L + "'", long19 == 1644572403015L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean24 = localDate12.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        long long35 = interval34.getStartMillis();
        org.joda.time.Interval interval36 = interval34.toInterval();
        org.joda.time.Chronology chronology37 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology37);
        boolean boolean40 = dateTimeFieldType23.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        boolean boolean43 = dateTimeField41.isLeap(1437004847520001023L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        int int35 = dateMidnight32.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withMonthOfYear((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.plus(86399990L);
        int int40 = dateMidnight39.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder43 = builder39.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        java.util.Calendar.Builder builder53 = builder39.setTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        boolean boolean59 = timeOfDay55.isAfter((org.joda.time.ReadablePartial) timeOfDay57);
        int int60 = timeOfDay57.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = timeOfDay57.toString(dateTimeFormatter61);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay57.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property65 = timeOfDay57.secondOfMinute();
        int int66 = property65.getMinimumValueOverall();
        org.joda.time.DurationField durationField67 = property65.getRangeDurationField();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        boolean boolean69 = property65.equals((java.lang.Object) locale68);
        java.util.Calendar.Builder builder70 = builder53.setLocale(locale68);
        java.lang.String str71 = property37.getAsText(locale68);
        org.joda.time.Interval interval72 = property37.toInterval();
        org.joda.time.DateMidnight dateMidnight73 = property37.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "T09:40:03.211" + "'", str62, "T09:40:03.211");
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'u');
        boolean boolean9 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        boolean boolean17 = durationFieldType10.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.minuteOfHour();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withChronology(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.parse("java.util.GregorianCalendar[time=292278993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=11,SECOND=18,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(0, 36, (int) 'u');
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(100, 743, 924);
        java.util.Calendar.Builder builder21 = builder8.setTimeOfDay(999, 273, 909, 611);
        java.util.Calendar.Builder builder25 = builder21.setDate(0, 95, 109);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder27 = builder25.setInstant(97L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addToCopy(27);
        int int13 = property8.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.minusWeeks(23);
        java.util.Date date25 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date25.setMinutes(3);
        java.util.Date date33 = new java.util.Date(3, 1970, 9, 19, 4);
        boolean boolean34 = date25.before(date33);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromDateFields(date25);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone56);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getStart();
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfWeek(4);
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime62.toDateTime(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight69.withMillis((long) (short) 100);
        int int74 = dateMidnight69.getWeekOfWeekyear();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readablePeriod36, (org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Chronology chronology76 = dateMidnight69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = dateMidnight69.getZone();
        java.lang.String str79 = dateTimeZone77.getNameKey((long) 21);
        org.joda.time.DateTime dateTime80 = timeOfDay35.toDateTimeToday(dateTimeZone77);
        org.joda.time.DateTime dateTime81 = dateTime18.toDateTime(dateTimeZone77);
        long long84 = dateTimeZone77.convertLocalToUTC(707270434546L, true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertEquals(date33.toString(), "Wed Mar 09 19:04:00 UTC 2067");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 707270434536L + "'", long84 == 707270434536L);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        boolean boolean23 = calendar6.before((java.lang.Object) interval21);
        int int24 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set(779, 34741, 31, 41, 65);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=779,MONTH=34741,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=31,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=41,MINUTE=65,SECOND=3,MILLISECOND=341,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 8, chronology18);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusMonths(39);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((-13827));
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withDayOfMonth((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withYearOfCentury(126);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter65.withDefaultYear(33);
        java.lang.Appendable appendable68 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter67.printTo(appendable68, (long) 2719);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        boolean boolean10 = dateTimeFormatter2.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = dateTimeFormatter2.parseLocalDate("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property6.addToCopy((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay10 = property6.addToCopy(8);
        java.lang.String str11 = property6.getAsText();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Calendar.Builder builder9 = builder6.setTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        calendar5.setTimeZone(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = calendar5.isSet((-716240));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -716240");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572403473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=3,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572403473,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=3,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572403474,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=3,MILLISECOND=474,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        java.util.Locale locale17 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int18 = dateTimeField13.getMaximumTextLength(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withLocale(locale17);
        java.lang.Object obj20 = locale17.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "dayofyear_HI!_+00:00:00.010");
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        int int24 = calendar6.getWeekYear();
        calendar6.set((-1), (-13827), 35, 28, 1, (int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            int int33 = calendar6.getActualMaximum(3600011);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3600011");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=-13827,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=28,MINUTE=1,SECOND=120,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        long long18 = interval14.toDurationMillis();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval14.toPeriod(periodType19);
        int int21 = period20.size();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        java.lang.String str24 = interval23.toString();
        boolean boolean25 = interval23.isBeforeNow();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969-12-31T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str24, "1969-12-31T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(106, 33, 1969, 9);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        int int16 = yearMonthDay15.getMonthOfYear();
        org.joda.time.LocalDate localDate17 = yearMonthDay15.toLocalDate();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay15.dayOfMonth();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = property18.getAsText(locale19);
        java.lang.String str22 = property18.getAsString();
        java.util.Locale locale24 = new java.util.Locale("20");
        java.util.Locale locale27 = new java.util.Locale("AM", "ISOChronology[Etc/UTC]");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale24.getDisplayScript(locale27);
        java.lang.String str30 = property18.getAsText(locale24);
        java.util.Calendar.Builder builder31 = builder12.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar32 = builder31.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11" + "'", str21, "11");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertEquals(locale24.toString(), "20");
        org.junit.Assert.assertEquals(locale27.toString(), "am_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "11" + "'", str30, "11");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = timeOfDay5.getFieldTypes();
        boolean boolean7 = timeOfDay3.isAfter((org.joda.time.ReadablePartial) timeOfDay5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay9.minuteOfHour();
        int int14 = property13.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 7, chronology43);
        org.joda.time.Duration duration45 = interval44.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTime dateTime47 = dateTime26.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology48 = dateTime26.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.joda.time.Chronology chronology51 = chronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        boolean boolean53 = durationFieldType16.isSupported(chronology51);
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.fromMillisOfDay(117L, chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay(1644580799990L, chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }
}

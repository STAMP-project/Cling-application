import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(4);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(70);
        int int30 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime27.withYear((int) 'u');
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfEra(35);
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int36 = property11.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone56);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getStart();
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfWeek(4);
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime62.toDateTime(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime46.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        java.lang.String str78 = dateTimeZone75.getName((long) (byte) 10, locale77);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone75);
        org.joda.time.Interval interval80 = interval79.toInterval();
        org.joda.time.DateTime dateTime81 = interval79.getStart();
        org.joda.time.DateTime dateTime83 = dateTime81.withDayOfWeek(4);
        org.joda.time.DateTime dateTime84 = dateTime81.toDateTime();
        org.joda.time.DateTime.Property property85 = dateTime81.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime81.getZone();
        org.joda.time.DateTime dateTime87 = dateTime71.toDateTime(dateTimeZone86);
        int int88 = dateTime87.getYearOfEra();
        org.joda.time.DateTime dateTime90 = dateTime87.plusYears(13896);
        int int91 = property11.compareTo((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Date date16 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date23 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean24 = date16.after(date23);
        date23.setDate(1969);
        calendar6.setTime(date23);
        java.lang.String str28 = date23.toGMTString();
        date23.setMonth(2190);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=6297278762000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2169,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=202,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date23.toString(), "Sat Jul 21 04:06:02 UTC 2351");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "21 Jul 2169 04:06:02 GMT" + "'", str28, "21 Jul 2169 04:06:02 GMT");
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        int int19 = dateTime15.getMillisOfSecond();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.LocalDate localDate27 = localDate23.minusDays(1);
        org.joda.time.LocalDate.Property property28 = localDate23.monthOfYear();
        int int29 = property28.getMinimumValueOverall();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime33 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localDate32.toDateTime(localTime33, dateTimeZone37);
        java.util.TimeZone timeZone43 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime44 = dateTime15.toDateTime(dateTimeZone37);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property46 = localDate45.centuryOfEra();
        org.joda.time.LocalDate.Property property47 = localDate45.dayOfWeek();
        boolean boolean48 = dateTimeZone37.equals((java.lang.Object) localDate45);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withPeriodAdded(readablePeriod50, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight49.withDurationAdded(62135599722799L, 20);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.minuteOfHour();
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(chronology62);
        java.lang.String str65 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(66L, chronology62);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = dateTimeZone71.getName((long) (byte) 10, locale73);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone71);
        org.joda.time.Interval interval76 = interval75.toInterval();
        long long77 = interval76.getStartMillis();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Interval interval79 = interval76.withDurationBeforeEnd(readableDuration78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) 1, (long) 7, chronology82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = interval83.toPeriod(periodType84);
        org.joda.time.Interval interval86 = interval79.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period85);
        org.joda.time.Duration duration87 = interval86.toDuration();
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight67.plus((org.joda.time.ReadableDuration) duration87);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight49.plus((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        calendar6.add(34703, 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-59908633258660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.year();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(713);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType7.getField(chronology13);
        java.util.Locale locale18 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter6.withLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withLocale(locale21);
        java.util.Locale.LanguageRange languageRange27 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] { languageRange27 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(11);
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfMonth();
        org.joda.time.Chronology chronology43 = localDate41.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((java.lang.Object) str37, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfWeek();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 22, chronology43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology48);
        org.joda.time.DateTime dateTime50 = yearMonthDay49.toDateTimeAtMidnight();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay49.toDateMidnight(dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay49.minus(readablePeriod56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay57.year();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.YearMonthDay yearMonthDay60 = property58.withMaximumValue();
        long long62 = chronology43.set((org.joda.time.ReadablePartial) yearMonthDay60, (long) 2000);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = localDate64.toDateTimeAtStartOfDay();
        int int68 = localDate64.getWeekyear();
        org.joda.time.DateTime dateTime69 = localDate64.toDateTimeAtStartOfDay();
        int int70 = localDate64.getDayOfMonth();
        org.joda.time.LocalDate localDate72 = localDate64.plusWeeks(100);
        org.joda.time.LocalDate localDate74 = localDate64.plusMonths((int) ' ');
        long long76 = chronology43.set((org.joda.time.ReadablePartial) localDate64, (long) 34534);
        org.joda.time.DurationField durationField77 = chronology43.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter24.withChronology(chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter24.withZoneUTC();
        java.util.Locale locale80 = dateTimeFormatter24.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate81 = org.joda.time.LocalDate.parse("T09:37:34.426", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u671d\u9c9c\u6587" + "'", str22, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9223371985593602000L + "'", long62 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 34534L + "'", long76 == 34534L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = property11.addWrapFieldToCopy(50);
        org.joda.time.YearMonthDay yearMonthDay19 = property11.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Date date16 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date23 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean24 = date16.after(date23);
        date23.setDate(1969);
        calendar6.setTime(date23);
        calendar6.setTimeInMillis(0L);
        calendar6.set(840, 523, 352, 405, (int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add(1200, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=840,MONTH=523,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=352,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=405,MINUTE=120,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jul 21 04:06:02 UTC 2169");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        int int5 = calendar4.getFirstDayOfWeek();
        java.lang.String str6 = calendar4.getCalendarType();
        int int7 = calendar4.getWeekYear();
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572538524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=18,MILLISECOND=524,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572538524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=18,MILLISECOND=524,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval11.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime22.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        boolean boolean30 = interval11.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        java.lang.String str41 = dateTimeZone34.getShortName((long) 35);
        org.joda.time.DateTime dateTime42 = dateTime28.toDateTime(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = gregorianCalendar43.getActualMaximum(39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("T09:40:10.097");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        int int13 = property11.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addNoWrapToCopy(0);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusSeconds(2719);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withSecondOfMinute(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withChronology(chronology24);
        int int26 = dateTimeFormatter22.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = timeOfDay17.toString(dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:18.590" + "'", str8, "T09:42:18.590");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "18" + "'", str12, "18");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime23 = localDate13.toDateTime(localTime14, dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        boolean boolean30 = locale28.hasExtensions();
        boolean boolean31 = locale28.hasExtensions();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) boolean31);
        java.lang.String str34 = dateTimeZone18.getShortName(534L);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(380130023L, dateTimeZone18);
        boolean boolean36 = dateTimeZone18.isFixed();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval23.withPeriodBeforeEnd(readablePeriod25);
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        boolean boolean38 = interval26.overlaps((org.joda.time.ReadableInterval) interval35);
        boolean boolean39 = interval15.equals((java.lang.Object) interval26);
        java.util.Locale.LanguageRange languageRange41 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] { languageRange41 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(11);
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfMonth();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((java.lang.Object) str51, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfWeek();
        org.joda.time.Interval interval60 = interval26.withChronology(chronology57);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology57);
        int int62 = dateTime61.getDayOfMonth();
        int int63 = dateTime61.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 11 + "'", int62 == 11);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 1, (long) 7, chronology19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = interval20.toPeriod(periodType21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime46.getZone();
        int int52 = property36.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay();
        int int54 = yearMonthDay53.getMonthOfYear();
        org.joda.time.LocalDate localDate55 = yearMonthDay53.toLocalDate();
        org.joda.time.DateTime dateTime56 = dateTime46.withFields((org.joda.time.ReadablePartial) localDate55);
        int int57 = dateTime46.getSecondOfDay();
        org.joda.time.DateTime dateTime60 = dateTime46.withDurationAdded((long) 10, 1);
        java.util.Locale.LanguageRange languageRange62 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] { languageRange62 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.lang.String str72 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList70);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate76 = localDate74.withDayOfYear(11);
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfMonth();
        org.joda.time.Chronology chronology78 = localDate76.getChronology();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((java.lang.Object) str72, chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.dayOfWeek();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) 1, (long) 7, chronology83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval84.toPeriod(periodType85);
        int[] intArray89 = chronology78.get((org.joda.time.ReadablePeriod) period86, (-1L), (long) 9);
        org.joda.time.DateTime dateTime90 = dateTime46.plus((org.joda.time.ReadablePeriod) period86);
        int int91 = dateTime90.getWeekOfWeekyear();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = dateTime13.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime95 = dateTime13.withHourOfDay(0);
        org.joda.time.DateTime dateTime97 = dateTime13.withMonthOfYear(6);
        org.joda.time.DateTime.Property property98 = dateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.withYear((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime13.withYearOfEra(35);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(27);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.centuryOfEra();
        org.joda.time.DateTime dateTime26 = dateTime22.withMillisOfDay(2059);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.property(dateTimeFieldType36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.minus((long) (short) 0);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.weekyears();
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology19);
        int int26 = dateTimeField25.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay10.plus((org.joda.time.ReadablePeriod) period16);
        int int18 = timeOfDay10.getHourOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay10.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval28.withPeriodBeforeEnd(readablePeriod30);
        boolean boolean32 = interval31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        boolean boolean43 = interval31.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.MutableInterval mutableInterval44 = interval31.toMutableInterval();
        org.joda.time.Period period45 = mutableInterval44.toPeriod();
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay10.minus((org.joda.time.ReadablePeriod) period45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(timeOfDay46);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.minusMillis(2);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMinutes(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay1.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = property4.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(0);
        int int8 = property4.getMinimumValue();
        int int9 = property4.get();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        int[] intArray58 = chronology17.get((org.joda.time.ReadablePeriod) period52, (long) 10, (long) 13);
        org.joda.time.DurationField durationField59 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField60 = chronology17.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology17);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(11);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate12 = localDate8.plusMonths((-1));
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean16 = localDate12.equals((java.lang.Object) dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = localDate20.minusDays(1);
        org.joda.time.LocalDate.Property property25 = localDate20.monthOfYear();
        int int26 = property25.getMinimumValueOverall();
        org.joda.time.LocalDate localDate27 = property25.withMaximumValue();
        org.joda.time.LocalDate localDate29 = property25.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.DateTime dateTime39 = localDate29.toDateTime(localTime30, dateTimeZone34);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = localDate12.toDateTimeAtCurrentTime(dateTimeZone34);
        long long44 = dateTimeZone34.convertLocalToUTC(1644572179680L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(65, 32772, 456825, 2025, 365, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572179670L + "'", long44 == 1644572179670L);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval7.toDurationMillis();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology19);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay20.toDateMidnight(dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.getName((long) 11);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = new org.joda.time.Interval((java.lang.Object) long9, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(dateMidnight26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addWrapFieldToCopy(28);
        org.joda.time.YearMonthDay yearMonthDay17 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay18 = property11.withMinimumValue();
        int int19 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withYearOfEra(34546);
        org.joda.time.DateMidnight.Property property39 = dateMidnight36.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(95);
        int int42 = dateMidnight41.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.LocalDate localDate14 = property8.addToCopy(13);
        org.joda.time.LocalDate localDate15 = property8.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField16 = property8.getField();
        int int19 = dateTimeField16.getDifference(1644572360684L, (long) 234000000);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "71" + "'", str12, "71");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime18.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime56 = dateTime18.withCenturyOfEra(456825);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(34615);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter8.withZone(dateTimeZone12);
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        boolean boolean20 = dateTimeFormatter18.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime27.getZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths(34534);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) 4);
        int int38 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.YearMonthDay yearMonthDay40 = property11.addToCopy(625);
        java.lang.String str41 = property11.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "year" + "'", str41, "year");
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(1);
        org.joda.time.LocalDate.Property property24 = localDate19.monthOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime35.getZone();
        org.joda.time.DateTime dateTime41 = localDate19.toDateTime(localTime25, dateTimeZone40);
        org.joda.time.Interval interval42 = yearMonthDay15.toInterval(dateTimeZone40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology44);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay45.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plusWeeks(13);
        org.joda.time.DateMidnight.Property property49 = dateMidnight46.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        org.joda.time.DateMidnight dateMidnight51 = property49.roundHalfEvenCopy();
        boolean boolean52 = dateTimeZone40.equals((java.lang.Object) dateMidnight51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtStartOfDay();
        int int58 = localDate54.getWeekyear();
        org.joda.time.DateMidnight dateMidnight59 = localDate54.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone63);
        org.joda.time.Interval interval68 = interval67.toInterval();
        long long69 = interval68.getStartMillis();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Interval interval71 = interval68.withDurationBeforeEnd(readableDuration70);
        long long72 = interval68.toDurationMillis();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        int int75 = period74.size();
        int int76 = period74.size();
        org.joda.time.Period period77 = period74.toPeriod();
        org.joda.time.LocalDate localDate78 = localDate54.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight51.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay82.minusMonths(0);
        org.joda.time.LocalDate localDate85 = yearMonthDay84.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate90 = localDate88.withDayOfYear(11);
        org.joda.time.LocalDate.Property property91 = localDate90.dayOfMonth();
        org.joda.time.Chronology chronology92 = localDate90.getChronology();
        boolean boolean93 = durationFieldType86.isSupported(chronology92);
        org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay84.withFieldAdded(durationFieldType86, (-292275054));
        boolean boolean96 = period77.isSupported(durationFieldType86);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(yearMonthDay95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusMonths(39);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minus((long) 292278994);
        int int18 = dateMidnight17.getMillisOfSecond();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateTime dateTime26 = localDate4.toDateTime(localTime10, dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime28.withSecondOfMinute((int) '#');
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withFields(readablePartial31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusSeconds(14);
        java.util.Date date35 = dateTime32.toDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter38.getZone();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withChronology(chronology40);
        int int42 = dateTimeFormatter38.getDefaultYear();
        boolean boolean43 = dateTimeFormatter38.isParser();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter38.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology46 = dateTimeFormatter45.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter45.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter45.withPivotYear((java.lang.Integer) 7);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate56 = localDate51.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property57 = localDate56.weekyear();
        org.joda.time.LocalDate localDate59 = localDate56.withWeekyear(3);
        org.joda.time.LocalDate localDate61 = localDate56.withDayOfYear((int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeFormatter64.getZone();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter64.withChronology(chronology66);
        int int68 = dateTimeFormatter64.getDefaultYear();
        boolean boolean69 = dateTimeFormatter64.isParser();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter64.withZone(dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(dateTimeZone70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.DateTime dateTime74 = localDate61.toDateTimeAtStartOfDay(dateTimeZone70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter49.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime76 = dateTime32.withZone(dateTimeZone70);
        int int78 = dateTimeZone70.getOffsetFromLocal((-19034L));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 11 09:42:35 UTC 2022");
        org.junit.Assert.assertNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(chronology46);
        org.junit.Assert.assertNull(dateTimeParser47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2000 + "'", int68 == 2000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        int int3 = property1.get();
        org.joda.time.YearMonthDay yearMonthDay4 = property1.getYearMonthDay();
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 4);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMillis(34567);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusSeconds(577);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate5.compareTo((org.joda.time.ReadablePartial) timeOfDay9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean24 = localDate12.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = localDate12.plusDays(39);
        org.joda.time.LocalDate localDate28 = localDate26.withYear(35);
        org.joda.time.LocalDate.Property property29 = localDate26.yearOfCentury();
        int int30 = property29.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long9 = dateTimeField7.roundCeiling((long) 3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay12);
        int int14 = dateTimeField7.getMaximumValue();
        int int16 = dateTimeField7.get((long) 34534);
        int int18 = dateTimeField7.getMinimumValue(1644572152309L);
        boolean boolean20 = dateTimeField7.isLeap(291599990L);
        int int22 = dateTimeField7.get(31795199990L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 43200000L + "'", long9 == 43200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        boolean boolean9 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        java.lang.Integer int11 = dateTimeFormatter8.getPivotYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths(19);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay16.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths(17);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateMidnight dateMidnight23 = property21.withMinimumValue();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay26.minus(readablePeriod33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.year();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.YearMonthDay yearMonthDay37 = property35.withMaximumValue();
        int int38 = property35.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay39 = property35.withMaximumValue();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.LocalDate localDate47 = localDate43.minusDays(1);
        org.joda.time.LocalDate.Property property48 = localDate43.monthOfYear();
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTime.Property property63 = dateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime59.getZone();
        org.joda.time.DateTime dateTime65 = localDate43.toDateTime(localTime49, dateTimeZone64);
        org.joda.time.Interval interval66 = yearMonthDay39.toInterval(dateTimeZone64);
        int int68 = dateTimeZone64.getOffsetFromLocal(9223371985593602010L);
        java.lang.String str69 = dateTimeZone64.getID();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) dateMidnight23, dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter8.withZone(dateTimeZone64);
        java.util.Locale.LanguageRange languageRange75 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] { languageRange75 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strList83);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate89 = localDate87.withDayOfYear(11);
        org.joda.time.LocalDate.Property property90 = localDate89.dayOfMonth();
        org.joda.time.Chronology chronology91 = localDate89.getChronology();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((java.lang.Object) str85, chronology91);
        org.joda.time.DateTimeZone dateTimeZone93 = chronology91.getZone();
        org.joda.time.Interval interval94 = new org.joda.time.Interval(604800000L, 6974852348000L, chronology91);
        org.joda.time.DurationField durationField95 = chronology91.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval96 = new org.joda.time.Interval((java.lang.Object) dateTimeZone64, chronology91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        int int22 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        org.joda.time.DateTime dateTime35 = dateTime28.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology37);
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay38.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay40 = dateMidnight39.toYearMonthDay();
        int int41 = yearMonthDay40.getYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        long long51 = interval50.getStartMillis();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        long long54 = interval50.toDurationMillis();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval50.toPeriod(periodType55);
        int int57 = period56.size();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay40.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight23.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 35);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight23.minus((long) 34719);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.Interval interval50 = property2.toInterval();
        org.joda.time.DateTime dateTime51 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale19.getDisplayLanguage();
        java.lang.String str22 = locale19.getDisplayCountry();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight58 = property56.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = dateTimeZone60.getName((long) (byte) 10, locale62);
        boolean boolean64 = locale62.hasExtensions();
        java.lang.String str65 = property56.getAsText(locale62);
        java.lang.String str66 = locale62.getISO3Country();
        java.lang.String str67 = locale19.getDisplayLanguage(locale62);
        java.util.Locale.setDefault(locale19);
        java.lang.String str69 = locale19.toLanguageTag();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1644572539473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=19,MILLISECOND=483,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587" + "'", str21, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "FRA" + "'", str66, "FRA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "chinois" + "'", str67, "chinois");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh" + "'", str69, "zh");
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.LocalTime localTime6 = timeOfDay3.toLocalTime();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusSeconds(2719);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.Chronology chronology11 = chronology6.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minus(readableDuration46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight45.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight45.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight53.minusDays((int) ' ');
        org.joda.time.LocalDate localDate58 = dateMidnight53.toLocalDate();
        int int59 = localDate58.getDayOfWeek();
        int int60 = localDate58.getYearOfCentury();
        org.joda.time.LocalDate.Property property61 = localDate58.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate58.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay((java.lang.Object) chronology11, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 70 + "'", int60 == 70);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        int int12 = localDate9.size();
        org.joda.time.LocalDate localDate14 = localDate9.withMonthOfYear(8);
        int int15 = localDate9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1644572134751L);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusWeeks(600);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.plusYears((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withMonthOfYear(9);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay26.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight27.toYearMonthDay();
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        long long39 = interval38.getStartMillis();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        long long42 = interval38.toDurationMillis();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = interval38.toPeriod(periodType43);
        int int45 = period44.size();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay28.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight23.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.LocalDate localDate49 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) period44, (-18));
        int int50 = localDate49.getYear();
        org.joda.time.LocalDate localDate52 = localDate49.withWeekyear(53);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(25);
        int int13 = dateTime12.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfYear();
        java.lang.String str51 = property50.toString();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.DateTime dateTime53 = property50.withMaximumValue();
        org.joda.time.DateTime.Property property54 = dateTime53.centuryOfEra();
        org.joda.time.DateTime dateTime56 = dateTime53.minusMillis(34530);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = dateTimeZone60.getName((long) (byte) 10, locale62);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone60);
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval64.getStart();
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfWeek(4);
        org.joda.time.DateTime dateTime69 = dateTime66.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime72 = dateTime66.toDateTime(dateTimeZone71);
        long long76 = dateTimeZone71.convertLocalToUTC((long) 1971, false, (long) 39);
        org.joda.time.DateTime dateTime77 = dateTime53.toDateTime(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight32.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateMidnight.Property property79 = dateMidnight32.year();
        java.lang.String str80 = property79.getAsString();
        org.joda.time.DateMidnight dateMidnight81 = property79.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField82 = property79.getDurationField();
        org.joda.time.DateMidnight dateMidnight83 = property79.roundHalfCeilingCopy();
        int int84 = property79.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[dayOfYear]" + "'", str51, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1961L + "'", long76 == 1961L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970" + "'", str80, "1970");
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-292275054) + "'", int84 == (-292275054));
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        long long89 = chronology17.add((org.joda.time.ReadablePeriod) period80, 604800000L, 32);
        org.joda.time.DurationField durationField90 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField91 = chronology17.weekyearOfCentury();
        org.joda.time.LocalDate localDate92 = org.joda.time.LocalDate.now(chronology17);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 604800192L + "'", long89 == 604800192L);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(localDate92);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        int int23 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay25 = property11.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate26 = yearMonthDay25.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay25.withMonthOfYear(34675613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34675613 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572539812,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=19,MILLISECOND=812,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = property11.getAsText(locale16);
        java.lang.String str20 = property11.getAsString();
        org.joda.time.TimeOfDay timeOfDay21 = property11.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withSecondOfMinute(38);
        int int24 = timeOfDay21.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:19.846" + "'", str8, "T09:42:19.846");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "19" + "'", str20, "19");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight36 = property33.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight37 = property33.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTime.Property property51 = dateTime47.dayOfYear();
        java.lang.String str52 = property51.toString();
        org.joda.time.DateTimeField dateTimeField53 = property51.getField();
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField53.getType();
        org.joda.time.DateMidnight.Property property56 = dateMidnight37.property(dateTimeFieldType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.DateMidnight dateMidnight59 = property56.addWrapFieldToCopy(34534);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[dayOfYear]" + "'", str52, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("1970-01-01T09:38:58.716+00:00:00.010", (double) 7164000042L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=7.164000042E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 3, 1644572444794L, chronology2);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfFloorCopy();
        boolean boolean37 = dateTimeZone1.equals((java.lang.Object) dateMidnight36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate46 = localDate39.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateTime9.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.withMillis((long) (short) 100);
        int int72 = dateMidnight67.getWeekOfWeekyear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readablePeriod34, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime84 = localDate81.toDateTimeAtStartOfDay();
        int int85 = localDate81.getWeekyear();
        org.joda.time.DateTime dateTime86 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period79, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight67.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.DateTime dateTime90 = dateTime9.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime92 = dateTime90.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime94 = dateTime92.minus(604800000L);
        int int95 = dateTime92.getWeekyear();
        org.joda.time.DateTime.Property property96 = dateTime92.dayOfMonth();
        org.joda.time.DateTime.Property property97 = dateTime92.year();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1968 + "'", int95 == 1968);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        int int10 = yearMonthDay9.size();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withYear(924);
        int int14 = yearMonthDay9.getYear();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.minusYears(35);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-11" + "'", str11, "1970-01-11");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusHours(264);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekOfWeekyear(13);
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfYear();
        int int6 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 366 + "'", int6 == 366);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        java.lang.String str26 = dateTimeField24.getAsText((long) 11);
        int int27 = dateTime14.get(dateTimeField24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusMonths(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.lang.String str44 = dateTimeZone39.getName((long) 11);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeZone39.getName((long) '4', locale46);
        java.lang.String str48 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) yearMonthDay30, 70, locale46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale53.getDisplayLanguage(locale56);
        java.lang.String str58 = locale53.getCountry();
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category59, locale60);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category59, locale62);
        java.lang.String str64 = locale53.getDisplayVariant(locale62);
        java.lang.String str66 = locale62.getExtension('x');
        java.lang.String str67 = yearMonthDay30.toString("9", locale62);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "francese" + "'", str57, "francese");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FR" + "'", str58, "FR");
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9" + "'", str67, "9");
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withMillis((long) (short) 100);
        int int52 = dateMidnight47.getWeekOfWeekyear();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readablePeriod14, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 7, chronology56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval57.toPeriod(periodType58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate63 = localDate61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtStartOfDay();
        int int65 = localDate61.getWeekyear();
        org.joda.time.DateTime dateTime66 = localDate61.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 6);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight47.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight47.minus(11L);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        java.lang.String str80 = dateTimeZone77.getName((long) (byte) 10, locale79);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone77);
        org.joda.time.Interval interval82 = interval81.toInterval();
        long long83 = interval82.getStartMillis();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Interval interval85 = interval82.withDurationBeforeEnd(readableDuration84);
        long long86 = interval82.toDurationMillis();
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval82.toPeriod(periodType87);
        int int89 = period88.size();
        int int90 = period88.size();
        org.joda.time.Period period91 = period88.toPeriod();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight73.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate((long) 9);
        boolean boolean95 = period91.equals((java.lang.Object) localDate94);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay96.minusMonths(24);
        int int99 = yearMonthDay98.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.010" + "'", str80, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(yearMonthDay98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime13.minusHours(100);
        org.joda.time.DateTime.Property property19 = dateTime18.monthOfYear();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar22 = dateTime18.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 7, chronology27);
        org.joda.time.Duration duration29 = interval28.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = dateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = dateTime10.getChronology();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) "561", chronology32);
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        int int35 = localDate33.getDayOfMonth();
        org.joda.time.LocalDate localDate37 = localDate33.plusMonths(34567);
        int int38 = localDate33.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 561 + "'", int38 == 561);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayCountry();
        int int15 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.TimeOfDay timeOfDay17 = property11.addWrapFieldToCopy(456825);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond(37);
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        boolean boolean22 = dateTimeField21.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italy" + "'", str14, "Italy");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight54.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.withDayOfMonth(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1965 + "'", int55 == 1965);
        org.junit.Assert.assertNotNull(yearMonthDay56);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        boolean boolean27 = durationFieldType20.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(23, 3, 31, 0, 6, chronology26);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(11);
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfMonth();
        org.joda.time.Chronology chronology41 = localDate39.getChronology();
        org.joda.time.LocalDate localDate43 = localDate39.minusDays(1);
        org.joda.time.LocalDate.Property property44 = localDate39.monthOfYear();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime58 = dateTime55.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime55.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime55.getZone();
        org.joda.time.DateTime dateTime61 = localDate39.toDateTime(localTime45, dateTimeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 106, dateTimeZone60);
        java.lang.String str66 = dateTimeZone60.getNameKey(292278983L);
        org.joda.time.Chronology chronology67 = chronology26.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfDay();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) ' ', (long) 13896, chronology67);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay10.withChronologyRetainFields(chronology67);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(chronology67);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight72);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMillis((int) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay1.plusSeconds(13);
        int int14 = timeOfDay1.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay1.withMinuteOfHour(30);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder25 = builder21.setDate(12, 3, 17);
        java.util.Calendar.Builder builder29 = builder21.setDate(58, 22, 2000);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone32 = calendar31.getTimeZone();
        java.util.Calendar.Builder builder33 = builder30.setTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.util.Calendar.Builder builder35 = builder21.setTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str38 = dateTimeZone36.getName(1644572245720L);
        org.joda.time.DateTime dateTime39 = timeOfDay1.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear(46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572540321,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=20,MILLISECOND=321,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withLocale(locale22);
        java.lang.Integer int24 = dateTimeFormatter21.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter21.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfWeek(4);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, dateTimeZone57);
        long long61 = dateTimeZone57.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(0L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter21.withZone(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay17.toDateMidnight(dateTimeZone57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(696, 36, 30, 927, 34868, 2025, (-1389599), dateTimeZone57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 927 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 87L + "'", long61 == 87L);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateMidnight65);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) 'a', true, (long) 4);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone14);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter23.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withChronology(chronology25);
        int int27 = dateTimeFormatter23.getDefaultYear();
        boolean boolean28 = dateTimeFormatter23.isParser();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter23.withZone(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight20.withZoneRetainFields(dateTimeZone29);
        java.lang.String str34 = dateTimeZone29.getNameKey(1173702183069990L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 87L + "'", long19 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight32);
// flaky:         org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime32.getZone();
        int int38 = property22.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay();
        int int40 = yearMonthDay39.getMonthOfYear();
        org.joda.time.LocalDate localDate41 = yearMonthDay39.toLocalDate();
        org.joda.time.DateTime dateTime42 = dateTime32.withFields((org.joda.time.ReadablePartial) localDate41);
        int int43 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime dateTime46 = dateTime32.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) 'a');
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 1969);
        org.joda.time.YearMonthDay yearMonthDay53 = dateMidnight52.toYearMonthDay();
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime48.withChronology(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        long long89 = chronology17.add((org.joda.time.ReadablePeriod) period80, 604800000L, 32);
        org.joda.time.DateTimeField dateTimeField90 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField91 = dateTimeField90.getRangeDurationField();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 604800192L + "'", long89 == 604800192L);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtStartOfDay();
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate1.plusWeeks(100);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate localDate12 = localDate9.minusYears(456825);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localDate12.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Dec 02 00:00:00 UTC 1971");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("69");
        org.joda.time.LocalDate localDate3 = localDate1.withYear(264);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((-1886), 14, 1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1886 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(31536034534L, 1644572225039L);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = dateTimeZone7.getName((long) (byte) 10, locale9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone7);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getStart();
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfWeek(4);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays(0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 1, (long) 7, chronology52);
        org.joda.time.Duration duration54 = interval53.toDuration();
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval57 = interval2.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        boolean boolean59 = interval2.isAfter(1644573600000L);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withLocale(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType13.getField(chronology19);
        java.util.Locale locale24 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int25 = dateTimeField20.getMaximumTextLength(locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter12.withLocale(locale24);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale27.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter12.withLocale(locale27);
        java.util.Locale locale34 = new java.util.Locale("", "T09:36:20.244", "1970-01-01T00:00:00.011+00:00:00.010");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withLocale(locale34);
        java.lang.String str36 = locale34.getDisplayVariant();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay39.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight40.toYearMonthDay();
        int int42 = yearMonthDay41.getYear();
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay41.dayOfMonth();
        org.joda.time.DurationField durationField44 = property43.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay46 = property43.addWrapFieldToCopy(34567);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.withMinimumValue();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.joda.time.Chronology chronology53 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField55.getType();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        int int61 = dateTimeField55.getMaximumValue((org.joda.time.ReadablePartial) localDate58);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale locale64 = builder63.build();
        java.lang.String str65 = dateTimeField55.getAsText((long) 22, locale64);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.withDayOfYear(11);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfMonth();
        org.joda.time.Chronology chronology72 = localDate70.getChronology();
        org.joda.time.LocalDate localDate74 = localDate70.minusDays(1);
        org.joda.time.LocalDate.Property property75 = localDate70.monthOfYear();
        int int76 = property75.getMinimumValueOverall();
        org.joda.time.LocalDate localDate77 = property75.withMaximumValue();
        org.joda.time.LocalDate localDate79 = property75.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime80 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale86 = java.util.Locale.FRANCE;
        java.lang.String str87 = dateTimeZone84.getName((long) (byte) 10, locale86);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone84);
        org.joda.time.DateTime dateTime89 = localDate79.toDateTime(localTime80, dateTimeZone84);
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.lang.String str92 = localDate79.toString("9", locale91);
        java.lang.String str93 = locale91.getLanguage();
        java.lang.String str94 = locale91.getDisplayName();
        java.lang.String str95 = dateTimeField55.getAsShortText(1644572163667L, locale91);
        int int96 = property43.getMaximumTextLength(locale91);
        java.lang.String str97 = locale34.getDisplayScript(locale91);
        java.util.Calendar calendar98 = java.util.Calendar.getInstance(timeZone2, locale91);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572540556,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=20,MILLISECOND=556,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean" + "'", str28, "Korean");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals(locale34.toString(), "_T09:36:20.244_1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010" + "'", str36, "1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2922789 + "'", int61 == 2922789);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "19" + "'", str65, "19");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.010" + "'", str87, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "9" + "'", str92, "9");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "en" + "'", str93, "en");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "English (Canada)" + "'", str94, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "20" + "'", str95, "20");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(calendar98);
// flaky:         org.junit.Assert.assertEquals(calendar98.toString(), "java.util.GregorianCalendar[time=1644572540557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=20,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1644572286370L);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 16, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField10.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField10.set((long) 954, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????? (????)\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateTime9.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.withMillis((long) (short) 100);
        int int72 = dateMidnight67.getWeekOfWeekyear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readablePeriod34, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime84 = localDate81.toDateTimeAtStartOfDay();
        int int85 = localDate81.getWeekyear();
        org.joda.time.DateTime dateTime86 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period79, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight67.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.DateTime dateTime90 = dateTime9.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime92 = dateTime90.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime94 = dateTime90.withMillis(172800000L);
        org.joda.time.DateTime.Property property95 = dateTime90.minuteOfDay();
        org.joda.time.DateTime dateTime96 = property95.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = dateTime96.withYearOfCentury(927);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 927 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str6 = dateTimeField4.getAsText(1676108499038L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "11" + "'", str6, "11");
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay3.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology14 = timeOfDay3.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        int int17 = dateTimeField15.getMinimumValue((long) 34662);
        int int18 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:20.724" + "'", str8, "T09:42:20.724");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 366 + "'", int18 == 366);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(1);
        org.joda.time.DateTime dateTime34 = dateTime30.minusHours(34565);
        org.joda.time.DateTime.Property property35 = dateTime34.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime34.withDayOfWeek(34521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34521 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusMonths(47);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.withYear((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime13.withYearOfEra(35);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset((long) (byte) 10);
        boolean boolean25 = dateTimeZone22.isFixed();
        int int27 = dateTimeZone22.getOffsetFromLocal((long) 10);
        long long31 = dateTimeZone22.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = dateTimeZone22.getName(10L, locale36);
        boolean boolean41 = dateTimeZone22.isStandardOffset((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(dateTimeZone22);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateTime dateTime44 = dateTime13.withFields((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate.Property property45 = localDate43.weekOfWeekyear();
        org.joda.time.LocalDate localDate46 = property45.withMaximumValue();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.joda.time.Chronology chronology53 = localDate51.getChronology();
        org.joda.time.LocalDate localDate55 = localDate51.minusDays(1);
        org.joda.time.LocalDate.Property property56 = localDate51.monthOfYear();
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = dateTimeZone61.getName((long) (byte) 10, locale63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone61);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getStart();
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfWeek(4);
        org.joda.time.DateTime dateTime70 = dateTime67.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime67.getZone();
        org.joda.time.DateTime dateTime73 = localDate51.toDateTime(localTime57, dateTimeZone72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone72);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTime();
        int int77 = property45.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay();
        int int80 = yearMonthDay79.getMonthOfYear();
        org.joda.time.LocalDate localDate81 = yearMonthDay79.toLocalDate();
        org.joda.time.YearMonthDay.Property property82 = yearMonthDay79.dayOfMonth();
        int int83 = yearMonthDay79.getDayOfMonth();
        org.joda.time.Chronology chronology84 = yearMonthDay79.getChronology();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 4, chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight((java.lang.Object) property45, chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 87L + "'", long31 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "France" + "'", str38, "France");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 11 + "'", int83 == 11);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime57.plusMinutes(0);
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getCountry();
        java.lang.String str16 = property11.getAsText(locale14);
        org.joda.time.TimeOfDay timeOfDay17 = property11.withMaximumValue();
        int int18 = property11.get();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:20.839" + "'", str8, "T09:42:20.839");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DE" + "'", str15, "DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20" + "'", str16, "20");
        org.junit.Assert.assertNotNull(timeOfDay17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes(22);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) 2922789);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusMonths((-1));
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        long long27 = interval25.toDurationMillis();
        org.joda.time.Interval interval29 = interval25.withEndMillis((long) (byte) 1);
        org.joda.time.Duration duration30 = interval25.toDuration();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.withDurationAdded((org.joda.time.ReadableDuration) duration30, 32);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight15.withCenturyOfEra(59);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay38.getFieldTypes();
        boolean boolean40 = timeOfDay36.isAfter((org.joda.time.ReadablePartial) timeOfDay38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay36.minus(readablePeriod41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.withPeriodAdded(readablePeriod43, 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 1, (long) 7, chronology48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval49.toPeriod(periodType50);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay45.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = timeOfDay45.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight15.withChronology(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) str16, chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = interval27.toPeriod(periodType28);
        long long32 = chronology22.add((org.joda.time.ReadablePeriod) period29, 87L, 1);
        java.util.Locale.LanguageRange languageRange34 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] { languageRange34 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList42);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(11);
        org.joda.time.LocalDate.Property property49 = localDate48.dayOfMonth();
        org.joda.time.Chronology chronology50 = localDate48.getChronology();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((java.lang.Object) str44, chronology50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 7, chronology54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval55.toPeriod(periodType56);
        long long60 = chronology50.add((org.joda.time.ReadablePeriod) period57, 87L, 1);
        java.util.Locale.LanguageRange languageRange62 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] { languageRange62 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.lang.String str72 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList70);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate76 = localDate74.withDayOfYear(11);
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfMonth();
        org.joda.time.Chronology chronology78 = localDate76.getChronology();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((java.lang.Object) str72, chronology78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) 1, (long) 7, chronology82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = interval83.toPeriod(periodType84);
        long long88 = chronology78.add((org.joda.time.ReadablePeriod) period85, 87L, 1);
        int[] intArray91 = chronology50.get((org.joda.time.ReadablePeriod) period85, (long) 10, (long) 13);
        long long94 = chronology22.add((org.joda.time.ReadablePeriod) period85, 604800000L, 32);
        org.joda.time.DateTime dateTime95 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField96 = chronology22.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay97 = new org.joda.time.TimeOfDay(34837, 292278994, 8, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34837 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 93L + "'", long32 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 93L + "'", long60 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 93L + "'", long88 == 93L);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 604800192L + "'", long94 == 604800192L);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMillis((int) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withSecondOfMinute(11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays(0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 1, (long) 7, chronology61);
        org.joda.time.Duration duration63 = interval62.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight46.minus((org.joda.time.ReadableDuration) duration63);
        int int66 = dateMidnight65.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.minusYears(4);
        org.joda.time.DateMidnight.Property property69 = dateMidnight65.weekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = dateMidnight65.getZone();
        org.joda.time.YearMonthDay yearMonthDay71 = dateMidnight65.toYearMonthDay();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology75);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.minusMonths(19);
        org.joda.time.DateTime dateTime79 = yearMonthDay78.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate80 = localDate73.withFields((org.joda.time.ReadablePartial) yearMonthDay78);
        org.joda.time.LocalDate.Property property81 = localDate73.era();
        org.joda.time.LocalDate localDate83 = localDate73.minusMonths(1969);
        org.joda.time.LocalDate localDate85 = localDate73.plusDays(999);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology87);
        org.joda.time.DateMidnight dateMidnight89 = yearMonthDay88.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.plusWeeks(13);
        org.joda.time.DateMidnight.Property property92 = dateMidnight89.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property92.getFieldType();
        org.joda.time.LocalDate.Property property94 = localDate85.property(dateTimeFieldType93);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight65.withField(dateTimeFieldType93, 12);
        java.lang.String str97 = dateTimeFieldType93.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay99 = timeOfDay11.withField(dateTimeFieldType93, 954);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "monthOfYear" + "'", str97, "monthOfYear");
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 22);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate5.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.weekyear();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekyear(3);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        int int19 = localDate15.getWeekyear();
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        int int21 = localDate15.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight55.withMillis((long) (short) 100);
        int int60 = dateMidnight55.getWeekOfWeekyear();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readablePeriod22, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) 1, (long) 7, chronology64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval65.toPeriod(periodType66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.plusMonths((int) '4');
        org.joda.time.DateTime dateTime72 = localDate69.toDateTimeAtStartOfDay();
        int int73 = localDate69.getWeekyear();
        org.joda.time.DateTime dateTime74 = localDate69.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period67, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight55.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 6);
        org.joda.time.LocalDate localDate78 = localDate15.minus((org.joda.time.ReadablePeriod) period67);
        int int79 = period67.size();
        org.joda.time.LocalDate localDate81 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 35);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType82.getDurationType();
        int int84 = period67.get(durationFieldType83);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 25);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(yearMonthDay86);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar calendar6 = builder0.build();
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(40, 34530, 34534, 2719);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 1, (long) 7, chronology38);
        org.joda.time.Duration duration40 = interval39.toDuration();
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime42 = dateTime21.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Chronology chronology43 = dateTime21.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.Chronology chronology46 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        boolean boolean55 = durationFieldType48.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight58 = org.joda.time.DateMidnight.now(chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.dayOfMonth();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(11);
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfMonth();
        org.joda.time.Chronology chronology65 = localDate63.getChronology();
        org.joda.time.LocalDate.Property property66 = localDate63.dayOfWeek();
        org.joda.time.LocalDate localDate67 = property66.roundCeilingCopy();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = property66.getAsText(locale68);
        int int70 = property66.get();
        org.joda.time.LocalDate localDate72 = property66.addWrapFieldToCopy(17);
        org.joda.time.LocalDate localDate73 = property66.roundHalfCeilingCopy();
        java.util.Locale locale77 = new java.util.Locale("11", "T09:35:53.481", "43");
        java.lang.String str78 = dateTimeField59.getAsShortText((org.joda.time.ReadablePartial) localDate73, locale77);
        org.joda.time.LocalDate localDate80 = localDate73.withWeekyear(576);
        long long82 = chronology43.set((org.joda.time.ReadablePartial) localDate73, (long) 34521);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) 2719, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u661f\u671f\u65e5" + "'", str69, "\u661f\u671f\u65e5");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertEquals(locale77.toString(), "11_T09:35:53.481_43");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "11" + "'", str78, "11");
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 864034521L + "'", long82 == 864034521L);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        boolean boolean42 = timeOfDay38.isAfter((org.joda.time.ReadablePartial) timeOfDay40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay38.minus(readablePeriod43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight32.withFields((org.joda.time.ReadablePartial) timeOfDay44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay49.getFieldTypes();
        boolean boolean51 = timeOfDay47.isAfter((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay47.minus(readablePeriod52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay53.plusSeconds(10);
        int int58 = timeOfDay57.getSecondOfMinute();
        boolean boolean59 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay57);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay44.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay61 = property60.withMinimumValue();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay(chronology62);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay63.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property68 = timeOfDay65.secondOfMinute();
        java.util.Locale locale70 = new java.util.Locale("T09:35:21.476");
        java.lang.String str71 = locale70.getISO3Country();
        java.lang.String str72 = property68.getAsShortText(locale70);
        java.lang.String str73 = property60.getAsShortText(locale70);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals(locale70.toString(), "t09:35:21.476");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "21" + "'", str72, "21");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "52" + "'", str73, "52");
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = property39.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight41 = property39.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plusWeeks((int) (byte) 0);
        boolean boolean44 = interval5.isBefore((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withYear(264);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear(11);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfMonth();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 7, chronology54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        org.joda.time.DateTime dateTime63 = dateTime56.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.LocalDate localDate64 = localDate50.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight46.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight46);
        org.joda.time.DateMidnight.Property property67 = dateMidnight46.era();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 14);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset((long) (byte) 10);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, (long) 16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter7.withZone(dateTimeZone9);
        boolean boolean17 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter7.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMonths(4);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfDay(70);
        org.joda.time.DateTime dateTime36 = dateTime32.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime41 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate43 = localDate38.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weeks();
        org.joda.time.DateTime dateTime46 = dateTime32.toDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "T09:38:24.511", 72000005);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 16L + "'", long15 == 16L);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(dateTimePrinter18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) (short) 0, 14);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField7.getType();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        int int13 = dateTimeField7.getMaximumTextLength(locale12);
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale12.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800000L + "'", long10 == 604800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        int int20 = property11.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks((int) '#');
        int int23 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(69);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear((int) (short) 1);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category11, locale12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfSecond();
        int int23 = dateTimeField20.getDifference((long) 11, (long) 4);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = dateTimeField20.getAsShortText(1644572124561L, locale25);
        java.util.Locale.setDefault(category11, locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale.setDefault(category11, locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter10.withLocale(locale29);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter10.getParser();
        java.lang.Appendable appendable34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTime dateTime50 = dateTime44.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        int int54 = dateTime50.getMillisOfSecond();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.withDayOfYear(11);
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfMonth();
        org.joda.time.Chronology chronology60 = localDate58.getChronology();
        org.joda.time.LocalDate localDate62 = localDate58.minusDays(1);
        org.joda.time.LocalDate.Property property63 = localDate58.monthOfYear();
        int int64 = property63.getMinimumValueOverall();
        org.joda.time.LocalDate localDate65 = property63.withMaximumValue();
        org.joda.time.LocalDate localDate67 = property63.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime68 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone72);
        org.joda.time.DateTime dateTime77 = localDate67.toDateTime(localTime68, dateTimeZone72);
        java.util.TimeZone timeZone78 = dateTimeZone72.toTimeZone();
        org.joda.time.DateTime dateTime79 = dateTime50.toDateTime(dateTimeZone72);
        org.joda.time.LocalDate localDate80 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property81 = localDate80.centuryOfEra();
        org.joda.time.LocalDate.Property property82 = localDate80.dayOfWeek();
        boolean boolean83 = dateTimeZone72.equals((java.lang.Object) localDate80);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight84.withPeriodAdded(readablePeriod85, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable34, (org.joda.time.ReadableInstant) dateMidnight84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str26, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "561" + "'", str27, "561");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeParser33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateMidnight87);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        long long5 = dateTimeField3.roundHalfFloor(1684800954L);
        long long7 = dateTimeField3.roundHalfFloor(0L);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = property14.getAsText(locale16);
        org.joda.time.LocalDate localDate18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(3);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        int int23 = localDate21.getMonthOfYear();
        org.joda.time.LocalDate localDate25 = localDate21.minusWeeks((int) (short) 0);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayVariant();
        java.lang.String str28 = locale26.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) localDate25, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1684800000L + "'", long5 == 1684800000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u661f\u671f\u65e5" + "'", str17, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        int int20 = property11.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks((int) '#');
        int int23 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        int int41 = dateTimeZone38.getOffsetFromLocal((long) '#');
        org.joda.time.DateMidnight dateMidnight42 = localDate22.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate44 = localDate22.minusYears((int) (byte) 10);
        boolean boolean46 = localDate44.equals((java.lang.Object) 34657);
        org.joda.time.Chronology chronology47 = localDate44.getChronology();
        org.joda.time.Chronology chronology48 = localDate44.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setLanguage("T09:40:22.921");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: T09:40:22.921 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.setFirstDayOfWeek(36);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        calendar4.set((int) '4', 76, (int) 'a', 33, 655, 20);
        calendar4.setTimeInMillis(1644572143252L);
        int int17 = calendar4.getWeeksInWeekYear();
        calendar4.setLenient(true);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572541361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=21,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572143252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=36,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=43,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime.Property property14 = dateTime9.monthOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        int int27 = dateTimeField25.getMaximumTextLength(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getDisplayVariant();
        int int31 = dateTimeField25.getMaximumShortTextLength(locale28);
        java.util.Calendar calendar32 = dateTime16.toCalendar(locale28);
        calendar32.setFirstDayOfWeek(793);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.setMinimalDaysInFirstWeek(1932);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "coreano" + "'", str29, "coreano");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=793,minimalDaysInFirstWeek=1932,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("53");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1932, (-58));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1932 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property6.addToCopy((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay10 = property6.addToCopy(8);
        int int12 = timeOfDay10.getValue(0);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) dateTime28, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight51.withWeekOfWeekyear(3);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight55, readableInstant56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 1, (long) 7, chronology60);
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        boolean boolean63 = interval57.overlaps((org.joda.time.ReadableInterval) interval61);
        java.lang.String str64 = interval57.toString();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(1644572286370L);
        boolean boolean67 = interval57.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime66.minusMonths(0);
        boolean boolean70 = calendar6.equals((java.lang.Object) dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61034222142469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=24,SECOND=17,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-15T00:00:00.000+00:00:00.010/2022-02-11T09:42:21.541+00:00:00.010" + "'", str64, "1970-01-15T00:00:00.000+00:00:00.010/2022-02-11T09:42:21.541+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime37.getZone();
        int int43 = property27.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime37.plusWeeks(13);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime.Property property47 = dateTime46.monthOfYear();
        org.joda.time.DateTime.Property property48 = dateTime46.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Interval interval59 = interval56.withPeriodBeforeEnd(readablePeriod58);
        boolean boolean60 = interval59.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone64);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getStart();
        boolean boolean71 = interval59.overlaps((org.joda.time.ReadableInterval) interval68);
        org.joda.time.MutableInterval mutableInterval72 = interval59.toMutableInterval();
        org.joda.time.Duration duration73 = interval59.toDuration();
        org.joda.time.DateTime dateTime74 = dateTime46.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration73);
        int int76 = dateMidnight75.getSecondOfDay();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 2000);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) ' ');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology6);
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtMidnight();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay7.toDateMidnight(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay1.toDateMidnight(dateTimeZone10);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str18 = property11.toString();
        org.joda.time.YearMonthDay yearMonthDay20 = property11.setCopy((-18));
        java.lang.String str21 = property11.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[year]" + "'", str18, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[year]" + "'", str21, "Property[year]");
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.LocalDate.Property property12 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate14 = localDate10.plusMonths((-1));
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean18 = localDate14.equals((java.lang.Object) dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withField(dateTimeFieldType17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight57 = property55.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = property33.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay22.minusDays((int) '#');
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay22.year();
        int int35 = property34.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay36 = property34.getYearMonthDay();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        boolean boolean17 = dateTimeField16.isLenient();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withSecondOfMinute(28);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval21.getStartMillis();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval21.withDurationBeforeEnd(readableDuration23);
        long long25 = interval21.toDurationMillis();
        boolean boolean26 = interval21.containsNow();
        org.joda.time.Period period27 = interval21.toPeriod();
        org.joda.time.Period period28 = period27.toPeriod();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 39);
        org.joda.time.Chronology chronology31 = timeOfDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField33 = chronology31.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight33.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight33.minus(11L);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone63);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getStart();
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays(0);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 1, (long) 7, chronology74);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight33.withDurationAdded((org.joda.time.ReadableDuration) duration76, 56);
        org.joda.time.DateMidnight.Property property80 = dateMidnight79.dayOfYear();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight79.withYear(31);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        int int23 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay25 = property11.setCopy((int) (short) 10);
        org.joda.time.DateTime dateTime26 = yearMonthDay25.toDateTimeAtMidnight();
        boolean boolean27 = dateTime26.isBeforeNow();
        int int28 = dateTime26.getWeekOfWeekyear();
        org.joda.time.Instant instant29 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime31 = dateTime26.withMillisOfDay(9);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572541893,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=21,MILLISECOND=893,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateTime9.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.withMillis((long) (short) 100);
        int int72 = dateMidnight67.getWeekOfWeekyear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readablePeriod34, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime84 = localDate81.toDateTimeAtStartOfDay();
        int int85 = localDate81.getWeekyear();
        org.joda.time.DateTime dateTime86 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period79, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight67.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.DateTime dateTime90 = dateTime9.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime92 = dateTime90.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime94 = dateTime90.withMillis(172800000L);
        org.joda.time.DateTime.Property property95 = dateTime90.minuteOfDay();
        org.joda.time.DateTime dateTime97 = property95.addToCopy(0L);
        org.joda.time.DateTime dateTime98 = property95.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str13 = locale8.getDisplayScript(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.lang.String str15 = locale12.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) '#');
        long long33 = dateTimeZone28.convertUTCToLocal((long) 11);
        java.lang.String str35 = dateTimeZone28.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime36 = localDate9.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(273);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 21L + "'", long33 == 21L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        boolean boolean16 = durationFieldType9.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology15);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) 1969, chronology15);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.secondOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate26 = localDate24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate29 = localDate24.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate32 = localDate29.withWeekyear(3);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(0);
        org.joda.time.LocalDate localDate36 = localDate32.plusWeeks(6);
        org.joda.time.LocalDate localDate38 = localDate32.plusMonths((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(11);
        int[] intArray43 = localDate40.getValues();
        chronology15.validate((org.joda.time.ReadablePartial) localDate38, intArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(2598, 99, 0, 360000000, 994, 779, 34837, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1]");
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        int int18 = property11.getMaximumValue();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = property11.getAsText(locale19);
        org.joda.time.YearMonthDay yearMonthDay21 = property11.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.Duration duration4 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        long long14 = interval13.getStartMillis();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        long long17 = interval13.toDurationMillis();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval13.toPeriod(periodType18);
        int int20 = period19.size();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Interval interval23 = interval3.toInterval();
        java.util.Locale.LanguageRange languageRange25 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] { languageRange25 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList33);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(11);
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfMonth();
        org.joda.time.Chronology chronology41 = localDate39.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((java.lang.Object) str35, chronology41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Interval interval53 = interval50.withPeriodBeforeEnd(readablePeriod52);
        boolean boolean54 = interval53.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone58);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getStart();
        boolean boolean65 = interval53.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.MutableInterval mutableInterval66 = interval53.toMutableInterval();
        org.joda.time.Duration duration67 = interval53.toDuration();
        org.joda.time.Interval interval68 = interval42.withDurationAfterStart((org.joda.time.ReadableDuration) duration67);
        boolean boolean69 = interval23.contains((org.joda.time.ReadableInterval) interval42);
        boolean boolean71 = interval23.isAfter(0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = property6.addWrapFieldToCopy(8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths((int) '4');
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate16 = localDate11.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate11.minusMonths(11);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = localDate11.toString("\u30d5\u30e9\u30f3\u30b9", locale20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean23 = localDate11.isSupported(durationFieldType22);
        java.util.Locale.LanguageRange languageRange26 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] { languageRange26 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList34);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((java.lang.Object) str36, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfWeek();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 22, chronology42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology47);
        org.joda.time.DateTime dateTime49 = yearMonthDay48.toDateTimeAtMidnight();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay48.toDateMidnight(dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay48.minus(readablePeriod55);
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay56.year();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.YearMonthDay yearMonthDay59 = property57.withMaximumValue();
        long long61 = chronology42.set((org.joda.time.ReadablePartial) yearMonthDay59, (long) 2000);
        org.joda.time.DateTimeField dateTimeField62 = chronology42.yearOfCentury();
        boolean boolean63 = durationFieldType22.isSupported(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate65 = localDate9.withFieldAdded(durationFieldType22, 994);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str21, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 9223371985593602000L + "'", long61 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plusDays((int) 'u');
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology42);
        org.joda.time.DateTime dateTime44 = yearMonthDay43.toDateTimeAtMidnight();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay43.toDateMidnight(dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay43.minus(readablePeriod50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay51.year();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.YearMonthDay yearMonthDay54 = property52.withMaximumValue();
        int int55 = property52.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property52.getFieldType();
        org.joda.time.DateMidnight.Property property57 = dateMidnight40.property(dateTimeFieldType56);
        int int58 = property57.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.era();
        long long37 = dateTimeField35.roundHalfCeiling((long) 37);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-62135596800000L) + "'", long37 == (-62135596800000L));
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(28L);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra((int) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology5);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay6.toDateMidnight();
        int int8 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears((int) '#');
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = yearMonthDay6.getFields();
        int int12 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay6);
        int int13 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate3.plusDays(7);
        org.joda.time.DateTime dateTime16 = localDate3.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateMidnight7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(106, 33, 1969, 9);
        java.util.Calendar calendar11 = builder0.build();
        java.util.Calendar.Builder builder15 = builder0.setWeekDate(0, 34521, 27);
        java.util.Calendar.Builder builder19 = builder15.setWeekDate(2022, 19, 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minus(readableDuration53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.withMillis((long) 10);
        org.joda.time.Interval interval57 = dateMidnight56.toInterval();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.withMillis(0L);
        java.util.Date date60 = dateMidnight56.toDate();
        int int61 = date60.getMinutes();
        int int62 = date60.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder63 = builder15.setInstant(date60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-61884651250991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=351,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=5,SECOND=49,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfWeek();
        org.joda.time.LocalDate localDate36 = property35.roundCeilingCopy();
        org.joda.time.LocalDate.Property property37 = localDate36.monthOfYear();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDate36, 30, locale39);
        java.util.Locale locale43 = new java.util.Locale("T09:35:39.090");
        java.lang.String str44 = dateTimeField28.getAsText(1644572211358L, locale43);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale45.getISO3Country();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear(11);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfMonth();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.centuryOfEra();
        java.lang.String str55 = dateTimeField54.toString();
        long long57 = dateTimeField54.remainder((long) 3);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.lang.String str59 = locale58.getCountry();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        int int61 = dateTimeField54.getMaximumTextLength(locale58);
        java.lang.String str62 = locale45.getDisplayCountry(locale58);
        java.lang.String str63 = locale43.getDisplayVariant(locale58);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "30" + "'", str40, "30");
        org.junit.Assert.assertEquals(locale43.toString(), "t09:35:39.090");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022" + "'", str44, "2022");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str55, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CN" + "'", str59, "CN");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c" + "'", str62, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        java.util.Date date23 = localDate12.toDate();
        int int24 = localDate12.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Apr 11 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 101 + "'", int24 == 101);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 16, locale16);
        java.lang.String str19 = dateTimeField13.getAsText((-61747120148658L));
        org.joda.time.DurationField durationField20 = dateTimeField13.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 1969);
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight1.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusDays((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear(2000);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        int int22 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str24 = dateTimeZone5.getNameKey(3L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withFields(readablePartial26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusHours(264);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekOfWeekyear(13);
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology7);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks(13);
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.withWeekyear((int) (short) -1);
        int int15 = dateMidnight14.getMinuteOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        boolean boolean23 = durationFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration55, 106);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration55, 100);
        org.joda.time.DateTime dateTime63 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration55, 0);
        org.joda.time.DateTime dateTime65 = dateTime2.plusMonths(34719);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        java.io.Writer writer13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withMillis((long) (short) 100);
        int int52 = dateMidnight47.getWeekOfWeekyear();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readablePeriod14, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 7, chronology56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval57.toPeriod(periodType58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate63 = localDate61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtStartOfDay();
        int int65 = localDate61.getWeekyear();
        org.joda.time.DateTime dateTime66 = localDate61.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 6);
        org.joda.time.YearMonthDay yearMonthDay70 = dateMidnight69.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight69.minusDays(292278993);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight69.withYearOfCentury(0);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate78 = localDate76.plusMonths((int) '4');
        org.joda.time.DateTime dateTime79 = localDate76.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate81 = localDate76.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property82 = localDate81.weekyear();
        org.joda.time.LocalDate localDate84 = localDate81.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str86 = dateTimeFieldType85.toString();
        int int87 = localDate84.get(dateTimeFieldType85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight74.withFields((org.joda.time.ReadablePartial) localDate84);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(writer13, (org.joda.time.ReadablePartial) localDate84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "dayOfYear" + "'", str86, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 360 + "'", int87 == 360);
        org.junit.Assert.assertNotNull(dateMidnight88);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.plusMonths((int) '4');
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate8 = localDate3.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology9);
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DurationField durationField15 = chronology9.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(14, 1968, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths(17);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateMidnight dateMidnight11 = property9.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight12 = property9.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight13 = property9.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight14 = property9.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = property9.setCopy(34723);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        int int7 = property6.get();
        java.lang.String str8 = property6.getName();
        org.joda.time.TimeOfDay timeOfDay9 = property6.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        java.util.Locale locale12 = new java.util.Locale("38");
        java.lang.String str13 = property10.getAsShortText(locale12);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale12.toString(), "38");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "22" + "'", str13, "22");
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        java.lang.String str26 = dateTimeField24.getAsText((long) 11);
        int int27 = dateTime14.get(dateTimeField24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusMonths(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.lang.String str44 = dateTimeZone39.getName((long) 11);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeZone39.getName((long) '4', locale46);
        java.lang.String str48 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) yearMonthDay30, 70, locale46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology51);
        org.joda.time.DateTime dateTime53 = yearMonthDay52.toDateTimeAtMidnight();
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay52.toDateMidnight(dateTimeZone55);
        java.lang.String str60 = dateTimeZone55.getName((long) 11);
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = dateTimeZone55.getName((long) '4', locale62);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale locale65 = builder64.build();
        java.util.Locale.Builder builder66 = builder64.clear();
        java.util.Locale.Builder builder67 = builder64.clear();
        java.util.Locale locale68 = builder67.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter71.withOffsetParsed();
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withLocale(locale73);
        java.lang.String str75 = locale73.getVariant();
        java.util.Locale.Builder builder76 = builder67.setLocale(locale73);
        java.lang.String str77 = locale62.getDisplayVariant(locale73);
        java.lang.String str78 = locale73.toLanguageTag();
        java.lang.String str79 = dateTimeField24.getAsText((long) 35313, locale73);
        int int81 = dateTimeField24.get(1640995200000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(dateMidnight58);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fr-CA" + "'", str78, "fr-CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.monthOfYear();
        int int15 = dateTimeField13.getMaximumValue(2303L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate7.weekyear();
        org.joda.time.LocalDate localDate10 = localDate7.withWeekyear(3);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = localDate7.toDateTime(localTime12, dateTimeZone16);
        long long24 = dateTimeZone16.adjustOffset((long) 41, false);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone16.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay0.toDateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight27.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.plusDays(13920);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate34 = localDate32.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate37 = localDate32.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property38 = localDate37.weekyear();
        org.joda.time.LocalDate.Property property39 = localDate37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(dateTimeZone40);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = dateTimeZone40.getName((long) 11, locale43);
        int int45 = property39.getMaximumTextLength(locale43);
        org.joda.time.LocalDate localDate46 = property39.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(11);
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfMonth();
        org.joda.time.Chronology chronology55 = localDate53.getChronology();
        boolean boolean56 = durationFieldType49.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(chronology55);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) 1969, chronology55);
        long long64 = chronology55.add((-5178038399999L), (long) 32772, 269);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone68);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getStart();
        org.joda.time.Period period75 = interval72.toPeriod();
        int[] intArray77 = chronology55.get((org.joda.time.ReadablePeriod) period75, (long) (short) 100);
        org.joda.time.LocalDate localDate79 = localDate46.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 106);
        int int80 = yearMonthDay30.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 41L + "'", long24 == 41L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-5178029584331L) + "'", long64 == (-5178029584331L));
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(12);
        java.lang.String str14 = property11.getName();
        org.joda.time.DurationField durationField15 = property11.getDurationField();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category17, locale20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfYear();
        org.joda.time.DateTime dateTime37 = dateTime31.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property41 = dateTime37.yearOfEra();
        org.joda.time.DurationField durationField42 = property41.getLeapDurationField();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(11);
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.Chronology chronology48 = localDate46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(11);
        int int56 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDate53);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale locale59 = builder58.build();
        java.lang.String str60 = dateTimeField50.getAsText((long) 22, locale59);
        java.lang.String str61 = locale59.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        java.lang.String str67 = locale65.getISO3Language();
        java.lang.String str68 = locale59.getDisplayName(locale65);
        int int69 = property41.getMaximumShortTextLength(locale59);
        java.util.Locale locale70 = locale59.stripExtensions();
        java.util.Locale.setDefault(category17, locale59);
        java.util.Locale locale72 = java.util.Locale.getDefault(category17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay73 = property11.setCopy("T09:37:12.444", locale72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:12.444\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:22.840" + "'", str8, "T09:42:22.840");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondOfMinute" + "'", str14, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2922789 + "'", int56 == 2922789);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "19" + "'", str60, "19");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fra" + "'", str67, "fra");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayCountry();
        int int15 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale19.getDisplayScript();
        java.lang.String str25 = property11.getAsShortText(locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(locale19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italy" + "'", str14, "Italy");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "French (France)" + "'", str23, "French (France)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "42" + "'", str25, "42");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FR" + "'", str26, "FR");
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int int26 = localDate6.getDayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Interval interval43 = interval40.withPeriodBeforeEnd(readablePeriod42);
        boolean boolean44 = interval43.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        boolean boolean55 = interval43.overlaps((org.joda.time.ReadableInterval) interval52);
        boolean boolean56 = interval30.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Chronology chronology57 = interval30.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) localDate6, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology60);
        org.joda.time.DateTime dateTime62 = yearMonthDay61.toDateTimeAtMidnight();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight67 = yearMonthDay61.toDateMidnight(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay61.minus(readablePeriod68);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay69.year();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        org.joda.time.YearMonthDay yearMonthDay72 = property70.withMaximumValue();
        int int73 = property70.get();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        java.lang.String str78 = dateTimeZone75.getName((long) (byte) 10, locale77);
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale77);
        int int81 = property70.getMaximumTextLength(locale77);
        int int82 = property70.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay84 = property70.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate85 = yearMonthDay84.toLocalDate();
        int[] intArray87 = chronology57.get((org.joda.time.ReadablePartial) localDate85, 43200000L);
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(chronology57);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644572542877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=22,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1]");
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval9.getStartMillis();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval9.withDurationBeforeEnd(readableDuration11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval9.toPeriod(periodType14);
        int int16 = period15.size();
        org.joda.time.MutablePeriod mutablePeriod17 = period15.toMutablePeriod();
        int int19 = mutablePeriod17.getValue(5);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) mutablePeriod17);
        boolean boolean22 = interval20.isAfter(30L);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        int int15 = date6.getTimezoneOffset();
        int int16 = date6.getMonth();
        java.lang.String str17 = date6.toLocaleString();
        date6.setMonth(13896);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromDateFields(date6);
        date6.setTime((long) 1935);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:01 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7 mars 2164 04:06:02" + "'", str17, "7 mars 2164 04:06:02");
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale3);
        calendar7.set(1965, 50, 35, 47, 456825);
        // The following exception was thrown during execution in test generation
        try {
            calendar7.setWeekDate(34887557, 58, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572543034,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=23,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1965,MONTH=50,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=35,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=47,MINUTE=456825,SECOND=23,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 360);
        int int2 = yearMonthDay1.size();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.minusYears(32770);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears(0);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.joda.time.LocalDate.Property property9 = localDate7.monthOfYear();
        int int10 = localDate7.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 308 + "'", int10 == 308);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime23 = localDate13.toDateTime(localTime14, dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        boolean boolean30 = locale28.hasExtensions();
        boolean boolean31 = locale28.hasExtensions();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) boolean31);
        java.lang.String str34 = dateTimeZone18.getShortName(534L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(3787257600000L, dateTimeZone18);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        java.util.Set<java.lang.Character> charSet44 = locale42.getExtensionKeys();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale42);
        java.util.Set<java.lang.Character> charSet46 = locale42.getExtensionKeys();
        java.util.Locale locale50 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.lang.String str51 = locale42.getDisplayScript(locale50);
        java.lang.String str52 = dateTimeZone18.getShortName((long) 28, locale42);
        java.lang.String str53 = locale42.getScript();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572543065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=23,MILLISECOND=65,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals(locale50.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfDay((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withChronology(chronology20);
        int int22 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter18.withDefaultYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        java.util.TimeZone timeZone33 = dateTimeZone28.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter24.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime15.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime15.plusDays(2022);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.minusWeeks((int) (byte) -1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfCentury();
        java.lang.String str8 = property7.toString();
        int int9 = property7.get();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[yearOfCentury]" + "'", str8, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = property40.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = property40.getAsText(locale46);
        java.lang.String str50 = locale46.getISO3Country();
        java.util.Locale locale53 = new java.util.Locale("271", "T09:35:18.216");
        java.lang.String str54 = locale53.getVariant();
        java.lang.String str55 = locale46.getDisplayCountry(locale53);
        boolean boolean56 = locale53.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter6.withLocale(locale53);
        boolean boolean58 = dateTimeFormatter6.isPrinter();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate65 = localDate63.withDayOfYear(11);
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfMonth();
        org.joda.time.Chronology chronology67 = localDate65.getChronology();
        boolean boolean68 = durationFieldType61.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight71 = org.joda.time.DateMidnight.now(chronology67);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 2, (long) 1969, chronology67);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Chronology chronology74 = chronology67.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField75 = chronology67.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter6.withChronology(chronology67);
        org.joda.time.DurationField durationField77 = chronology67.years();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FRA" + "'", str50, "FRA");
        org.junit.Assert.assertEquals(locale53.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "France" + "'", str55, "France");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = dateTime34.withDate(7, 6, 4);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear(1971);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillisOfSecond(55);
        org.joda.time.DateTime.Property property59 = dateTime56.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        long long6 = java.util.Date.UTC(1972, 0, 99, 72000005, (int) (byte) -1, 360000000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 319589787540000L + "'", long6 == 319589787540000L);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withChronology(chronology5);
        int int7 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withDefaultYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        java.util.TimeZone timeZone18 = dateTimeZone13.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter9.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.parse("Dec", dateTimeFormatter19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        int int37 = dateMidnight32.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.withYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight41 = dateMidnight32.withDayOfYear((-907));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -907 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDate8.getFields();
        int int10 = localDate8.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate18 = property17.roundCeilingCopy();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        boolean boolean20 = localDate8.isAfter((org.joda.time.ReadablePartial) localDate19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate19.withYearOfCentury((-58));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -58 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate15 = localDate10.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.LocalDate localDate18 = localDate15.withWeekyear(3);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTime(localTime20, dateTimeZone24);
        long long32 = dateTimeZone24.adjustOffset((long) 41, false);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay8.toDateMidnight(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter7.withZone(dateTimeZone24);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("T09:37:04.866");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter36.withLocale(locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter36.withDefaultYear(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime43 = dateTimeFormatter36.parseMutableDateTime("1970-01-11");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41L + "'", long32 == 41L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.add(2000, 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572543283,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=23,MILLISECOND=283,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.util.Date date3 = new java.util.Date(34663, 2059, 34521);
        java.lang.String str4 = date3.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 03 00:00:00 UTC 36829");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sat Feb 03 00:00:00 UTC 36829" + "'", str4, "Sat Feb 03 00:00:00 UTC 36829");
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        boolean boolean42 = timeOfDay38.isAfter((org.joda.time.ReadablePartial) timeOfDay40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay38.minus(readablePeriod43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight32.withFields((org.joda.time.ReadablePartial) timeOfDay44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay49.getFieldTypes();
        boolean boolean51 = timeOfDay47.isAfter((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay47.minus(readablePeriod52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay53.plusSeconds(10);
        int int58 = timeOfDay57.getSecondOfMinute();
        boolean boolean59 = timeOfDay44.isEqual((org.joda.time.ReadablePartial) timeOfDay57);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay44.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay61 = property60.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay62 = property60.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.withDayOfWeek(4);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMinutes(1969);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        int int80 = dateTimeZone78.getOffset((long) (byte) 10);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime82 = dateTime76.withZone(dateTimeZone78);
        org.joda.time.DateTime.Property property83 = dateTime76.hourOfDay();
        int int84 = dateTime76.getDayOfMonth();
        org.joda.time.DateTime dateTime86 = dateTime76.minus((long) 34615);
        org.joda.time.DateTime dateTime87 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 33 + "'", int58 == 33);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setYear(11);
        int int17 = date13.getYear();
        int int18 = date13.getHours();
        int int19 = date13.getMinutes();
        int int20 = date13.getSeconds();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 07 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addWrapFieldToCopy(16);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMillis(0);
        int int18 = timeOfDay15.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:23.391" + "'", str8, "T09:42:23.391");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 42 + "'", int18 == 42);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMinutes(11);
        org.joda.time.DateTime.Property property16 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.withMaximumValue();
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds(69);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 1429200000);
        java.io.Writer writer8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        boolean boolean14 = timeOfDay10.isAfter((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime35 = dateTime30.withDurationAdded(0L, 106);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer8, (org.joda.time.ReadableInstant) dateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 1969);
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight1.toYearMonthDay();
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        int int6 = dateTimeField4.getMinimumValue(1646956800000L);
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] { languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList18);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) str20, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 7, chronology30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval31.toPeriod(periodType32);
        long long36 = chronology26.add((org.joda.time.ReadablePeriod) period33, 87L, 1);
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] { languageRange38 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((java.lang.Object) str48, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 1, (long) 7, chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval59.toPeriod(periodType60);
        long long64 = chronology54.add((org.joda.time.ReadablePeriod) period61, 87L, 1);
        int[] intArray67 = chronology26.get((org.joda.time.ReadablePeriod) period61, (long) 10, (long) 13);
        org.joda.time.DurationField durationField68 = chronology26.months();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 'u', chronology26);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology26);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        java.util.Locale.LanguageRange languageRange73 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] { languageRange73 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strList81);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate87 = localDate85.withDayOfYear(11);
        org.joda.time.LocalDate.Property property88 = localDate87.dayOfMonth();
        org.joda.time.Chronology chronology89 = localDate87.getChronology();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((java.lang.Object) str83, chronology89);
        long long91 = interval90.getStartMillis();
        org.joda.time.Interval interval92 = interval90.toInterval();
        long long93 = interval90.getStartMillis();
        org.joda.time.Period period94 = interval90.toPeriod();
        int[] intArray96 = chronology71.get((org.joda.time.ReadablePeriod) period94, (long) 31);
        int int97 = dateTimeField4.getMinimumValue(readablePartial7, intArray96);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 93L + "'", long36 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 93L + "'", long64 == 93L);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(chronology89);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1644572543449L + "'", long91 == 1644572543449L);
        org.junit.Assert.assertNotNull(interval92);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1644572543449L + "'", long93 == 1644572543449L);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.getYearMonthDay();
        int int17 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay18 = property11.getYearMonthDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withLocale(locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.Duration duration53 = interval52.toDuration();
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime55 = dateTime34.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology56 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfMonth();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate61 = localDate59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime62 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate64 = localDate59.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate64.weekyear();
        org.joda.time.LocalDate localDate67 = localDate64.withWeekyear(3);
        org.joda.time.LocalDate localDate69 = localDate64.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = dateTimeZone71.getName((long) (byte) 10, locale73);
        org.joda.time.Interval interval75 = localDate64.toInterval(dateTimeZone71);
        int[] intArray77 = chronology56.get((org.joda.time.ReadablePartial) localDate64, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter22.withChronology(chronology56);
        org.joda.time.Chronology chronology79 = dateTimeFormatter78.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter78.withOffsetParsed();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.util.Locale locale82 = locale81.stripExtensions();
        java.lang.String str83 = locale82.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter80.withLocale(locale82);
        int int85 = property11.getMaximumShortTextLength(locale82);
        java.lang.String str86 = locale82.getISO3Language();
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = locale82.getDisplayLanguage(locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "IT" + "'", str83, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ita" + "'", str86, "ita");
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromCalendarFields(calendar6);
        calendar6.setLenient(false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61034222142428,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=24,SECOND=17,MILLISECOND=572,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.DateTime dateTime23 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str24 = timeOfDay3.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "T09:42:23.597" + "'", str24, "T09:42:23.597");
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        long long15 = dateTimeField13.roundFloor(1644572169028L);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate22 = localDate17.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate25 = localDate22.withWeekyear(3);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(0);
        org.joda.time.LocalDate localDate29 = localDate27.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays(0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.Duration duration61 = interval60.toDuration();
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime63 = dateTime42.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Chronology chronology64 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate69 = localDate67.plusMonths((int) '4');
        org.joda.time.DateTime dateTime70 = localDate67.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate72 = localDate67.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property73 = localDate72.weekyear();
        org.joda.time.LocalDate localDate75 = localDate72.withWeekyear(3);
        org.joda.time.LocalDate localDate77 = localDate72.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = localDate72.toInterval(dateTimeZone79);
        int[] intArray85 = chronology64.get((org.joda.time.ReadablePartial) localDate72, (long) 17);
        int int86 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDate31, intArray85);
        long long89 = dateTimeField13.getDifferenceAsLong((long) 273, (long) 99);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572169028L + "'", long15 == 1644572169028L);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 86399999 + "'", int86 == 86399999);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 174L + "'", long89 == 174L);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField21 = chronology18.centuries();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) -1, chronology18);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.secondOfMinute();
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(65);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(1);
        org.joda.time.LocalDate localDate38 = localDate36.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = localDate38.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property40 = localDate38.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDate38.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfWeek(4);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(dateTimeZone57);
        int int60 = dateTimeZone57.getOffsetFromLocal((long) '#');
        long long62 = dateTimeZone57.convertUTCToLocal((long) 11);
        java.lang.String str64 = dateTimeZone57.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime65 = localDate38.toDateTimeAtMidnight(dateTimeZone57);
        long long67 = dateTimeZone28.getMillisKeepLocal(dateTimeZone57, (long) 34530);
        org.joda.time.Chronology chronology68 = chronology26.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 21L + "'", long62 == 21L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 234034520L + "'", long67 == 234034520L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(0L, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime17.withFieldAdded(durationFieldType21, 59);
        java.lang.String str24 = durationFieldType21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "seconds" + "'", str24, "seconds");
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        long long89 = chronology17.add((org.joda.time.ReadablePeriod) period80, 604800000L, 32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType91 = period80.getFieldType(581);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 604800192L + "'", long89 == 604800192L);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property13.getDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(20);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property21.setCopy("T09:35:23.686");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:35:23.686\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder18 = builder0.setDate((int) (byte) 100, 47, 34534);
        java.util.Calendar.Builder builder20 = builder0.setLenient(true);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder25 = builder21.setDate(6, (int) '#', 12);
        java.util.Calendar calendar26 = builder21.build();
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromCalendarFields(calendar26);
        java.util.TimeZone timeZone28 = calendar26.getTimeZone();
        java.util.Calendar.Builder builder29 = builder0.setTimeZone(timeZone28);
        java.util.Calendar calendar30 = builder29.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-55904428800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=198,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=169,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now(chronology8);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay2.minusDays(13920);
        org.joda.time.Chronology chronology13 = yearMonthDay2.getChronology();
        org.joda.time.DateTime dateTime14 = yearMonthDay2.toDateTimeAtCurrentTime();
        int[] intArray15 = yearMonthDay2.getValues();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay2.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate24 = localDate19.minusDays(7);
        int int25 = yearMonthDay2.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        boolean boolean66 = dateTimeFormatter65.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter65.getParser();
        java.io.Writer writer68 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter65.printTo(writer68, 1644572485050L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(dateTimeParser67);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.minuteOfHour();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(chronology6);
        java.lang.String str9 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(66L, chronology6);
        java.lang.String str13 = dateMidnight11.toString("\u6cd5\u56fd");
        java.util.Locale.LanguageRange languageRange16 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange16 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate30 = localDate28.withDayOfYear(11);
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfMonth();
        org.joda.time.Chronology chronology32 = localDate30.getChronology();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((java.lang.Object) str26, chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 1, (long) 7, chronology36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        long long42 = chronology32.add((org.joda.time.ReadablePeriod) period39, 87L, 1);
        java.util.Locale.LanguageRange languageRange44 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] { languageRange44 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList52);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.withDayOfYear(11);
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfMonth();
        org.joda.time.Chronology chronology60 = localDate58.getChronology();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((java.lang.Object) str54, chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) 1, (long) 7, chronology64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval65.toPeriod(periodType66);
        long long70 = chronology60.add((org.joda.time.ReadablePeriod) period67, 87L, 1);
        int[] intArray73 = chronology32.get((org.joda.time.ReadablePeriod) period67, (long) 10, (long) 13);
        org.joda.time.DurationField durationField74 = chronology32.months();
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) 'u', chronology32);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField77 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField78 = chronology32.seconds();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DurationField durationField80 = chronology32.millis();
        boolean boolean81 = dateMidnight11.equals((java.lang.Object) chronology32);
        org.joda.time.DateTimeField dateTimeField82 = chronology32.minuteOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate.Property property84 = localDate83.dayOfMonth();
        org.joda.time.LocalDate.Property property85 = localDate83.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate87 = property85.setCopy("T09:35:53.481");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:35:53.481\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u6cd5\u56fd" + "'", str13, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 93L + "'", long42 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 93L + "'", long70 == 93L);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy(32);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((long) 12);
        org.joda.time.DateMidnight.Property property45 = dateMidnight42.weekyear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.withYearOfEra(1971);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfWeek(4);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(chronology61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = timeOfDay62.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = timeOfDay62.getFieldTypes();
        org.joda.time.DateTime dateTime65 = dateTime60.withFields((org.joda.time.ReadablePartial) timeOfDay62);
        org.joda.time.DateTime.Property property66 = dateTime60.hourOfDay();
        org.joda.time.DateTime dateTime67 = property66.withMinimumValue();
        org.joda.time.DateTime dateTime68 = property66.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        java.lang.String str71 = dateTimeFieldType69.getName();
        org.joda.time.DateTime dateTime73 = dateTime68.withField(dateTimeFieldType69, 95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight75 = dateMidnight42.withField(dateTimeFieldType69, 56100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56100 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "weekyearOfCentury" + "'", str71, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.withMinimumValue();
        java.util.Locale locale9 = new java.util.Locale("T09:36:03.541", "T09:38:37.557", "T09:37:09.842");
        java.lang.String str10 = property2.getAsText(locale9);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale9.toString(), "t09:36:03.541_T09:38:37.557_T09:37:09.842");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withYear(7);
        int int17 = dateMidnight16.getDayOfWeek();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        int int13 = dateTime11.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.weekyears();
        org.joda.time.DateTime dateTime23 = dateTime11.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone63);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getStart();
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfWeek(4);
        org.joda.time.DateTime dateTime72 = dateTime69.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone79);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getStart();
        org.joda.time.DateTime dateTime87 = dateTime85.withDayOfWeek(4);
        org.joda.time.DateTime dateTime88 = dateTime85.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime91 = dateTime85.toDateTime(dateTimeZone90);
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, dateTimeZone90);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight92.withMillis((long) (byte) 100);
        org.joda.time.Chronology chronology95 = dateMidnight92.getChronology();
        org.joda.time.DurationField durationField96 = chronology95.minutes();
        org.joda.time.DateTime dateTime97 = dateTime57.withChronology(chronology95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime99 = dateTime57.withDayOfWeek(273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 273 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.LocalDate localDate22 = localDate18.minusDays(1);
        org.joda.time.LocalDate.Property property23 = localDate18.monthOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime34.getZone();
        org.joda.time.DateTime dateTime40 = localDate18.toDateTime(localTime24, dateTimeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval48.toPeriod(periodType49);
        org.joda.time.DateTime dateTime51 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight11.minus((org.joda.time.ReadablePeriod) period50);
        boolean boolean53 = dateMidnight52.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfMonth(25);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime72 = dateTime70.withMillisOfSecond(17);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfCentury();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.Duration duration78 = interval77.toDuration();
        org.joda.time.DateTime dateTime79 = dateTime72.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight52.minus((org.joda.time.ReadableDuration) duration78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.withMonthOfYear(120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusDays(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusMonths(19);
        int int25 = yearMonthDay22.size();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay22.plus(readablePeriod26);
        org.joda.time.Interval interval28 = yearMonthDay22.toInterval();
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = interval28.isBefore(readableInstant29);
        org.joda.time.DateTime dateTime31 = interval28.getEnd();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 1, (long) 7, chronology34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval35.toPeriod(periodType36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtStartOfDay();
        int int43 = localDate39.getWeekyear();
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval47 = interval45.withEndMillis((long) 9);
        org.joda.time.DateTime dateTime48 = interval45.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 1, (long) 7, chronology56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval57.toPeriod(periodType58);
        org.joda.time.DateTime dateTime60 = dateTime53.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology62);
        org.joda.time.DateMidnight dateMidnight64 = yearMonthDay63.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay65 = dateMidnight64.toYearMonthDay();
        int int66 = yearMonthDay65.getYear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = dateTimeZone70.getName((long) (byte) 10, locale72);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone70);
        org.joda.time.Interval interval75 = interval74.toInterval();
        long long76 = interval75.getStartMillis();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Interval interval78 = interval75.withDurationBeforeEnd(readableDuration77);
        long long79 = interval75.toDurationMillis();
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval75.toPeriod(periodType80);
        int int82 = period81.size();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay65.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadablePeriod) period81);
        org.joda.time.PeriodType periodType85 = period81.getPeriodType();
        org.joda.time.Period period86 = interval45.toPeriod(periodType85);
        org.joda.time.Period period87 = interval28.toPeriod(periodType85);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay88.minusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay88.plusDays((-1704114));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(yearMonthDay92);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusMonths((int) '4');
        int int64 = yearMonthDay56.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay56.dayOfMonth();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.withDayOfYear(11);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfMonth();
        org.joda.time.Chronology chronology72 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.millisOfSecond();
        org.joda.time.DurationField durationField74 = chronology72.minutes();
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) 13, chronology72);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone79);
        org.joda.time.Interval interval84 = interval83.toInterval();
        long long85 = interval84.getStartMillis();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Interval interval87 = interval84.withDurationBeforeEnd(readableDuration86);
        long long88 = interval84.toDurationMillis();
        boolean boolean89 = interval84.containsNow();
        org.joda.time.Period period90 = interval84.toPeriod();
        long long93 = chronology72.add((org.joda.time.ReadablePeriod) period90, 187200001L, 2022);
        org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay56.withPeriodAdded((org.joda.time.ReadablePeriod) period90, 14);
        org.joda.time.Interval interval96 = yearMonthDay95.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 187200001L + "'", long93 == 187200001L);
        org.junit.Assert.assertNotNull(yearMonthDay95);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = dateTimeField15.getAsText(14, locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone8, locale20);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight60 = property58.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTimeZone62.getName((long) (byte) 10, locale64);
        boolean boolean66 = locale64.hasExtensions();
        java.lang.String str67 = property58.getAsText(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone8, locale64);
        calendar68.setTimeInMillis(534L);
        calendar68.set(32, 11, (int) (short) 100, 13920, (int) (short) 100);
        calendar68.set(13, 31, 397, 6, (int) (short) -1);
        calendar68.setFirstDayOfWeek(576);
        org.joda.time.LocalDate localDate85 = org.joda.time.LocalDate.fromCalendarFields(calendar68);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14" + "'", str23, "14");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572544144,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=154,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-61641453659466,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=576,minimalDaysInFirstWeek=4,ERA=1,YEAR=16,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=244,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=0,MILLISECOND=544,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate85);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(13920);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate12.withDayOfMonth(593);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 593 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar54 = dateMidnight51.toGregorianCalendar();
        gregorianCalendar54.setMinimalDaysInFirstWeek(0);
        gregorianCalendar54.set(661, 42, 34, 793, (-1707470541), 7070);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date6.setMinutes(3);
        java.time.Instant instant9 = date6.toInstant();
        date6.setTime(604800000L);
        date6.setHours(360);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromDateFields(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 23 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setDate(1969);
        date13.setYear(6);
        java.util.Date date25 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date32 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean33 = date25.after(date32);
        date32.setDate(1969);
        date32.setYear(6);
        boolean boolean38 = date13.before(date32);
        date13.setYear((int) (short) 10);
        int int41 = date13.getMonth();
        int int42 = date13.getYear();
        int int43 = date13.getDay();
        int int44 = date13.getHours();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jul 21 04:06:02 UTC 1915");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jul 21 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate.Property property9 = localDate1.era();
        int int10 = localDate1.size();
        org.joda.time.LocalDate localDate12 = localDate1.plusMonths(106);
        org.joda.time.LocalDate.Property property13 = localDate1.yearOfEra();
        org.joda.time.DateTime dateTime14 = localDate1.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        long long24 = interval23.getStartMillis();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.Interval interval33 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 1, (long) 7, chronology36);
        org.joda.time.Duration duration38 = interval37.toDuration();
        boolean boolean39 = interval26.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval48.toPeriod(periodType49);
        org.joda.time.DateTime dateTime51 = dateTime44.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology53);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay54.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        int int57 = yearMonthDay56.getYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = dateTimeZone61.getName((long) (byte) 10, locale63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone61);
        org.joda.time.Interval interval66 = interval65.toInterval();
        long long67 = interval66.getStartMillis();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Interval interval69 = interval66.withDurationBeforeEnd(readableDuration68);
        long long70 = interval66.toDurationMillis();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = interval66.toPeriod(periodType71);
        int int73 = period72.size();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay56.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType76 = period72.getPeriodType();
        org.joda.time.Period period77 = interval37.toPeriod(periodType76);
        org.joda.time.DateTime dateTime78 = dateTime14.plus((org.joda.time.ReadablePeriod) period77);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(11);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = localDate8.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean34 = dateTime30.isEqual(93L);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset((long) (byte) 10);
        boolean boolean39 = dateTimeZone36.isFixed();
        int int41 = dateTimeZone36.getOffsetFromLocal((long) 10);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(dateTimeZone36);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        java.lang.String str54 = locale52.getDisplayCountry();
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = dateTimeZone36.getShortName(97L, locale52);
        org.joda.time.Interval interval57 = yearMonthDay6.toInterval(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.lang.String str61 = dateTimeZone36.getNameKey(0L);
        java.lang.String str62 = dateTimeZone36.toString();
        java.lang.String str64 = dateTimeZone36.getShortName(9223372036854775807L);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 87L + "'", long45 == 87L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "France" + "'", str54, "France");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
// flaky:         org.junit.Assert.assertNull(str61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        int int24 = calendar6.getWeekYear();
        calendar6.set((-1), (-13827), 35, 28, 1, (int) 'x');
        calendar6.setFirstDayOfWeek(34534);
        java.lang.String str34 = calendar6.getCalendarType();
        calendar6.set((int) 'u', 32770, 264, 724, 34619);
        java.util.Date date41 = calendar6.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.set(48, 34521);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=27730789260000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34534,minimalDaysInFirstWeek=4,ERA=1,YEAR=2848,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=276,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "gregory" + "'", str34, "gregory");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Fri Oct 02 05:01:00 UTC 2848");
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, dateTimeZone38);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = property41.roundHalfFloorCopy();
        boolean boolean43 = dateTimeZone7.equals((java.lang.Object) dateMidnight42);
        long long45 = dateTimeZone7.nextTransition((long) 34530);
        long long47 = dateTimeZone7.previousTransition((long) 20);
        java.lang.String str49 = dateTimeZone7.getShortName((long) 575);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(0, 34771, 0, (-1886), 122, 12562035, 927, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1886 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 34530L + "'", long45 == 34530L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 20L + "'", long47 == 20L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField10 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.millisOfDay();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDate12.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, 19);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(1644572138904L, dateTimeZone3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = dateTimeZone3.getName(150810L, locale6);
        java.lang.String str9 = locale6.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JPN" + "'", str7, "JPN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:19" + "'", str8, "+07:19");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japanese" + "'", str9, "Japanese");
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        int int8 = yearMonthDay7.getYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = property43.roundHalfFloorCopy();
        boolean boolean45 = dateTimeZone9.equals((java.lang.Object) dateMidnight44);
        org.joda.time.Interval interval46 = yearMonthDay7.toInterval(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime62 = dateTime56.toDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.withDayOfWeek(4);
        org.joda.time.DateTime dateTime75 = dateTime72.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime78 = dateTime72.toDateTime(dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((java.lang.Object) dateTime56, dateTimeZone77);
        boolean boolean80 = interval46.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property81 = dateTime56.weekyear();
        org.joda.time.DateTime dateTime83 = dateTime56.withYearOfEra(31);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTime dateTime26 = dateTime20.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime26.yearOfEra();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(11);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfMonth();
        org.joda.time.Chronology chronology37 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField39.getType();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        int int45 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) localDate42);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = dateTimeField39.getAsText((long) 22, locale48);
        java.lang.String str50 = locale48.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        java.lang.String str56 = locale54.getISO3Language();
        java.lang.String str57 = locale48.getDisplayName(locale54);
        int int58 = property30.getMaximumShortTextLength(locale48);
        java.util.Locale locale59 = locale48.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone8, locale59);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.fromCalendarFields(calendar61);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = calendar61.getActualMaximum(269);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 269");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572544541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=551,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572544541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=551,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2922789 + "'", int45 == 2922789);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "19" + "'", str49, "19");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fra" + "'", str56, "fra");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644572544541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=551,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644572544541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=551,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property15.roundCeilingCopy();
        int int17 = property8.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate16.plusWeeks((int) '#');
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(1970);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        long long31 = interval30.getStartMillis();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval30.withDurationBeforeEnd(readableDuration32);
        long long34 = interval30.toDurationMillis();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval30.toPeriod(periodType35);
        int int37 = period36.size();
        int int38 = period36.size();
        org.joda.time.Period period39 = period36.toPeriod();
        org.joda.time.LocalDate localDate40 = localDate21.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 10);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusMonths(0);
        org.joda.time.LocalDate localDate6 = yearMonthDay5.toLocalDate();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.withMaximumValue();
        int int21 = property18.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay22 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(11);
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfMonth();
        org.joda.time.Chronology chronology28 = localDate26.getChronology();
        org.joda.time.LocalDate localDate30 = localDate26.minusDays(1);
        org.joda.time.LocalDate.Property property31 = localDate26.monthOfYear();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime42.getZone();
        org.joda.time.DateTime dateTime48 = localDate26.toDateTime(localTime32, dateTimeZone47);
        org.joda.time.Interval interval49 = yearMonthDay22.toInterval(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = yearMonthDay5.toDateMidnight(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-10L), dateTimeZone47);
        boolean boolean53 = dateTimeZone47.isStandardOffset((long) 56);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = property33.getAsText(locale39);
        org.joda.time.DurationField durationField43 = property33.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight45 = property33.setCopy("13");
        org.joda.time.DateMidnight dateMidnight46 = property33.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight47 = property33.roundHalfFloorCopy();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        java.lang.String str50 = property33.getAsShortText(locale48);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572544655,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=655,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight33.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight33.minus(11L);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.dayOfYear();
        org.joda.time.DateMidnight.Property property61 = dateMidnight59.dayOfYear();
        org.joda.time.DurationField durationField62 = property61.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNull(durationField62);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset((long) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition(1684800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1684800000L + "'", long7 == 1684800000L);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DurationField durationField11 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology6.centuryOfEra();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay3 = property1.withMaximumValue();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder4.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder12 = builder8.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        java.util.Calendar.Builder builder22 = builder12.setTimeZone(timeZone21);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale.Builder builder29 = builder26.clear();
        java.util.Locale locale30 = builder29.build();
        java.lang.String str31 = locale23.getDisplayName(locale30);
        java.lang.String str32 = property1.getAsText(locale23);
        java.util.Locale locale35 = new java.util.Locale("59", "java.util.GregorianCalendar[time=6127761962000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale36 = locale35.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        boolean boolean42 = locale40.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str45 = locale40.getDisplayScript(locale44);
        java.util.Set<java.lang.String> strSet46 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale36.getDisplayCountry(locale40);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        boolean boolean53 = locale51.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str56 = locale51.getDisplayScript(locale55);
        java.lang.String str57 = locale36.getDisplayCountry(locale51);
        java.util.Set<java.lang.String> strSet58 = locale51.getUnicodeLocaleKeys();
        int int59 = property1.getMaximumShortTextLength(locale51);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572544779,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=24,MILLISECOND=789,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese" + "'", str31, "Chinese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "11" + "'", str32, "11");
        org.junit.Assert.assertEquals(locale35.toString(), "59_JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "59_JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str47, "JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str57, "JAVA.UTIL.GREGORIANCALENDAR[TIME=6127761962000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(34521);
        org.joda.time.LocalDate.Property property5 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekOfWeekyear(19);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = localDate9.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weeks();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusMonths(19);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtStartOfDay();
        int int30 = localDate26.getWeekyear();
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtStartOfDay();
        int int32 = localDate26.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight66.withMillis((long) (short) 100);
        int int71 = dateMidnight66.getWeekOfWeekyear();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readablePeriod33, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 1, (long) 7, chronology75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval76.toPeriod(periodType77);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate82 = localDate80.plusMonths((int) '4');
        org.joda.time.DateTime dateTime83 = localDate80.toDateTimeAtStartOfDay();
        int int84 = localDate80.getWeekyear();
        org.joda.time.DateTime dateTime85 = localDate80.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period78, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight66.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 6);
        org.joda.time.LocalDate localDate89 = localDate26.minus((org.joda.time.ReadablePeriod) period78);
        int int90 = period78.size();
        org.joda.time.MutablePeriod mutablePeriod91 = period78.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay22.plus((org.joda.time.ReadablePeriod) mutablePeriod91);
        int[] intArray95 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod91, 19000L, (long) 2922789);
        org.joda.time.LocalDate localDate96 = localDate0.plus((org.joda.time.ReadablePeriod) mutablePeriod91);
        org.joda.time.LocalDate localDate98 = localDate96.minusWeeks(1906);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod91);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, 0, 0, 0, 48, 23, 789]");
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertNotNull(localDate98);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        java.util.Locale.LanguageRange languageRange11 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange11 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList19);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(11);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfMonth();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((java.lang.Object) str21, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        long long37 = chronology27.add((org.joda.time.ReadablePeriod) period34, 87L, 1);
        java.util.Locale.LanguageRange languageRange39 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] { languageRange39 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(11);
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfMonth();
        org.joda.time.Chronology chronology55 = localDate53.getChronology();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((java.lang.Object) str49, chronology55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        long long65 = chronology55.add((org.joda.time.ReadablePeriod) period62, 87L, 1);
        int[] intArray68 = chronology27.get((org.joda.time.ReadablePeriod) period62, (long) 10, (long) 13);
        org.joda.time.DurationField durationField69 = chronology27.months();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) 'u', chronology27);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        boolean boolean73 = dateTimeZone4.equals((java.lang.Object) chronology72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(41L, dateTimeZone4);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 93L + "'", long37 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 93L + "'", long65 == 93L);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate1.minusMonths(11);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = localDate1.toString("\u30d5\u30e9\u30f3\u30b9", locale10);
        org.joda.time.LocalDate localDate13 = localDate1.minusDays((int) 'x');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        boolean boolean19 = timeOfDay15.isAfter((org.joda.time.ReadablePartial) timeOfDay17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay15.minus(readablePeriod20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay21.withPeriodAdded(readablePeriod22, 10);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay21.minuteOfHour();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = timeOfDay21.getFields();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay21.plusHours(576);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDate1.compareTo((org.joda.time.ReadablePartial) timeOfDay21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str11, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        java.util.Calendar.Builder builder16 = builder12.setDate(27, 34530, 292278994);
        java.util.Calendar.Builder builder20 = builder12.setTimeOfDay(578, (int) '4', 13);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(62135596834629L);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.LocalDate localDate18 = dateTime16.toLocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusYears((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getStart();
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 1, (long) 7, chronology68);
        org.joda.time.Duration duration70 = interval69.toDuration();
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight53.minus((org.joda.time.ReadableDuration) duration70);
        int int73 = dateMidnight72.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.minusYears(4);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays(273);
        int int78 = dateMidnight77.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight77.withDurationAdded(2100041L, 34534);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.util.Calendar calendar84 = dateMidnight81.toCalendar(locale82);
        java.util.Date date86 = new java.util.Date("Wed Mar 07 04:03:02 UTC 2164");
        boolean boolean87 = calendar84.before((java.lang.Object) date86);
        boolean boolean88 = localDate18.equals((java.lang.Object) date86);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 13 + "'", int78 == 13);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=-77414400010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=201,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date86.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setLanguageTag("gregory");
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "Italy");
        java.util.Locale.Builder builder13 = builder8.removeUnicodeLocaleAttribute("34762");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int30 = gregorianCalendar29.getMinimalDaysInFirstWeek();
        java.time.Instant instant31 = gregorianCalendar29.toInstant();
        java.util.Date date32 = java.util.Date.from(instant31);
        java.lang.String str33 = date32.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Thu Jan 01 00:00:00 UTC 1970" + "'", str33, "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        java.lang.String str7 = property6.getName();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfYear" + "'", str7, "dayOfYear");
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.weekyear();
        org.joda.time.DateMidnight dateMidnight32 = property31.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        java.lang.String str38 = locale36.getISO3Language();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayName();
        java.lang.String str41 = locale36.getDisplayCountry();
        int int42 = property31.getMaximumTextLength(locale36);
        org.joda.time.DateMidnight dateMidnight43 = property31.getDateMidnight();
        boolean boolean44 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTime dateTime47 = dateTime11.withDurationAdded((-62135596800000L), 34265);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = dateTime11.isAfter(readableInstant48);
        org.joda.time.DateTime dateTime50 = dateTime11.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "France" + "'", str39, "France");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "French (France)" + "'", str40, "French (France)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "France" + "'", str41, "France");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusWeeks(16);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight38 = property37.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight39 = property37.withMinimumValue();
        boolean boolean40 = dateMidnight39.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.minutes();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property14.setCopy("T09:40:32.750");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:40:32.750\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(1644572130023L, 4);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        java.util.Locale locale27 = new java.util.Locale("271", "T09:35:18.216");
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfWeek(4);
        org.joda.time.DateTime dateTime56 = dateTime53.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime53.toDateTime(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, dateTimeZone58);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = property61.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = dateTimeZone65.getName((long) (byte) 10, locale67);
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = property61.getAsText(locale67);
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str72 = locale67.getDisplayName(locale71);
        java.lang.String str73 = locale27.getDisplayCountry(locale71);
        java.util.Calendar calendar74 = dateTime23.toCalendar(locale71);
        calendar74.setFirstDayOfWeek(3600011);
        java.time.Instant instant77 = calendar74.toInstant();
        java.lang.String str78 = calendar74.getCalendarType();
        calendar74.setMinimalDaysInFirstWeek(1);
        java.lang.Object obj81 = calendar74.clone();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale27.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fran\347ais (France)" + "'", str72, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "T09:35:18.216" + "'", str73, "T09:35:18.216");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-55146990299918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=3600011,minimalDaysInFirstWeek=1,ERA=1,YEAR=222,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=169,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=35,SECOND=0,MILLISECOND=92,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "gregory" + "'", str78, "gregory");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "java.util.GregorianCalendar[time=-55146990299918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=3600011,minimalDaysInFirstWeek=1,ERA=1,YEAR=222,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=169,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=35,SECOND=0,MILLISECOND=92,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "java.util.GregorianCalendar[time=-55146990299918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=3600011,minimalDaysInFirstWeek=1,ERA=1,YEAR=222,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=169,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=35,SECOND=0,MILLISECOND=92,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "java.util.GregorianCalendar[time=-55146990299918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=3600011,minimalDaysInFirstWeek=1,ERA=1,YEAR=222,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=169,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=35,SECOND=0,MILLISECOND=92,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.Duration duration44 = interval43.toDuration();
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime46 = dateTime25.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime48 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration44, 100);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds(17);
        int int51 = dateTime50.getMillisOfSecond();
        org.joda.time.DateTime.Property property52 = dateTime50.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 611 + "'", int51 == 611);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 16, locale16);
        int int19 = dateTimeField13.get(1644572155242L);
        long long21 = dateTimeField13.roundHalfEven(90L);
        org.joda.time.DurationField durationField22 = dateTimeField13.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add((int) (byte) 1, (int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        int int5 = timeOfDay4.size();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1676108545438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=25,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        int int13 = property11.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addNoWrapToCopy(0);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusSeconds(2719);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        long long28 = interval27.getStartMillis();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        long long31 = interval27.toDurationMillis();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval27.toPeriod(periodType32);
        int int34 = period33.size();
        org.joda.time.MutablePeriod mutablePeriod35 = period33.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        boolean boolean48 = period33.equals((java.lang.Object) 4);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay17.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(11);
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfMonth();
        org.joda.time.Chronology chronology55 = localDate53.getChronology();
        org.joda.time.LocalDate localDate57 = localDate53.minusDays(1);
        org.joda.time.LocalDate localDate59 = localDate57.plusYears((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = timeOfDay17.isEqual((org.joda.time.ReadablePartial) localDate59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:25.460" + "'", str8, "T09:42:25.460");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "25" + "'", str12, "25");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(366, 2);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(13920L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay4.toDateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1644572183939L, dateTimeZone8);
        int int12 = dateMidnight11.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26 + "'", int12 == 26);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = property13.setCopy(19);
        org.joda.time.DateTime dateTime32 = property13.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime32.withYear(23);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(22);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay41.getFieldTypes();
        boolean boolean43 = timeOfDay39.isAfter((org.joda.time.ReadablePartial) timeOfDay41);
        int int44 = timeOfDay41.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = timeOfDay41.toString(dateTimeFormatter45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay41.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property49 = timeOfDay41.secondOfMinute();
        org.joda.time.TimeOfDay.Property property50 = timeOfDay41.minuteOfHour();
        int int51 = timeOfDay41.getMillisOfSecond();
        org.joda.time.DateTime dateTime52 = dateTime35.withFields((org.joda.time.ReadablePartial) timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "T09:42:25.520" + "'", str46, "T09:42:25.520");
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 520 + "'", int51 == 520);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField21 = chronology18.centuries();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) -1, chronology18);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime22.minusSeconds(1);
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        int int27 = dateTime25.getDayOfWeek();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        int int24 = calendar6.getWeekYear();
        calendar6.set((-1), (-13827), 35, 28, 1, (int) 'x');
        calendar6.setFirstDayOfWeek(34534);
        calendar6.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = calendar6.getLeastMaximum(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34534,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=-13827,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=28,MINUTE=1,SECOND=120,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear((int) 'u');
        boolean boolean14 = dateTimeFormatter11.isOffsetParsed();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfHour();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter11.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) 696, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(23, 1990, 38, 655, 7070, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 655 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 1, (long) 7, chronology14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = interval15.toPeriod(periodType16);
        org.joda.time.Interval interval18 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.Duration duration23 = interval22.toDuration();
        boolean boolean24 = interval11.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime39.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded(1644572130023L, 4);
        boolean boolean49 = interval11.equals((java.lang.Object) dateTime45);
        org.joda.time.Interval interval51 = interval11.withStartMillis((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfWeek(4);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = timeOfDay66.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = timeOfDay66.getFieldTypes();
        org.joda.time.DateTime dateTime69 = dateTime64.withFields((org.joda.time.ReadablePartial) timeOfDay66);
        org.joda.time.DateTime dateTime72 = dateTime69.withDurationAdded(0L, (int) (short) 0);
        int int73 = dateTime69.getHourOfDay();
        org.joda.time.Interval interval74 = interval51.withEnd((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        long long84 = interval82.toDurationMillis();
        org.joda.time.Interval interval86 = interval82.withEndMillis((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval87 = interval86.toMutableInterval();
        boolean boolean88 = interval74.isAfter((org.joda.time.ReadableInterval) interval86);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = timeOfDay7.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(0);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        java.lang.String str16 = property15.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int9 = calendar6.getWeeksInWeekYear();
        calendar6.setTimeInMillis((long) 2000);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder16 = builder12.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder20 = builder16.setDate(12, 3, 17);
        java.util.Calendar.Builder builder24 = builder16.setDate(58, 22, 2000);
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone27 = calendar26.getTimeZone();
        java.util.Calendar.Builder builder28 = builder25.setTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.Calendar.Builder builder30 = builder16.setTimeZone(timeZone27);
        calendar6.setTimeZone(timeZone27);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale locale33 = builder32.build();
        java.util.Locale.Builder builder34 = builder32.clear();
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("francese");
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(11);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType38.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.dayOfMonth();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        int int48 = dateTimeField46.getMaximumTextLength(locale47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.getDisplayVariant();
        int int52 = dateTimeField46.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder53 = builder35.setLocale(locale49);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale locale55 = builder54.build();
        java.util.Locale.Builder builder56 = builder53.setLocale(locale55);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone27, locale55);
        int int58 = calendar57.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar57.roll((int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=2000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572545666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=25,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Korean" + "'", str50, "Korean");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644572545666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=25,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 53 + "'", int58 == 53);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property40.roundHalfFloorCopy();
        boolean boolean42 = dateTimeZone6.equals((java.lang.Object) dateMidnight41);
        int int44 = dateTimeZone6.getOffsetFromLocal(6127761962000L);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(0L, dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(86399999, 95, (-1704114), 13920, 51, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13920 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField31 = chronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 1, (long) 7, chronology34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval35.toPeriod(periodType36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtStartOfDay();
        int int43 = localDate39.getWeekyear();
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval47 = interval45.withEndMillis((long) 9);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.DateTime dateTime59 = dateTime52.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology61);
        org.joda.time.DateMidnight dateMidnight63 = yearMonthDay62.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay64 = dateMidnight63.toYearMonthDay();
        int int65 = yearMonthDay64.getYear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        long long75 = interval74.getStartMillis();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        long long78 = interval74.toDurationMillis();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        int int81 = period80.size();
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay64.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) period80);
        org.joda.time.PeriodType periodType84 = period80.getPeriodType();
        org.joda.time.Period period85 = interval47.toPeriod(periodType84);
        org.joda.time.Period period86 = period85.toPeriod();
        long long89 = chronology18.add((org.joda.time.ReadablePeriod) period86, 1644572336564L, 34935);
        org.joda.time.DurationField durationField90 = chronology18.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1644573209939L + "'", long89 == 1644573209939L);
        org.junit.Assert.assertNotNull(durationField90);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = dateTime23.plusWeeks(13);
        org.joda.time.DateTime.Property property32 = dateTime23.weekyear();
        java.util.GregorianCalendar gregorianCalendar33 = dateTime23.toGregorianCalendar();
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone36 = calendar35.getTimeZone();
        java.util.Calendar.Builder builder37 = builder34.setTimeZone(timeZone36);
        java.util.Calendar.Builder builder41 = builder34.setWeekDate((int) (short) -1, 13, (int) (short) 10);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(11);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfMonth();
        org.joda.time.Chronology chronology47 = localDate45.getChronology();
        org.joda.time.LocalDate localDate49 = localDate45.minusDays(1);
        org.joda.time.LocalDate.Property property50 = localDate45.monthOfYear();
        int int51 = property50.getMinimumValueOverall();
        org.joda.time.LocalDate localDate52 = property50.withMaximumValue();
        org.joda.time.LocalDate localDate54 = property50.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime55 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.DateTime dateTime64 = localDate54.toDateTime(localTime55, dateTimeZone59);
        java.util.TimeZone timeZone65 = dateTimeZone59.toTimeZone();
        java.util.Calendar.Builder builder66 = builder41.setTimeZone(timeZone65);
        gregorianCalendar33.setTimeZone(timeZone65);
        gregorianCalendar33.set(273, 1968, 34723, 0, (-907), 50);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644572545769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=25,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusSeconds(21);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(50);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours(2922789);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMillisOfSecond((int) (short) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        boolean boolean19 = dateTimeFormatter17.isParser();
        java.util.Locale locale20 = dateTimeFormatter17.getLocale();
        boolean boolean21 = dateTimeFormatter17.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter17.withDefaultYear(13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = timeOfDay14.toString(dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 0, chronology6);
        org.joda.time.DurationField durationField10 = chronology6.weeks();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology6);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withMillis((long) (short) 100);
        int int40 = dateMidnight35.getWeekOfWeekyear();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readablePeriod2, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtStartOfDay();
        int int53 = localDate49.getWeekyear();
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period47, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 6);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology59 = yearMonthDay58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.minutes();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology59.getDateTimeMillis(47, (int) (byte) 0, 187, 7070, 32, 13896, 34723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7070 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        long long18 = interval17.getStartMillis();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval17.withDurationBeforeEnd(readableDuration19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.Interval interval27 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 7, chronology30);
        org.joda.time.Duration duration32 = interval31.toDuration();
        boolean boolean33 = interval20.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 1, (long) 7, chronology36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 7, chronology41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = interval42.toPeriod(periodType43);
        org.joda.time.DateTime dateTime45 = dateTime38.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology47);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay48.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay50 = dateMidnight49.toYearMonthDay();
        int int51 = yearMonthDay50.getYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        long long61 = interval60.getStartMillis();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Interval interval63 = interval60.withDurationBeforeEnd(readableDuration62);
        long long64 = interval60.toDurationMillis();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval60.toPeriod(periodType65);
        int int67 = period66.size();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay50.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period66);
        org.joda.time.PeriodType periodType70 = period66.getPeriodType();
        org.joda.time.Period period71 = interval31.toPeriod(periodType70);
        org.joda.time.LocalDate localDate72 = localDate7.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.LocalDate localDate74 = localDate7.withWeekyear((int) 'u');
        org.joda.time.LocalDate.Property property75 = localDate74.weekyear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone79);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getStart();
        org.joda.time.DateTime dateTime87 = dateTime85.withDayOfWeek(4);
        org.joda.time.DateTime dateTime89 = dateTime85.minusMonths(4);
        org.joda.time.DateTime dateTime91 = dateTime89.withMillisOfDay(70);
        int int92 = dateTime89.getSecondOfMinute();
        org.joda.time.DateTime dateTime94 = dateTime89.withYear((int) 'u');
        boolean boolean96 = dateTime89.isAfter((long) 13);
        org.joda.time.DateTime dateTime97 = localDate74.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572545933,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=25,MILLISECOND=933,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11" + "'", str8, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(17);
        org.joda.time.TimeOfDay timeOfDay15 = property11.addWrapFieldToCopy(34615);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = property11.setCopy("1958-12-31");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1958-12-31\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:26.011" + "'", str8, "T09:42:26.011");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withMillis((long) (short) 100);
        int int43 = dateMidnight38.getMinuteOfDay();
        int int44 = dateMidnight38.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight38.withYearOfEra(55);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime62 = dateTime56.toDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.withDayOfWeek(4);
        org.joda.time.DateTime dateTime75 = dateTime72.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime78 = dateTime72.toDateTime(dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((java.lang.Object) dateTime56, dateTimeZone77);
        org.joda.time.DateTime dateTime81 = dateTime56.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.lang.String str88 = dateTimeZone85.getName((long) (byte) 10, locale87);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone85);
        org.joda.time.Interval interval90 = interval89.toInterval();
        org.joda.time.DateTime dateTime91 = interval89.getStart();
        org.joda.time.DateTime dateTime93 = dateTime91.withDayOfWeek(4);
        org.joda.time.DateTime dateTime94 = dateTime91.toDateTime();
        org.joda.time.DateTime.Property property95 = dateTime91.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone96 = dateTime91.getZone();
        org.joda.time.DateTime dateTime97 = dateTime81.toDateTime(dateTimeZone96);
        org.joda.time.DateMidnight dateMidnight98 = dateMidnight38.withZoneRetainFields(dateTimeZone96);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime99 = new org.joda.time.DateTime(49, 611, 32770, 109, (int) (byte) 100, 34615, dateTimeZone96);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.010" + "'", str88, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateMidnight98);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMillis((int) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay1.plusMinutes((int) (byte) 0);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = timeOfDay13.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 1, (long) 7, chronology43);
        org.joda.time.Duration duration45 = interval44.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTime dateTime47 = dateTime26.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology48 = dateTime26.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromMillisOfDay(49L, chronology48);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay13.withChronologyRetainFields(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.withYear((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime13.withYearOfEra(35);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(27);
        int int23 = dateTime20.getDayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis(110L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime15.weekyear();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        int int22 = yearMonthDay21.getMonthOfYear();
        org.joda.time.LocalDate localDate23 = yearMonthDay21.toLocalDate();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay21.dayOfMonth();
        java.util.Locale locale27 = new java.util.Locale("AM", "ISOChronology[Etc/UTC]");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = property24.getAsText(locale27);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime15.toString("", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale27.toString(), "am_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572546130,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=26,MILLISECOND=130,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate10 = property8.setCopy((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property10.setCopy("Jul 21, 1915 4:06:02 AM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jul 21, 1915 4:06:02 AM\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(0);
        java.io.Writer writer9 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(34521, 9, 21);
        org.joda.time.DateMidnight dateMidnight14 = localDate13.toDateMidnight();
        org.joda.time.LocalDate localDate16 = localDate13.plusDays(27);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer9, (org.joda.time.ReadablePartial) localDate16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Do");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.Object obj3 = null;
        boolean boolean4 = languageRange1.equals(obj3);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "do" + "'", str2, "do");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        int int35 = dateMidnight32.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.plusDays(1);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(4);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime49.dayOfYear();
        org.joda.time.DateTime dateTime55 = dateTime49.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone63);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.DateTime dateTime69 = interval67.getStart();
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfWeek(4);
        org.joda.time.DateTime dateTime72 = dateTime69.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone79);
        org.joda.time.Interval interval84 = interval83.toInterval();
        org.joda.time.DateTime dateTime85 = interval83.getStart();
        org.joda.time.DateTime dateTime87 = dateTime85.withDayOfWeek(4);
        org.joda.time.DateTime dateTime88 = dateTime85.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime91 = dateTime85.toDateTime(dateTimeZone90);
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, dateTimeZone90);
        org.joda.time.DateTime dateTime93 = dateTime58.withZone(dateTimeZone90);
        org.joda.time.DateTime dateTime94 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property95 = dateTime94.secondOfDay();
        boolean boolean96 = dateMidnight37.isEqual((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate17 = localDate12.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        boolean boolean19 = yearMonthDay2.equals((java.lang.Object) localDate17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) yearMonthDay2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set(1644572160235L, 292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone6);
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths(11);
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] { languageRange15 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((java.lang.Object) str25, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay36, 1, locale44);
        long long48 = dateTimeField33.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField33.getType();
        org.joda.time.LocalDate.Property property50 = localDate13.property(dateTimeFieldType49);
        java.lang.String str51 = property50.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "lun" + "'", str45, "lun");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1468800017L + "'", long48 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "6" + "'", str51, "6");
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale locale6 = builder5.build();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale10);
        java.util.Set<java.lang.Character> charSet14 = locale10.getExtensionKeys();
        java.util.Locale locale18 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.lang.String str19 = locale10.getDisplayScript(locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        java.lang.String str21 = locale6.getDisplayScript(locale20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, dateTimeZone52);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone52);
        long long59 = dateTimeZone52.convertLocalToUTC((long) 292278993, false, (long) 32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now(dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) locale6, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572546515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=26,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals(locale18.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 292278983L + "'", long59 == 292278983L);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(5970);
        org.joda.time.DateTime dateTime15 = dateTime9.plusSeconds(34530);
        org.joda.time.DateTime dateTime17 = dateTime9.minusHours(990);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime21, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusWeeks(16);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withZoneRetainFields(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone47.isLocalDateTimeGap(localDateTime49);
        org.joda.time.Interval interval51 = localDate9.toInterval(dateTimeZone47);
        boolean boolean53 = interval51.isBefore(1644572209851L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] { languageRange15 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((java.lang.Object) str25, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 1, (long) 7, chronology36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        int[] intArray42 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-1L), (long) 9);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType13.getField(chronology31);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType13.getDurationType();
        java.lang.String str45 = durationFieldType44.getName();
        boolean boolean46 = localDate12.isSupported(durationFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.joda.time.Chronology chronology53 = localDate51.getChronology();
        boolean boolean54 = durationFieldType47.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight57 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.secondOfMinute();
        org.joda.time.DurationField durationField59 = chronology53.seconds();
        boolean boolean60 = durationFieldType44.isSupported(chronology53);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight11.withFieldAdded(durationFieldType44, 35);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusDays(0);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minutes" + "'", str45, "minutes");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.withWeekyear(106);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((java.lang.Object) localDate5, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDate5.getFields();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 7, chronology27);
        org.joda.time.Duration duration29 = interval28.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = dateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = dateTime10.getChronology();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) "561", chronology32);
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        int int35 = localDate33.getDayOfMonth();
        org.joda.time.LocalDate localDate37 = localDate33.plusMonths(34567);
        int int38 = localDate37.size();
        org.joda.time.LocalDate.Property property39 = localDate37.weekOfWeekyear();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) 13, chronology46);
        org.joda.time.Chronology chronology50 = chronology46.withUTC();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.withDayOfYear(11);
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfMonth();
        org.joda.time.Chronology chronology56 = localDate54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.minuteOfHour();
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(chronology56);
        java.lang.String str59 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now(dateTimeZone61);
        org.joda.time.LocalDate localDate64 = localDate62.plusDays(5);
        int int65 = localDate64.getEra();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        long long75 = interval74.getStartMillis();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        long long78 = interval74.toDurationMillis();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        int int81 = period80.size();
        org.joda.time.LocalDate localDate82 = localDate64.plus((org.joda.time.ReadablePeriod) period80);
        long long85 = chronology56.add((org.joda.time.ReadablePeriod) period80, (long) 34546, 1969);
        int[] intArray88 = chronology46.get((org.joda.time.ReadablePeriod) period80, (long) 173, (long) 1439);
        org.joda.time.LocalDate localDate89 = localDate37.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateTime dateTime90 = localDate89.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[UTC]" + "'", str59, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 34546L + "'", long85 == 34546L);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 1, 266]");
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        int[] intArray58 = chronology17.get((org.joda.time.ReadablePeriod) period52, (long) 10, (long) 13);
        org.joda.time.DurationField durationField59 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField60 = chronology17.dayOfWeek();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DurationField durationField62 = chronology17.millis();
        org.joda.time.DurationField durationField63 = chronology17.days();
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology17.getDateTimeMillis(1173702182399990L, 18, 0, 793, 1971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 793 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray10 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap14);
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList25);
        java.util.Set<java.lang.String> strSet28 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.String str30 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale.LanguageRange languageRange32 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] { languageRange32 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList40);
        java.util.Set<java.lang.String> strSet43 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet43);
        java.lang.String str45 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange languageRange47 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] { languageRange47 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray56 = new java.lang.String[] { "francese", "7", "", "T09:35:14.689", "Property[dayOfYear]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.lang.String str59 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap60);
        java.util.Set<java.lang.String> strSet62 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList15, strMap65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.withDayOfYear(11);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfMonth();
        org.joda.time.Chronology chronology72 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.lang.String str79 = dateTimeZone76.getName((long) (byte) 10, locale78);
        java.lang.String str80 = locale78.getISO3Language();
        java.lang.String str81 = dateTimeField73.getAsText(14, locale78);
        java.util.Set<java.lang.String> strSet82 = locale78.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList66, (java.util.Collection<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fra" + "'", str80, "fra");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "14" + "'", str81, "14");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strList83);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 0, chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(14);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(1906);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.Chronology chronology19 = chronology5.withZone(dateTimeZone13);
        int int21 = dateTimeZone13.getOffsetFromLocal(0L);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone13);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.lang.String str28 = dateTimeZone13.getName(0L, locale26);
        java.lang.String str30 = dateTimeZone13.getNameKey(123073084799990L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField60 = chronology37.centuryOfEra();
        boolean boolean61 = dateTimeField60.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.LocalDate localDate5 = localDate1.withYear((int) 'a');
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate5.withDayOfWeek(120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addWrapFieldToCopy(28);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.Period period28 = interval25.toPeriod();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        boolean boolean36 = durationFieldType29.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.millisOfSecond();
        org.joda.time.Interval interval38 = interval25.withChronology(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfMinute();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(14400004L, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval42 = new org.joda.time.Interval((java.lang.Object) yearMonthDay16, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withField(dateTimeFieldType43, 2005);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        java.util.Locale locale2 = new java.util.Locale("T09:39:31.763", "isochronology[etc/utc] (MONTHOFYEAR)");
        org.junit.Assert.assertEquals(locale2.toString(), "t09:39:31.763_ISOCHRONOLOGY[ETC/UTC] (MONTHOFYEAR)");
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay15.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withYear(7);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.minusDays(13920);
        org.joda.time.Chronology chronology26 = yearMonthDay15.getChronology();
        org.joda.time.DateTime dateTime27 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay15.withDayOfMonth((int) (byte) 10);
        int int30 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29);
        long long32 = dateTimeField12.roundCeiling((long) (-1));
        int int34 = dateTimeField12.getMaximumValue(1644572163667L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        boolean boolean18 = interval7.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology19 = interval7.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology22);
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay23.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone26);
        long long33 = chronology19.set((org.joda.time.ReadablePartial) localDate31, (-61747120148658L));
        org.joda.time.DurationField durationField34 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology19.days();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 22251342L + "'", long33 == 22251342L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        java.util.Date date5 = new java.util.Date(34565, 100, 34534, 122, 1);
        long long6 = date5.getTime();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Nov 23 02:01:00 UTC 36567");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1091804061660000L + "'", long6 == 1091804061660000L);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset((long) (byte) 10);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime9.withTime(2, 292278994, 13920, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTimeFormatter3.parseDateTime("Cina");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimePrinter5);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDate11.toString("1970-01-01T00:00:00.000+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572547075,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=27,MILLISECOND=75,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 23);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYear(11);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withYear((-1));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(34935);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay14 = property11.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getRangeDurationType();
        java.util.Locale.LanguageRange languageRange20 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] { languageRange20 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(11);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfMonth();
        org.joda.time.Chronology chronology36 = localDate34.getChronology();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((java.lang.Object) str30, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfWeek();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 22, chronology36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology41);
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight48 = yearMonthDay42.toDateMidnight(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay42.minus(readablePeriod49);
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay50.year();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.YearMonthDay yearMonthDay53 = property51.withMaximumValue();
        long long55 = chronology36.set((org.joda.time.ReadablePartial) yearMonthDay53, (long) 2000);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) ' ', chronology36);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType15.getField(chronology36);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType15.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int60 = timeOfDay14.get(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:27.191" + "'", str8, "T09:42:27.191");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 9223371985593602000L + "'", long55 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType23.getField(chronology29);
        java.util.Locale locale34 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int35 = dateTimeField30.getMaximumTextLength(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter22.withLocale(locale34);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.lang.String str39 = locale37.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter22.withLocale(locale37);
        java.lang.String str41 = property11.getAsShortText(locale37);
        org.joda.time.YearMonthDay yearMonthDay42 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay43 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay44 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property13.getDateTime();
        org.joda.time.DateTime dateTime19 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime20 = property13.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(576);
        long long3 = dateTimeZone1.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology10);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight12.toYearMonthDay();
        int int14 = yearMonthDay13.getYear();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay13.dayOfMonth();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay18 = property15.addWrapFieldToCopy(34567);
        org.joda.time.YearMonthDay yearMonthDay19 = property15.withMinimumValue();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        int int33 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localDate30);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeField27.getAsText((long) 22, locale36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(11);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.LocalDate localDate46 = localDate42.minusDays(1);
        org.joda.time.LocalDate.Property property47 = localDate42.monthOfYear();
        int int48 = property47.getMinimumValueOverall();
        org.joda.time.LocalDate localDate49 = property47.withMaximumValue();
        org.joda.time.LocalDate localDate51 = property47.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime52 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone56);
        org.joda.time.DateTime dateTime61 = localDate51.toDateTime(localTime52, dateTimeZone56);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = localDate51.toString("9", locale63);
        java.lang.String str65 = locale63.getLanguage();
        java.lang.String str66 = locale63.getDisplayName();
        java.lang.String str67 = dateTimeField27.getAsShortText(1644572163667L, locale63);
        int int68 = property15.getMaximumTextLength(locale63);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = dateTimeZone70.getName((long) (byte) 10, locale72);
        java.lang.String str74 = locale72.getISO3Language();
        java.lang.String str75 = locale63.getDisplayScript(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter7.withLocale(locale63);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2922789 + "'", int33 == 2922789);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "19" + "'", str37, "19");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English (Canada)" + "'", str66, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "20" + "'", str67, "20");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fra" + "'", str74, "fra");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeField4.getAsShortText((int) (short) 1, locale6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeField4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jan" + "'", str7, "Jan");
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTime dateTime17 = dateTime12.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTime.Property property18 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths(1969);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 1, (long) 7, chronology28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval29.toPeriod(periodType30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval39.withPeriodBeforeEnd(readablePeriod41);
        boolean boolean43 = interval42.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        boolean boolean54 = interval42.overlaps((org.joda.time.ReadableInterval) interval51);
        boolean boolean55 = interval29.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Chronology chronology56 = interval29.getChronology();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(chronology59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = timeOfDay60.getFieldTypes();
        boolean boolean62 = timeOfDay58.isAfter((org.joda.time.ReadablePartial) timeOfDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean64 = timeOfDay58.isSupported(dateTimeFieldType63);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay58.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay58.minusMillis((int) 'a');
        int[] intArray70 = chronology56.get((org.joda.time.ReadablePartial) timeOfDay58, 130636804320000087L);
        org.joda.time.DurationField durationField71 = chronology56.centuries();
        org.joda.time.TimeOfDay timeOfDay72 = new org.joda.time.TimeOfDay(22, 20, 41, chronology56);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(1644572147727L, chronology56);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime21.toMutableDateTime(chronology56);
        org.joda.time.DateTime dateTime76 = dateTime21.plusHours(34534);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime21.toMutableDateTime();
        int int78 = dateTime21.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 97]");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        org.joda.time.DateTime dateTime29 = dateTime23.minusDays((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime29.toYearMonthDay();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(11);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfMonth();
        org.joda.time.Chronology chronology38 = localDate36.getChronology();
        boolean boolean39 = durationFieldType32.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone58);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getStart();
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays(0);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 1, (long) 7, chronology69);
        org.joda.time.Duration duration71 = interval70.toDuration();
        org.joda.time.DateTime dateTime72 = dateTime66.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime52.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight42.withDurationAdded((org.joda.time.ReadableDuration) duration71, 106);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval(10L, (long) 11, chronology78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval79.toPeriod(periodType80);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight42.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period81, 2000);
        org.joda.time.YearMonthDay.Property property85 = yearMonthDay84.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay87 = property85.setCopy("ita");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ita\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set((int) (short) -1, 7, (int) 'u', (int) (short) 10, 22);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.set(0, 360, 10, 927, 579, 577);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(54000, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=0,MONTH=360,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=10,DAY_OF_YEAR=329,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=927,MINUTE=579,SECOND=577,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal((long) '#');
        long long19 = dateTimeZone14.convertUTCToLocal((long) 11);
        java.lang.String str21 = dateTimeZone14.getNameKey(1644572124561L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        java.util.TimeZone timeZone31 = dateTimeZone26.toTimeZone();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(11);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfMonth();
        org.joda.time.Chronology chronology37 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = dateTimeField38.getAsText(14, locale43);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone31, locale43);
        java.lang.String str48 = dateTimeZone14.getName(1L, locale43);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.Instant instant50 = dateMidnight49.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 21L + "'", long19 == 21L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fra" + "'", str45, "fra");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "14" + "'", str46, "14");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572547466,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=27,MILLISECOND=476,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(instant50);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.joda.time.Chronology chronology6 = yearMonthDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear((int) 'u');
        boolean boolean13 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        boolean boolean21 = durationFieldType14.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.minuteOfHour();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter10.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.Chronology chronology30 = dateTimeFormatter27.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(6, 99, 40, 34, 1429200000, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime3 = dateTime2.withLaterOffsetAtOverlap();
        boolean boolean4 = dateTime2.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = dateTimeZone0.getName((long) 11, locale3);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) '4');
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        boolean boolean14 = durationFieldType7.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusMonths(39);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.withPeriodAdded(readablePeriod23, 34675613);
        int int26 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateMidnight21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) int26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguageTag("weeks");
        java.util.Locale locale9 = builder5.build();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        java.lang.String str21 = property20.getName();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.DateTime dateTime25 = yearMonthDay24.toDateTimeAtMidnight();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay24.minus(readablePeriod31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay32.year();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.YearMonthDay yearMonthDay35 = property33.withMaximumValue();
        int int36 = property33.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property33.getFieldType();
        java.lang.String str38 = property33.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay39 = property33.getYearMonthDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = dateTimeField46.getAsText(14, locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(11);
        org.joda.time.LocalDate.Property property60 = localDate59.dayOfMonth();
        org.joda.time.Chronology chronology61 = localDate59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType55.getField(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.clockhourOfHalfday();
        long long66 = dateTimeField64.roundHalfEven(11L);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = locale68.getDisplayVariant();
        java.util.Locale.setDefault(locale68);
        java.lang.String str71 = dateTimeField64.getAsShortText(110L, locale68);
        int int72 = dateTimeField46.getMaximumTextLength(locale68);
        int int73 = property33.getMaximumShortTextLength(locale68);
        java.lang.String str74 = locale68.getCountry();
        java.lang.String str75 = property20.getAsText(locale68);
        java.util.Locale.Builder builder76 = builder5.setLocale(locale68);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "weeks");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "centuryOfEra" + "'", str21, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "14" + "'", str54, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "12" + "'", str71, "12");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "FR" + "'", str74, "FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "19" + "'", str75, "19");
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDate7.getFields();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.minusMillis(2);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMinutes(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        boolean boolean17 = timeOfDay13.isAfter((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        int int34 = dateTime33.getYearOfCentury();
        org.joda.time.DateTime dateTime35 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay1.plusMillis(6);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay40 = property39.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay1 = org.joda.time.YearMonthDay.fromDateFields(date0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromDateFields(date0);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths((int) '4');
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = localDate4.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(dateTimeZone25);
        int int27 = dateTime26.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        java.util.Date date29 = localDate9.toDate();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        org.joda.time.LocalDate localDate37 = localDate33.minusDays(1);
        org.joda.time.LocalDate.Property property38 = localDate33.monthOfYear();
        int int39 = property38.getMinimumValueOverall();
        org.joda.time.LocalDate localDate40 = property38.withMaximumValue();
        org.joda.time.LocalDate localDate42 = property38.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.DateTime dateTime52 = localDate42.toDateTime(localTime43, dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        boolean boolean59 = locale57.hasExtensions();
        boolean boolean60 = locale57.hasExtensions();
        boolean boolean61 = dateTimeZone47.equals((java.lang.Object) boolean60);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((java.lang.Object) date29, dateTimeZone47);
        org.joda.time.DateTime dateTime63 = localDate2.toDateTimeAtMidnight(dateTimeZone47);
        int int65 = dateTimeZone47.getOffset((long) 366);
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone47);
        java.lang.String str68 = yearMonthDay66.toString("+00:00:00.055");
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:42:27 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 UTC 1971");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.055" + "'", str68, "+00:00:00.055");
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        java.util.Locale locale16 = dateTimeFormatter12.getLocale();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter12.getZone();
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(appendable18, (-62135337600004L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNull(dateTimeZone17);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        boolean boolean3 = calendar0.isWeekDateSupported();
        long long4 = calendar0.getTimeInMillis();
        calendar0.set(2598, 0, 187);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2598,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=187,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=27,MILLISECOND=798,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572547798L + "'", long4 == 1644572547798L);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        java.util.Date date3 = new java.util.Date((int) (short) 0, 0, (int) (short) 1);
        date3.setDate((int) (short) 1);
        int int6 = date3.getDay();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date3);
        java.util.Date date13 = new java.util.Date(2922789, 31, 30, 7, 8);
        date13.setHours(35);
        int int16 = date13.getHours();
        boolean boolean17 = date3.before(date13);
        int int18 = date3.getTimezoneOffset();
        date3.setDate(3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jan 03 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Aug 31 11:08:00 UTC 2924691");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 2922789);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusMonths((-1));
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.weekOfWeekyear();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.year();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = property14.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.plusYears(59);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale23);
        java.lang.String str27 = localDate16.toString("1971", locale23);
        int int28 = property7.getMaximumTextLength(locale23);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = localDate30.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weeks();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.Chronology chronology40 = chronology36.withUTC();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.dayOfMonth();
        long long46 = chronology36.add(0L, (long) 70, 600);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((java.lang.Object) property7, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572547886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=27,MILLISECOND=886,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1971" + "'", str27, "1971");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 42000L + "'", long46 == 42000L);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone6);
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths(11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 1, (long) 7, chronology16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        org.joda.time.DateTime dateTime25 = dateTime18.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology27);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay28.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight29.toYearMonthDay();
        int int31 = yearMonthDay30.getYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        long long41 = interval40.getStartMillis();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        long long44 = interval40.toDurationMillis();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval40.toPeriod(periodType45);
        int int47 = period46.size();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalDate localDate50 = localDate11.plus((org.joda.time.ReadablePeriod) period46);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = period46.getValue(86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(1);
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfYear();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale34.getDisplayVariant(locale38);
        java.lang.String str42 = property33.getAsText(locale34);
        org.joda.time.DateTime dateTime44 = property33.addToCopy(696);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "France" + "'", str40, "France");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1644572488950L);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        long long14 = dateTimeField12.roundCeiling((-61747120148658L));
        int int15 = dateTimeField12.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61725542400000L) + "'", long14 == (-61725542400000L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(269);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight10 = property6.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight11 = property6.getDateMidnight();
        int int12 = dateMidnight11.getMillisOfDay();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate15 = localDate11.withYearOfEra((int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay18.toDateMidnight();
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = property22.addToCopy(269);
        int int25 = localDate15.compareTo((org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay24.withDayOfMonth((int) (byte) 10);
        java.lang.String str28 = yearMonthDay24.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1992-06-01" + "'", str28, "1992-06-01");
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.plusMillis(20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:28.081" + "'", str8, "T09:42:28.081");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[8, 2, 28, 81]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        boolean boolean5 = locale3.hasExtensions();
        java.util.Locale locale6 = locale3.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale10.getDisplayLanguage(locale13);
        java.lang.String str15 = locale10.getCountry();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale10.getDisplayLanguage(locale16);
        java.lang.String str18 = locale6.getDisplayLanguage(locale16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "francese" + "'", str14, "francese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FR" + "'", str15, "FR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "French" + "'", str17, "French");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "French" + "'", str18, "French");
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        java.util.Date date3 = new java.util.Date(2233, 16, 34615);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        boolean boolean16 = durationFieldType9.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(23, 3, 31, 0, 6, chronology15);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(11);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.Chronology chronology30 = localDate28.getChronology();
        org.joda.time.LocalDate localDate32 = localDate28.minusDays(1);
        org.joda.time.LocalDate.Property property33 = localDate28.monthOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = localDate28.toDateTime(localTime34, dateTimeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 106, dateTimeZone49);
        java.lang.String str55 = dateTimeZone49.getNameKey(292278983L);
        org.joda.time.Chronology chronology56 = chronology15.withZone(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) date3, chronology15);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 06 00:00:00 UTC 4229");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] { languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList18);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) str20, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 7, chronology30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval31.toPeriod(periodType32);
        long long36 = chronology26.add((org.joda.time.ReadablePeriod) period33, 87L, 1);
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] { languageRange38 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((java.lang.Object) str48, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 1, (long) 7, chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval59.toPeriod(periodType60);
        long long64 = chronology54.add((org.joda.time.ReadablePeriod) period61, 87L, 1);
        int[] intArray67 = chronology26.get((org.joda.time.ReadablePeriod) period61, (long) 10, (long) 13);
        org.joda.time.DurationField durationField68 = chronology26.months();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 'u', chronology26);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology26);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        boolean boolean72 = dateTimeZone3.equals((java.lang.Object) chronology71);
        org.joda.time.Chronology chronology73 = chronology71.withUTC();
        org.joda.time.DurationField durationField74 = chronology71.halfdays();
        org.joda.time.DurationField durationField75 = chronology71.minutes();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 93L + "'", long36 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 93L + "'", long64 == 93L);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsText(13, locale11);
        long long15 = dateTimeField9.add(234034510L, 1971L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "13" + "'", str12, "13");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 7329634510L + "'", long15 == 7329634510L);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(1644572130023L, 4);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        int int46 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime42);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone29.getShortName((long) (byte) 0, locale48);
        org.joda.time.DateTime dateTime50 = dateTime23.toDateTime(dateTimeZone29);
        org.joda.time.DateTime.Property property51 = dateTime50.millisOfSecond();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime54 = dateTime50.withWeekyear(892);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        java.lang.Integer int6 = dateTimeFormatter3.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, dateTimeZone39);
        long long43 = dateTimeZone39.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter3.withZone(dateTimeZone39);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 87L + "'", long43 == 87L);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration39, 106);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withWeekyear(20);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withMillis(1644575841822L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("-292275054-01-01");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = dateTimeField15.getAsText(14, locale20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay26.toDateMidnight();
        int int28 = yearMonthDay26.getYear();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.minusYears((int) '#');
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay26.plusMonths(2);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) yearMonthDay32, 58, locale34);
        int int37 = dateTimeField8.getMaximumShortTextLength(locale34);
        long long39 = dateTimeField8.roundFloor((-61747120192324L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14" + "'", str23, "14");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "58" + "'", str36, "58");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-61747120800000L) + "'", long39 == (-61747120800000L));
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property5.addToCopy(575);
        org.joda.time.LocalDate localDate9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate10 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        org.joda.time.LocalDate.Property property8 = localDate7.era();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572548548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=28,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("55");
        org.joda.time.LocalDate localDate2 = dateMidnight1.toLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths(21);
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate2.withDayOfWeek(34837);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34837 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) (byte) 10);
        boolean boolean18 = dateTimeZone15.isFixed();
        int int20 = dateTimeZone15.getOffsetFromLocal((long) 10);
        long long24 = dateTimeZone15.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = dateTimeZone15.getName(10L, locale29);
        org.joda.time.Interval interval33 = localDate13.toInterval(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(1969);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear(999);
        boolean boolean50 = localDate13.equals((java.lang.Object) dateTime47);
        org.joda.time.DateTime dateTime52 = dateTime47.withDayOfYear(54);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear(2303);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 87L + "'", long24 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "France" + "'", str31, "France");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        boolean boolean6 = localDate1.isSupported(durationFieldType5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight10.toYearMonthDay();
        int int12 = yearMonthDay11.getYear();
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay11.dayOfMonth();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.LocalDate.Property property16 = localDate1.property(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfSecond();
        int int12 = dateTimeField9.getDifference((long) 11, (long) 4);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = dateTimeField9.getAsShortText(1644572124561L, locale14);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType19.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfHalfday();
        long long30 = dateTimeField28.roundHalfEven(11L);
        java.util.Locale locale34 = new java.util.Locale("ISOChronology[Etc/UTC]", "monthOfYear");
        java.lang.String str35 = dateTimeField28.getAsShortText(1644572134383L, locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale40.getDisplayLanguage(locale43);
        java.lang.String str45 = locale40.getCountry();
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category46, locale47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category46, locale49);
        java.lang.String str51 = locale40.getDisplayVariant(locale49);
        java.lang.String str52 = locale40.getDisplayName();
        java.lang.String str53 = locale40.getScript();
        java.lang.String str54 = locale34.getDisplayName(locale40);
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("millisofsecond");
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale57.getDisplayLanguage();
        java.util.Locale locale60 = locale57.stripExtensions();
        java.util.Locale.setDefault(category0, locale60);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str15, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "561" + "'", str16, "561");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals(locale34.toString(), "isochronology[etc/utc]_MONTHOFYEAR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "francese" + "'", str44, "francese");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "FR" + "'", str45, "FR");
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "French (France)" + "'", str52, "French (France)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "isochronology[etc/utc] (MONTHOFYEAR)" + "'", str54, "isochronology[etc/utc] (MONTHOFYEAR)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundHalfCeilingCopy();
        int int15 = dateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withYear(11);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight25.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime43.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.withDurationAdded(readableDuration48, (int) (short) -1);
        int int51 = dateTime47.getYearOfEra();
        org.joda.time.DateTime dateTime53 = dateTime47.withWeekOfWeekyear(5);
        int int54 = dateTime47.getMonthOfYear();
        org.joda.time.DateTime dateTime56 = dateTime47.withHourOfDay((int) (byte) 1);
        int int57 = dateMidnight33.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateMidnight.Property property58 = dateMidnight33.weekOfWeekyear();
        java.lang.Object obj59 = null;
        java.util.Locale.LanguageRange languageRange61 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] { languageRange61 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList69);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate75 = localDate73.withDayOfYear(11);
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfMonth();
        org.joda.time.Chronology chronology77 = localDate75.getChronology();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((java.lang.Object) str71, chronology77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) 1, (long) 7, chronology81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval82.toPeriod(periodType83);
        long long87 = chronology77.add((org.joda.time.ReadablePeriod) period84, 87L, 1);
        org.joda.time.DateTimeField dateTimeField88 = chronology77.weekyear();
        org.joda.time.DateTimeField dateTimeField89 = chronology77.dayOfWeek();
        long long93 = chronology77.add((-1L), (long) (short) 10, (int) 'u');
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate(obj59, chronology77);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight33.withChronology(chronology77);
        org.joda.time.Interval interval96 = dateMidnight33.toInterval();
        long long97 = interval96.getStartMillis();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1969 + "'", int51 == 1969);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 93L + "'", long87 == 93L);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1169L + "'", long93 == 1169L);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-61807104000010L) + "'", long97 == (-61807104000010L));
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean24 = localDate12.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        long long35 = interval34.getStartMillis();
        org.joda.time.Interval interval36 = interval34.toInterval();
        org.joda.time.Chronology chronology37 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology37);
        boolean boolean40 = dateTimeFieldType23.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.hourOfDay();
        org.joda.time.DurationField durationField42 = dateTimeField41.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval14.toPeriod(periodType15);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay10.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutablePeriod mutablePeriod18 = period16.toMutablePeriod();
        org.joda.time.Period period19 = mutablePeriod18.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 1, (long) 7, chronology46);
        org.joda.time.Duration duration48 = interval47.toDuration();
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTime dateTime50 = dateTime29.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology51 = dateTime29.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.yearOfEra();
        org.joda.time.Chronology chronology54 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfEra();
        org.joda.time.DurationField durationField56 = chronology54.years();
        boolean boolean57 = period19.equals((java.lang.Object) durationField56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        java.util.Locale locale2 = new java.util.Locale("ven.", "");
        org.junit.Assert.assertEquals(locale2.toString(), "ven.");
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone1 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = calendar0.getActualMinimum(1020000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1020000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572548808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=28,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate6.withDayOfYear((int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withChronology(chronology16);
        int int18 = dateTimeFormatter14.getDefaultYear();
        boolean boolean19 = dateTimeFormatter14.isParser();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withZone(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = localDate11.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(1971);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.weekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology10);
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay11.toDateMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay11.minus(readablePeriod18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.year();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.YearMonthDay yearMonthDay22 = property20.withMaximumValue();
        int int23 = property20.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay24 = property20.withMaximumValue();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(11);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.Chronology chronology30 = localDate28.getChronology();
        org.joda.time.LocalDate localDate32 = localDate28.minusDays(1);
        org.joda.time.LocalDate.Property property33 = localDate28.monthOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = localDate28.toDateTime(localTime34, dateTimeZone49);
        org.joda.time.Interval interval51 = yearMonthDay24.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology53);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay54.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plusWeeks(13);
        org.joda.time.DateMidnight.Property property58 = dateMidnight55.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.DateMidnight dateMidnight60 = property58.roundHalfEvenCopy();
        boolean boolean61 = dateTimeZone49.equals((java.lang.Object) dateMidnight60);
        org.joda.time.DateTime dateTime62 = localDate7.toDateTimeAtMidnight(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("T09:39:04.068");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 21);
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer9, 1555202190L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        int int10 = calendar8.getGreatestMinimum(3);
        java.util.Date date11 = calendar8.getTime();
        calendar0.setTime(date11);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(34265);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34265");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572548973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=28,MILLISECOND=973,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572548973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=28,MILLISECOND=973,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:42:28 UTC 2022");
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.DateTime dateTime51 = property2.addToCopy(1969);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance();
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.fromCalendarFields(calendar52);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.fromCalendarFields(calendar52);
        boolean boolean55 = dateTime51.equals((java.lang.Object) localDate54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = dateTimeZone59.getName((long) (byte) 10, locale61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone59);
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.DateTime dateTime65 = interval63.getStart();
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfWeek(4);
        org.joda.time.DateTime dateTime69 = dateTime65.minusMonths(4);
        org.joda.time.DateTime.Property property70 = dateTime65.monthOfYear();
        org.joda.time.DurationField durationField71 = property70.getRangeDurationField();
        org.joda.time.DateTime dateTime72 = property70.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate77 = localDate75.withDayOfYear(11);
        org.joda.time.LocalDate.Property property78 = localDate77.dayOfMonth();
        org.joda.time.Chronology chronology79 = localDate77.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType73.getField(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.dayOfMonth();
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        int int83 = dateTimeField81.getMaximumTextLength(locale82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = locale84.getDisplayLanguage();
        java.lang.String str86 = locale84.getDisplayVariant();
        int int87 = dateTimeField81.getMaximumShortTextLength(locale84);
        java.util.Calendar calendar88 = dateTime72.toCalendar(locale84);
        java.lang.String str89 = locale84.getLanguage();
        java.util.Calendar calendar90 = dateTime51.toCalendar(locale84);
        calendar90.set((-907), 34703, (-19034), 0, 59, (-292275054));
        // The following exception was thrown during execution in test generation
        try {
            int int99 = calendar90.getActualMaximum(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572548989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=28,MILLISECOND=989,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Korean" + "'", str85, "Korean");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ko" + "'", str89, "ko");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-907,MONTH=34703,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=-19034,DAY_OF_YEAR=32,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=-292275054,MILLISECOND=110,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        java.util.GregorianCalendar gregorianCalendar37 = dateMidnight32.toGregorianCalendar();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange41 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] { languageRange41 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(11);
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfMonth();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((java.lang.Object) str51, chronology57);
        org.joda.time.DurationField durationField59 = durationFieldType39.getField(chronology57);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.withDayOfYear(11);
        org.joda.time.LocalDate.Property property65 = localDate64.dayOfMonth();
        org.joda.time.Chronology chronology66 = localDate64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfSecond();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 13, chronology66);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeZone73.getName((long) (byte) 10, locale75);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone73);
        org.joda.time.Interval interval78 = interval77.toInterval();
        long long79 = interval78.getStartMillis();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval78.withDurationBeforeEnd(readableDuration80);
        long long82 = interval78.toDurationMillis();
        boolean boolean83 = interval78.containsNow();
        org.joda.time.Period period84 = interval78.toPeriod();
        long long87 = chronology66.add((org.joda.time.ReadablePeriod) period84, 187200001L, 2022);
        org.joda.time.DurationField durationField88 = durationFieldType39.getField(chronology66);
        org.joda.time.DateMidnight dateMidnight89 = org.joda.time.DateMidnight.now(chronology66);
        org.joda.time.DurationField durationField90 = chronology66.millis();
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight((-342302725000L), chronology66);
        java.lang.String str92 = chronology66.toString();
        boolean boolean93 = gregorianCalendar37.equals((java.lang.Object) chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 187200001L + "'", long87 == 187200001L);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ISOChronology[UTC]" + "'", str92, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int8 = yearMonthDay4.getYear();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.withMonthOfYear(1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(1970);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        int int21 = localDate17.getWeekyear();
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtStartOfDay();
        int int23 = localDate17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight57.withMillis((long) (short) 100);
        int int62 = dateMidnight57.getWeekOfWeekyear();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readablePeriod24, (org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 1, (long) 7, chronology66);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = interval67.toPeriod(periodType68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate73 = localDate71.plusMonths((int) '4');
        org.joda.time.DateTime dateTime74 = localDate71.toDateTimeAtStartOfDay();
        int int75 = localDate71.getWeekyear();
        org.joda.time.DateTime dateTime76 = localDate71.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period69, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight57.withPeriodAdded((org.joda.time.ReadablePeriod) period69, 6);
        org.joda.time.LocalDate localDate80 = localDate17.minus((org.joda.time.ReadablePeriod) period69);
        int int81 = period69.size();
        org.joda.time.MutablePeriod mutablePeriod82 = period69.toMutablePeriod();
        org.joda.time.LocalDate localDate83 = localDate13.plus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.lang.String str88 = dateTimeZone85.getName((long) (byte) 10, locale87);
        java.util.Set<java.lang.Character> charSet89 = locale87.getExtensionKeys();
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale87);
        int int92 = calendar90.getMinimum((int) (byte) 0);
        int int94 = calendar90.getGreatestMinimum(7);
        org.joda.time.LocalDate localDate95 = org.joda.time.LocalDate.fromCalendarFields(calendar90);
        boolean boolean96 = localDate83.isAfter((org.joda.time.ReadablePartial) localDate95);
        org.joda.time.LocalDate.Property property97 = localDate83.weekOfWeekyear();
        org.joda.time.LocalDate localDate99 = property97.addWrapFieldToCopy(44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.010" + "'", str88, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1644572549094,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=29,MILLISECOND=94,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(localDate99);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy(32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = property37.setCopy("T09:36:15.421");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:36:15.421\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        java.util.Date date6 = new java.util.Date((int) 'u', (int) 'u', (int) '4', 27, 35, 6);
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getSeconds();
        int int9 = date7.getDay();
        int int10 = date7.getSeconds();
        boolean boolean11 = date6.after(date7);
        int int12 = date6.getYear();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Nov 22 03:35:06 UTC 2026");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:42:29 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 29 + "'", int8 == 29);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 29 + "'", int10 == 29);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 126 + "'", int12 == 126);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withDayOfMonth(6);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.minusDays(954);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) 954);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight41);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 27);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay11.withYear((int) (short) -1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay17.minus(readablePeriod24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.year();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.YearMonthDay yearMonthDay28 = property26.withMaximumValue();
        int int29 = property26.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay30 = property26.withMaximumValue();
        java.lang.String str31 = property26.toString();
        org.joda.time.DurationField durationField32 = property26.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay33 = property26.withMaximumValue();
        int int34 = yearMonthDay14.compareTo((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime45 = localDate42.toDateTimeAtStartOfDay();
        int int46 = localDate42.getWeekyear();
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period40, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Interval interval50 = interval48.withEndMillis((long) 9);
        org.joda.time.DateTime dateTime51 = interval48.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 7, chronology54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        org.joda.time.DateTime dateTime63 = dateTime56.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology65);
        org.joda.time.DateMidnight dateMidnight67 = yearMonthDay66.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay68 = dateMidnight67.toYearMonthDay();
        int int69 = yearMonthDay68.getYear();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeZone73.getName((long) (byte) 10, locale75);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone73);
        org.joda.time.Interval interval78 = interval77.toInterval();
        long long79 = interval78.getStartMillis();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval78.withDurationBeforeEnd(readableDuration80);
        long long82 = interval78.toDurationMillis();
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval78.toPeriod(periodType83);
        int int85 = period84.size();
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay68.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) period84);
        org.joda.time.PeriodType periodType88 = period84.getPeriodType();
        org.joda.time.Period period89 = interval48.toPeriod(periodType88);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay33.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = yearMonthDay33.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[year]" + "'", str31, "Property[year]");
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval9.getStartMillis();
        org.joda.time.Interval interval11 = interval9.toInterval();
        org.joda.time.Chronology chronology12 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((-5L), chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfHalfday();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate23 = localDate20.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.LocalDate localDate25 = localDate20.withFields(readablePartial24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology27);
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay28.toDateMidnight(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.minus(readablePeriod35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.year();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.YearMonthDay yearMonthDay39 = property37.withMaximumValue();
        int int40 = property37.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property37.getFieldType();
        org.joda.time.LocalDate localDate43 = localDate25.withField(dateTimeFieldType41, 34546);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getDisplayVariant();
        java.lang.String str47 = locale44.getExtension('a');
        java.lang.String str48 = locale44.getISO3Language();
        java.lang.String str49 = locale44.getCountry();
        boolean boolean50 = localDate43.equals((java.lang.Object) locale44);
        long long52 = chronology12.set((org.joda.time.ReadablePartial) localDate43, (long) 954);
        org.joda.time.Interval interval53 = localDate43.toInterval();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property56 = dateTime55.monthOfYear();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate60.getChronology();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate64 = property63.roundCeilingCopy();
        int int65 = property56.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.LocalDate localDate67 = localDate64.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property68 = localDate64.dayOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology70);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay71.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        java.lang.String str82 = locale80.getISO3Language();
        java.lang.String str83 = locale80.getDisplayCountry();
        java.util.Locale locale84 = locale80.stripExtensions();
        java.lang.String str85 = yearMonthDay71.toString("1", locale84);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay71.plusYears(4);
        org.joda.time.DateTime dateTime88 = yearMonthDay87.toDateTimeAtMidnight();
        long long89 = property68.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.LocalDate localDate90 = property68.roundCeilingCopy();
        org.joda.time.LocalDate.Property property91 = localDate90.yearOfEra();
        int int92 = localDate43.compareTo((org.joda.time.ReadablePartial) localDate90);
        int int93 = localDate43.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ita" + "'", str48, "ita");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "IT" + "'", str49, "IT");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1028000160000954L + "'", long52 == 1028000160000954L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fra" + "'", str82, "fra");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "France" + "'", str83, "France");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1450L) + "'", long89 == (-1450L));
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 34546 + "'", int93 == 34546);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = dateTimeZone9.getName((long) 11, locale12);
        int int14 = property8.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField15 = property8.getDurationField();
        org.joda.time.LocalDate localDate16 = property8.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, 50);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks(27);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        int int10 = dateTimeField8.getMaximumTextLength(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.getDisplayVariant();
        int int14 = dateTimeField8.getMaximumShortTextLength(locale11);
        int int16 = dateTimeField8.getMaximumValue((long) 397);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = property23.getLocalDate();
        org.joda.time.LocalDate localDate27 = property23.addWrapFieldToCopy(2233);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] { languageRange30 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) str40, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.dayOfWeek();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePeriod) period54, (-1L), (long) 9);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField8.set((org.joda.time.ReadablePartial) localDate27, 40, intArray57, 34741);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfFloorCopy();
        boolean boolean37 = dateTimeZone1.equals((java.lang.Object) dateMidnight36);
        int int39 = dateTimeZone1.getOffsetFromLocal(6127761962000L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(100L, dateTimeZone1);
        boolean boolean41 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone1);
        java.lang.String str43 = dateTimeZone1.toString();
        java.lang.String str44 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.plusMonths(109);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayCountry();
        int int15 = property11.getMaximumShortTextLength(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italy" + "'", str14, "Italy");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfDay((int) 'x');
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        long long27 = interval26.getStartMillis();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        long long30 = interval26.toDurationMillis();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval26.toPeriod(periodType31);
        int int33 = period32.size();
        org.joda.time.MutablePeriod mutablePeriod34 = period32.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMonths(4);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(70);
        int int51 = dateTime48.getSecondOfMinute();
        org.joda.time.DateTime dateTime53 = dateTime48.withYear((int) 'u');
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = dateTime17.plus((org.joda.time.ReadablePeriod) period32);
        int int56 = dateTime17.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        java.util.Date date6 = new java.util.Date(58, 32770, (int) 'u', 39, 34521, (int) '#');
        int int7 = date6.getDate();
        java.util.Date date13 = new java.util.Date(34704, 34530, 2719, 621, 70);
        boolean boolean14 = date6.before(date13);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 22 14:21:35 UTC 4689");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 03 22:10:00 UTC 39489");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        java.lang.String str11 = localDate6.toString("13");
        int int12 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(397);
        org.joda.time.DateMidnight dateMidnight15 = localDate6.toDateMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "13" + "'", str11, "13");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.weekyear();
        java.lang.String str56 = property55.getName();
        org.joda.time.DateMidnight dateMidnight57 = property55.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property55.getFieldType();
        java.util.Locale locale61 = new java.util.Locale("ISOChronology[Etc/UTC]", "monthOfYear");
        java.lang.String str62 = locale61.getVariant();
        java.lang.String str64 = locale61.getExtension('a');
        int int65 = property55.getMaximumShortTextLength(locale61);
        org.joda.time.DateMidnight dateMidnight66 = property55.getDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "weekyear" + "'", str56, "weekyear");
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals(locale61.toString(), "isochronology[etc/utc]_MONTHOFYEAR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.Interval interval37 = dateMidnight36.toInterval();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withMillis(0L);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate46 = localDate41.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate localDate49 = localDate46.withWeekyear(3);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime51 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.DateTime dateTime60 = localDate46.toDateTime(localTime51, dateTimeZone55);
        long long63 = dateTimeZone55.adjustOffset((long) 41, false);
        org.joda.time.DateTime dateTime64 = dateMidnight39.toDateTime(dateTimeZone55);
        long long66 = dateTimeZone55.convertUTCToLocal((long) 365);
        java.lang.String str68 = dateTimeZone55.getName(1644572220000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 41L + "'", long63 == 41L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 375L + "'", long66 == 375L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        org.joda.time.DateTime.Property property20 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime22.toMutableDateTime(dateTimeZone53);
        boolean boolean57 = dateTimeZone53.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy(366);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        int int44 = localDate43.getWeekOfWeekyear();
        int int45 = localDate43.size();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        java.util.Locale locale17 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int18 = dateTimeField13.getMaximumTextLength(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withLocale(locale17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withLocale(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "T09:36:20.244", "1970-01-01T00:00:00.011+00:00:00.010");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withLocale(locale27);
        org.joda.time.Chronology chronology29 = dateTimeFormatter5.getChronolgy();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.LocalDate localDate36 = localDate33.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.minus(readablePeriod46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.year();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.YearMonthDay yearMonthDay50 = property48.withMaximumValue();
        int int51 = property48.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property48.getFieldType();
        int int53 = localDate36.get(dateTimeFieldType52);
        int int54 = localDate36.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTimeFormatter5.print((org.joda.time.ReadablePartial) localDate36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals(locale27.toString(), "_T09:36:20.244_1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate21 = localDate17.withYear(34521);
        int int22 = localDate17.getYear();
        int int23 = localDate17.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale27);
        int int32 = calendar30.getGreatestMinimum(3);
        calendar30.add(7, 106);
        boolean boolean36 = localDate17.equals((java.lang.Object) 7);
        int[] intArray37 = localDate17.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder38 = builder16.setFields(intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1653730949736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=148,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=29,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11]");
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        long long17 = chronology8.add((-5178038399999L), (long) 32772, 269);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.Period period28 = interval25.toPeriod();
        int[] intArray30 = chronology8.get((org.joda.time.ReadablePeriod) period28, (long) (short) 100);
        org.joda.time.DateTimeField dateTimeField31 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology8.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-5178029584331L) + "'", long17 == (-5178029584331L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, 34567);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 34567");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.LocalDate localDate25 = localDate21.minusDays(1);
        org.joda.time.LocalDate.Property property26 = localDate21.monthOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime37.getZone();
        org.joda.time.DateTime dateTime43 = localDate21.toDateTime(localTime27, dateTimeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone42);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone42);
        java.lang.String str47 = dateTimeZone42.getName((long) 2598);
        boolean boolean48 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime49 = dateTime14.toDateTime(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 25 + "'", int15 == 25);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        int int19 = property11.getMaximumTextLength(locale16);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale16);
        calendar20.set((int) (short) -1, 95, 365);
        calendar20.setTimeInMillis(43200015L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:29.827" + "'", str8, "T09:42:29.827");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=43200015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=15,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate12);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = dateTimeField9.getAsText((long) 22, locale18);
        java.lang.String str20 = locale18.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName(locale24);
        java.lang.String str28 = locale0.getDisplayVariant(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale0.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = localDate3.plusMonths((-1));
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((-1));
        org.joda.time.LocalDate localDate11 = localDate9.minusYears(1971);
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(600);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        int int25 = property16.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate27 = localDate24.plusWeeks((int) '#');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        boolean boolean32 = dateTimeZone29.isFixed();
        int int34 = dateTimeZone29.getOffsetFromLocal((long) 10);
        long long38 = dateTimeZone29.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = dateTimeZone29.getName(10L, locale43);
        org.joda.time.Interval interval47 = localDate27.toInterval(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfWeek(4);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMinutes(1969);
        org.joda.time.DateTime dateTime63 = dateTime61.withYear(999);
        boolean boolean64 = localDate27.equals((java.lang.Object) dateTime61);
        org.joda.time.DateTime dateTime66 = dateTime61.withDayOfYear(54);
        org.joda.time.DateTime dateTime68 = dateTime66.plusWeeks(1020000);
        boolean boolean69 = localDate13.equals((java.lang.Object) dateTime68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = localDate13.toString("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 87L + "'", long38 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "France" + "'", str45, "France");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(34536);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        long long11 = property10.remainder();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("minutes");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate14 = localDate7.minusMonths(11);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = localDate7.toString("\u30d5\u30e9\u30f3\u30b9", locale16);
        org.joda.time.LocalDate localDate19 = localDate7.minusDays((int) 'x');
        org.joda.time.LocalDate localDate21 = localDate19.withCenturyOfEra((int) 'a');
        boolean boolean22 = languageRange1.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "minutes" + "'", str3, "minutes");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "minutes" + "'", str4, "minutes");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "minutes" + "'", str5, "minutes");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str17, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.minusDays(292278993);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight55.withYearOfCentury(0);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.plusMonths((int) '4');
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate67 = localDate62.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property68 = localDate67.weekyear();
        org.joda.time.LocalDate localDate70 = localDate67.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str72 = dateTimeFieldType71.toString();
        int int73 = localDate70.get(dateTimeFieldType71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight60.withFields((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateMidnight.Property property75 = dateMidnight60.weekOfWeekyear();
        org.joda.time.DateMidnight.Property property76 = dateMidnight60.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "dayOfYear" + "'", str72, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 360 + "'", int73 == 360);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setDate(1969);
        int int17 = date13.getYear();
        java.lang.String str18 = date13.toLocaleString();
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromDateFields(date13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withMinuteOfHour(2719);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2719 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Jul 21 04:06:02 UTC 2169");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 269 + "'", int17 == 269);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "21 juil. 2169 04:06:02" + "'", str18, "21 juil. 2169 04:06:02");
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder15 = builder12.setRegion("523");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder12.setExtension('x', "cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        date14.setTime((-62135596800010L));
        int int17 = date14.getMonth();
        java.util.Date date18 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        int int20 = date18.getDay();
        java.lang.String str21 = date18.toGMTString();
        boolean boolean22 = date14.after(date18);
        java.lang.Object obj23 = date18.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Jan 02 23:59:59 UTC 1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 09:42:30 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11 Feb 2022 09:42:30 GMT" + "'", str21, "11 Feb 2022 09:42:30 GMT");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "Fri Feb 11 09:42:30 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "Fri Feb 11 09:42:30 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "Fri Feb 11 09:42:30 UTC 2022");
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfFloorCopy();
        boolean boolean37 = dateTimeZone1.equals((java.lang.Object) dateMidnight36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 4, dateTimeZone1);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate46 = localDate41.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate.Property property48 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate49 = property48.roundHalfCeilingCopy();
        java.lang.String str50 = property48.getAsText();
        org.joda.time.DurationField durationField51 = property48.getRangeDurationField();
        java.lang.String str52 = property48.getAsShortText();
        org.joda.time.LocalDate localDate54 = property48.addToCopy(13);
        org.joda.time.LocalDate localDate55 = property48.roundCeilingCopy();
        org.joda.time.LocalDate localDate56 = property48.roundHalfCeilingCopy();
        int int57 = localDate39.compareTo((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate.Property property58 = localDate39.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "71" + "'", str50, "71");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "71" + "'", str52, "71");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusWeeks(16);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(11);
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfMonth();
        org.joda.time.Chronology chronology41 = localDate39.getChronology();
        int int42 = localDate39.getDayOfWeek();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology44);
        org.joda.time.DateTime dateTime46 = yearMonthDay45.toDateTimeAtMidnight();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight51 = yearMonthDay45.toDateMidnight(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay45.minus(readablePeriod52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay53.year();
        int int55 = localDate39.compareTo((org.joda.time.ReadablePartial) yearMonthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getRangeDurationType();
        org.joda.time.LocalDate localDate59 = localDate39.withField(dateTimeFieldType56, 8);
        org.joda.time.Chronology chronology60 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval62 = new org.joda.time.Interval((java.lang.Object) mutableDateTime35, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getAsString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "42" + "'", str12, "42");
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateTime dateTime26 = localDate4.toDateTime(localTime10, dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime28.withSecondOfMinute((int) '#');
        org.joda.time.LocalDate localDate31 = dateTime28.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = localDate31.getField(2000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) (byte) 10);
        boolean boolean18 = dateTimeZone15.isFixed();
        int int20 = dateTimeZone15.getOffsetFromLocal((long) 10);
        long long24 = dateTimeZone15.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = dateTimeZone15.getName(10L, locale29);
        int int34 = dateTimeZone15.getOffsetFromLocal((long) (short) -1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.DateTime dateTime36 = dateTime12.withZoneRetainFields(dateTimeZone15);
        boolean boolean37 = dateTimeZone15.isFixed();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 87L + "'", long24 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "France" + "'", str31, "France");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withMillis((long) (short) 100);
        int int47 = dateMidnight42.getWeekOfWeekyear();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readablePeriod9, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtStartOfDay();
        int int60 = localDate56.getWeekyear();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period54, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 6);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight42.minusWeeks(1);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight42.minus(11L);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone72);
        org.joda.time.Interval interval77 = interval76.toInterval();
        long long78 = interval77.getStartMillis();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Interval interval80 = interval77.withDurationBeforeEnd(readableDuration79);
        long long81 = interval77.toDurationMillis();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval77.toPeriod(periodType82);
        int int84 = period83.size();
        int int85 = period83.size();
        org.joda.time.Period period86 = period83.toPeriod();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight68.minus((org.joda.time.ReadablePeriod) period86);
        int[] intArray89 = chronology6.get((org.joda.time.ReadablePeriod) period86, 1644572161256L);
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateTimeField dateTimeField91 = chronology6.halfdayOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 2719, 1, 9, 36, 1, 256]");
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        java.lang.String str16 = property11.toString();
        java.lang.String str17 = property11.toString();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale locale19 = builder18.build();
        java.lang.String str20 = property11.getAsText(locale19);
        org.joda.time.YearMonthDay yearMonthDay21 = property11.getYearMonthDay();
        int int22 = property11.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[year]" + "'", str16, "Property[year]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[year]" + "'", str17, "Property[year]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.minusMillis((int) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay1.plusMinutes((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.Duration duration42 = interval41.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime44 = dateTime23.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds(1);
        int int47 = dateTime46.getMonthOfYear();
        org.joda.time.DateTime dateTime48 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime48.minusMonths(35313);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property34.roundHalfFloorCopy();
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withDayOfMonth(12);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays(2005);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withDurationAdded((long) 32, 95);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight43);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long9 = dateTimeField7.roundCeiling((long) 3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay12);
        int int14 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfWeek();
        org.joda.time.LocalDate localDate25 = property24.roundCeilingCopy();
        int int26 = property17.compareTo((org.joda.time.ReadablePartial) localDate25);
        int int27 = localDate25.getYearOfEra();
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        int int87 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate25, intArray86);
        java.util.Date date88 = localDate25.toDate();
        org.joda.time.LocalDate.Property property89 = localDate25.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 43200000L + "'", long9 == 43200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Jan 11 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        int int12 = localDate9.size();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(31);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra(34530);
        int int17 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.LocalDate localDate25 = localDate21.minusDays(1);
        org.joda.time.LocalDate.Property property26 = localDate21.monthOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime37.getZone();
        org.joda.time.DateTime dateTime43 = localDate21.toDateTime(localTime27, dateTimeZone42);
        org.joda.time.LocalDate.Property property44 = localDate21.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(11);
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfMonth();
        org.joda.time.Chronology chronology51 = localDate49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType45.getField(chronology51);
        long long55 = dateTimeField52.add((long) (short) 0, 14);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField52.getType();
        int int57 = localDate21.indexOf(dateTimeFieldType56);
        int int58 = localDate16.indexOf(dateTimeFieldType56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate60 = localDate16.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 604800000L + "'", long55 == 604800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int14 = property11.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property11.addToCopy(14);
        int int17 = timeOfDay16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusMinutes(840);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = timeOfDay16.withMinuteOfHour(308);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 308 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:30.506" + "'", str8, "T09:42:30.506");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "30" + "'", str12, "30");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutableInterval mutableInterval23 = interval10.toMutableInterval();
        boolean boolean24 = interval10.isBeforeNow();
        org.joda.time.DateTime dateTime25 = interval10.getStart();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate29.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate34 = localDate32.minusYears((int) (short) 0);
        org.joda.time.LocalDate.Property property35 = localDate34.weekOfWeekyear();
        int int36 = localDate34.getMonthOfYear();
        org.joda.time.DateTime dateTime37 = dateTime25.withFields((org.joda.time.ReadablePartial) localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate15 = localDate10.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.LocalDate localDate18 = localDate15.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        int int21 = localDate18.get(dateTimeFieldType19);
        boolean boolean22 = localDate1.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate1.getFields();
        boolean boolean25 = localDate1.equals((java.lang.Object) "CN");
        java.lang.String str27 = localDate1.toString("\u4e0a\u5348");
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfHour();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(chronology33);
        java.lang.String str36 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        long long58 = dateTimeZone53.convertLocalToUTC((long) 'a', true, (long) 4);
        int int60 = dateTimeZone53.getOffset((long) 50);
        boolean boolean61 = dateTimeZone53.isFixed();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(0L, dateTimeZone53);
        java.lang.String str63 = dateTimeZone53.toString();
        java.lang.String str65 = dateTimeZone53.getNameKey(34530L);
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone53);
        long long68 = dateTimeZone53.previousTransition(291599980L);
        org.joda.time.Chronology chronology69 = chronology33.withZone(dateTimeZone53);
        org.joda.time.Interval interval70 = localDate1.toInterval(dateTimeZone53);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfYear" + "'", str20, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 360 + "'", int21 == 360);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e0a\u5348" + "'", str27, "\u4e0a\u5348");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 87L + "'", long58 == 87L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 291599980L + "'", long68 == 291599980L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long9 = dateTimeField7.roundCeiling((long) 3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay12);
        int int14 = dateTimeField7.getMinimumValue();
        long long16 = dateTimeField7.roundCeiling((long) 15);
        long long18 = dateTimeField7.roundHalfFloor((long) 49);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths((int) '4');
        org.joda.time.LocalDate localDate24 = localDate20.withYear((int) 'a');
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay31.getFieldTypes();
        boolean boolean33 = timeOfDay29.isAfter((org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean35 = timeOfDay29.isSupported(dateTimeFieldType34);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay29.minusSeconds((-13827));
        int[] intArray38 = timeOfDay37.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDate26, 5970, intArray38, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 43200000L + "'", long9 == 43200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 43200000L + "'", long16 == 43200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[13, 32, 57, 631]");
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str13 = locale8.getDisplayScript(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withLocale(locale12);
        boolean boolean15 = dateTimeFormatter14.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        long long19 = dateTimeZone14.convertLocalToUTC((long) 'a', true, (long) 4);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone14);
        java.lang.String str22 = dateTimeZone14.getID();
        long long24 = dateTimeZone14.nextTransition((long) 1965);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 87L + "'", long19 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1965L + "'", long24 == 1965L);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        org.joda.time.DateTime dateTime4 = property2.roundFloorCopy();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) str16, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 7, chronology27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = interval28.toPeriod(periodType29);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) period30, (-1L), (long) 9);
        org.joda.time.DurationField durationField34 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology22.monthOfYear();
        int int36 = dateTime4.get(dateTimeField35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.LocalDate localDate44 = localDate40.minusDays(1);
        org.joda.time.LocalDate.Property property45 = localDate40.monthOfYear();
        org.joda.time.LocalTime localTime46 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTime();
        org.joda.time.DateTime.Property property60 = dateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime56.getZone();
        org.joda.time.DateTime dateTime62 = localDate40.toDateTime(localTime46, dateTimeZone61);
        int int63 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property64 = localDate40.yearOfCentury();
        int int65 = property64.getMinimumValueOverall();
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.lang.String str67 = property64.getAsText(locale66);
        int int68 = dateTimeField35.getMaximumTextLength(locale66);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "70" + "'", str67, "70");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.clear();
        calendar6.set(5, 34265, 36, 954, 65, 34619);
        calendar6.setTimeInMillis((long) 18);
        calendar6.setTimeInMillis(1644572169028L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = calendar6.isSet(397);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 397");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572169028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=9,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        boolean boolean18 = interval7.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology19 = interval7.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology22);
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay23.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone26);
        long long33 = chronology19.set((org.joda.time.ReadablePartial) localDate31, (-61747120148658L));
        java.util.Date date34 = localDate31.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 22251342L + "'", long33 == 22251342L);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay18 = property11.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minusYears(34785);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(0L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusMonths(18);
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        org.joda.time.Instant instant23 = dateMidnight21.toInstant();
        int int24 = dateTime16.compareTo((org.joda.time.ReadableInstant) instant23);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        int int18 = property11.getMaximumValue();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = property11.getAsText(locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = property10.getDateMidnight();
        int int12 = property10.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight13 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plusWeeks(13);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((int) (short) -1);
        boolean boolean10 = dateMidnight8.isAfter((long) 3);
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = property11.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight13 = property11.getDateMidnight();
        int int14 = property11.getLeapAmount();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(3599990L);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int14 = property11.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = property11.setCopy("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=21,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=21,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:30.957" + "'", str8, "T09:42:30.957");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "30" + "'", str12, "30");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        int int21 = calendar20.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1644572550969,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=30,MILLISECOND=979,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(32772);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusMonths(39);
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight14.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay15.toDateMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonthDay15.getFieldTypes();
        org.joda.time.LocalDate localDate18 = yearMonthDay15.toLocalDate();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.Chronology chronology35 = dateMidnight32.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate39 = localDate37.plusMonths((int) '4');
        org.joda.time.DateTime dateTime40 = localDate37.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate42 = localDate37.plusYears((int) (byte) 1);
        int int43 = localDate37.getWeekyear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology45);
        org.joda.time.DateTime dateTime47 = yearMonthDay46.toDateTimeAtMidnight();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight52 = yearMonthDay46.toDateMidnight(dateTimeZone49);
        java.lang.String str54 = dateTimeZone49.getName((long) 11);
        org.joda.time.DateTime dateTime55 = localDate37.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.Chronology chronology56 = chronology35.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField57 = chronology35.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(561, 34937047);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 561 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add((int) (byte) 1, (int) (short) 1);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.Locale locale10 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap13 = calendar0.getDisplayNames(43, 44, locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1676108551063,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=31,MILLISECOND=63,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals(locale10.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        boolean boolean13 = interval8.containsNow();
        org.joda.time.Period period14 = interval8.toPeriod();
        boolean boolean15 = interval8.containsNow();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        long long25 = interval24.getStartMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 7, chronology30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval31.toPeriod(periodType32);
        org.joda.time.Interval interval34 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval37 = interval34.withEnd((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusMonths(19);
        int int45 = yearMonthDay42.size();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay42.plus(readablePeriod46);
        org.joda.time.Interval interval48 = yearMonthDay42.toInterval();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval48.withDurationAfterStart(readableDuration49);
        boolean boolean51 = interval38.isAfter((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Interval interval52 = interval8.gap((org.joda.time.ReadableInterval) interval38);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(interval52);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        int int12 = localDate9.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        boolean boolean14 = localDate9.isSupported(durationFieldType13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minus(readableDuration48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight47.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight47.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate61 = localDate59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime62 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate64 = localDate59.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate64.weekyear();
        org.joda.time.LocalDate localDate67 = localDate64.withWeekyear(3);
        org.joda.time.LocalDate localDate69 = localDate67.plusDays(0);
        org.joda.time.LocalDate localDate71 = localDate69.withCenturyOfEra((int) (byte) 10);
        int int72 = localDate71.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.lang.String str79 = dateTimeZone76.getName((long) (byte) 10, locale78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone76);
        org.joda.time.Interval interval81 = interval80.toInterval();
        long long82 = interval81.getStartMillis();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Interval interval84 = interval81.withDurationBeforeEnd(readableDuration83);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) 1, (long) 7, chronology87);
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Period period90 = interval88.toPeriod(periodType89);
        org.joda.time.Interval interval91 = interval84.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period90);
        org.joda.time.LocalDate localDate93 = localDate71.withPeriodAdded((org.joda.time.ReadablePeriod) period90, 1971);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight55.withPeriodAdded((org.joda.time.ReadablePeriod) period90, (int) (short) 10);
        org.joda.time.LocalDate localDate96 = localDate9.minus((org.joda.time.ReadablePeriod) period90);
        org.joda.time.LocalDate.Property property97 = localDate96.dayOfMonth();
        int int98 = localDate96.getEra();
        int int99 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate96);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 360 + "'", int72 == 360);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder12 = builder4.setDate((int) (byte) 10, 70500000, 1971);
        java.util.Calendar.Builder builder16 = builder4.setTimeOfDay(95, 22, 32769);
        java.util.Calendar.Builder builder20 = builder4.setDate(273, 11, 964);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfDay((int) ' ');
        org.joda.time.DateTime dateTime44 = dateTime39.minusSeconds(22);
        int int45 = dateTime39.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight60 = dateTime57.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone64);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.DateTime dateTime70 = interval68.getStart();
        org.joda.time.DateTime dateTime72 = dateTime70.withDayOfWeek(4);
        org.joda.time.DateTime dateTime73 = dateTime70.toDateTime();
        org.joda.time.DateTime.Property property74 = dateTime70.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime70.getZone();
        org.joda.time.DateTime dateTime76 = dateTime57.withZone(dateTimeZone75);
        boolean boolean77 = dateTimeZone75.isFixed();
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime39.toMutableDateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = dateTime39.plusMillis(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = dateTime39.withDayOfMonth(34838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34838 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.DateTime dateTime50 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays((-1886));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        java.lang.String str1 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "months" + "'", str1, "months");
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        int int10 = property8.get();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate10);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = dateTimeField7.getAsText((long) 22, locale16);
        long long19 = dateTimeField7.roundCeiling((-61725542400000L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.minus(readablePeriod29);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.year();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.YearMonthDay yearMonthDay33 = property31.withMaximumValue();
        int int34 = property31.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay35 = property31.withMaximumValue();
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay35.monthOfYear();
        int[] intArray38 = null;
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray38);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "19" + "'", str17, "19");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-59011459200000L) + "'", long19 == (-59011459200000L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2922789 + "'", int39 == 2922789);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutableInterval mutableInterval23 = interval10.toMutableInterval();
        boolean boolean24 = interval10.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        long long34 = interval33.getStartMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 1, (long) 7, chronology39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.Interval interval43 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Interval interval44 = interval10.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        long long54 = interval53.getStartMillis();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Interval interval56 = interval53.withDurationBeforeEnd(readableDuration55);
        boolean boolean57 = interval53.containsNow();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property60 = dateTime59.monthOfYear();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.withDayOfYear(11);
        org.joda.time.LocalDate.Property property65 = localDate64.dayOfMonth();
        org.joda.time.Chronology chronology66 = localDate64.getChronology();
        org.joda.time.LocalDate.Property property67 = localDate64.dayOfWeek();
        org.joda.time.LocalDate localDate68 = property67.roundCeilingCopy();
        int int69 = property60.compareTo((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate localDate71 = localDate68.plusWeeks((int) '#');
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int75 = dateTimeZone73.getOffset((long) (byte) 10);
        boolean boolean76 = dateTimeZone73.isFixed();
        int int78 = dateTimeZone73.getOffsetFromLocal((long) 10);
        long long82 = dateTimeZone73.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.lang.String str88 = dateTimeZone85.getName((long) (byte) 10, locale87);
        java.lang.String str89 = locale87.getDisplayCountry();
        java.lang.String str90 = dateTimeZone73.getName(10L, locale87);
        org.joda.time.Interval interval91 = localDate71.toInterval(dateTimeZone73);
        org.joda.time.Interval interval92 = interval53.overlap((org.joda.time.ReadableInterval) interval91);
        boolean boolean93 = interval36.overlaps((org.joda.time.ReadableInterval) interval92);
        org.joda.time.MutableInterval mutableInterval94 = interval36.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 87L + "'", long82 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.010" + "'", str88, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "France" + "'", str89, "France");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.010" + "'", str90, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mutableInterval94);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.weekyears();
        org.joda.time.DurationField durationField9 = chronology5.millis();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        boolean boolean18 = interval7.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval19 = interval7.toInterval();
        long long20 = interval19.getStartMillis();
        boolean boolean21 = interval19.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.clear();
        calendar6.setTimeInMillis((long) 11);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar6.getActualMaximum(12562035);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 12562035");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=11,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        long long89 = chronology17.add((org.joda.time.ReadablePeriod) period80, 604800000L, 32);
        org.joda.time.DurationField durationField90 = chronology17.hours();
        org.joda.time.DurationField durationField91 = chronology17.centuries();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 604800192L + "'", long89 == 604800192L);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay22.minusDays((int) '#');
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay22.year();
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay22.toDateMidnight();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        int int16 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        long long27 = dateTimeField24.add((long) 100, 70);
        boolean boolean28 = dateTimeField24.isLenient();
        int int29 = dateTime15.get(dateTimeField24);
        long long32 = dateTimeField24.add((long) '#', (long) 34530);
        java.lang.String str34 = dateTimeField24.getAsText(140L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMonths(4);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(70);
        int int51 = dateTime48.getSecondOfMinute();
        org.joda.time.DateTime dateTime53 = dateTime48.withYear((int) 'u');
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfEra(35);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks(27);
        org.joda.time.DateTime.Property property58 = dateTime55.secondOfDay();
        int int59 = dateTime55.getSecondOfDay();
        org.joda.time.DateTime dateTime61 = dateTime55.plusMinutes(3600011);
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime55.toYearMonthDay();
        int int63 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay62);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3024000100L + "'", long27 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1491696000035L + "'", long32 == 1491696000035L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AM" + "'", str34, "AM");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 1, (long) 7, chronology4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Interval interval18 = interval15.withPeriodBeforeEnd(readablePeriod17);
        boolean boolean19 = interval18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        boolean boolean30 = interval18.overlaps((org.joda.time.ReadableInterval) interval27);
        boolean boolean31 = interval5.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Chronology chronology32 = interval5.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        boolean boolean38 = timeOfDay34.isAfter((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean40 = timeOfDay34.isSupported(dateTimeFieldType39);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay34.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay34.minusMillis((int) 'a');
        int[] intArray46 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay34, 130636804320000087L);
        org.joda.time.DurationField durationField47 = chronology32.centuries();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 13920, (long) 32769, chronology32);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DurationField durationField51 = chronology32.eras();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 97]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        boolean boolean22 = durationFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        java.lang.String str26 = dateTimeField24.getAsText((long) 11);
        int int27 = dateTime14.get(dateTimeField24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusMonths(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone39);
        java.lang.String str44 = dateTimeZone39.getName((long) 11);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = dateTimeZone39.getName((long) '4', locale46);
        java.lang.String str48 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) yearMonthDay30, 70, locale46);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay30.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay51 = property49.setCopy(43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "70" + "'", str48, "70");
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay3.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology14 = timeOfDay3.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        long long18 = dateTimeField15.add((-302400000L), 292269054);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:42:31.708" + "'", str8, "T09:42:31.708");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 25252045963200000L + "'", long18 == 25252045963200000L);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((java.lang.Object) str14, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfWeek();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 22, chronology20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay26.minus(readablePeriod33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.year();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.YearMonthDay yearMonthDay37 = property35.withMaximumValue();
        long long39 = chronology20.set((org.joda.time.ReadablePartial) yearMonthDay37, (long) 2000);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtStartOfDay();
        int int45 = localDate41.getWeekyear();
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtStartOfDay();
        int int47 = localDate41.getDayOfMonth();
        org.joda.time.LocalDate localDate49 = localDate41.plusWeeks(100);
        org.joda.time.LocalDate localDate51 = localDate41.plusMonths((int) ' ');
        long long53 = chronology20.set((org.joda.time.ReadablePartial) localDate41, (long) 34534);
        org.joda.time.DurationField durationField54 = chronology20.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval55 = new org.joda.time.Interval(86399990L, (long) 805, chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9223371985593602000L + "'", long39 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 34534L + "'", long53 == 34534L);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        int int10 = yearMonthDay9.getMonthOfYear();
        org.joda.time.LocalDate localDate11 = yearMonthDay9.toLocalDate();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay9.dayOfMonth();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        int int22 = dateTimeField19.getDifference((long) 11, (long) 4);
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.lang.String str26 = dateTimeField19.getAsShortText(1644572124561L, locale24);
        java.lang.String str27 = property12.getAsShortText(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property12.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property12.getFieldType();
        boolean boolean30 = localDate7.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDate localDate32 = localDate7.minusYears(397);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate7.withYearOfCentury(34937047);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34937047 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "United Kingdom" + "'", str25, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "561" + "'", str26, "561");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11" + "'", str27, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.Duration duration4 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        long long14 = interval13.getStartMillis();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        long long17 = interval13.toDurationMillis();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval13.toPeriod(periodType18);
        int int20 = period19.size();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        boolean boolean23 = interval3.containsNow();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay27.getFieldTypes();
        boolean boolean29 = timeOfDay25.isAfter((org.joda.time.ReadablePartial) timeOfDay27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay25.minus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.withPeriodAdded(readablePeriod32, 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay34.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = timeOfDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.Interval interval45 = interval3.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeField46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJEraDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        org.joda.time.DateTime dateTime29 = dateTime23.minusDays((int) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime23.withMillis((long) 5);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(dateTimeZone46);
        int int49 = dateTimeZone46.getOffsetFromLocal((long) '#');
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime23.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        long long48 = dateTimeZone44.previousTransition(87L);
        boolean boolean49 = dateTime12.equals((java.lang.Object) long48);
        org.joda.time.DateTime dateTime51 = dateTime12.withYearOfCentury((int) ' ');
        int int52 = dateTime12.getYearOfEra();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.LocalDate.Property property58 = localDate56.dayOfYear();
        org.joda.time.LocalDate localDate60 = localDate56.plusMonths((-1));
        org.joda.time.LocalDate localDate62 = localDate60.minusWeeks((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean64 = localDate60.equals((java.lang.Object) dateTimeFieldType63);
        int int65 = dateTime12.get(dateTimeFieldType63);
        org.joda.time.DateTime dateTime67 = dateTime12.withMillisOfSecond((int) 'u');
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 87L + "'", long48 == 87L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.plusMillis((int) (short) 100);
        int int13 = timeOfDay12.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusMillis((int) (short) 10);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        java.util.Date date1 = new java.util.Date(3024000000L);
        date1.setDate(0);
        int int4 = date1.getMinutes();
        date1.setTime(1644572179714L);
        java.lang.Object obj7 = date1.clone();
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:36:19 UTC 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "Fri Feb 11 09:36:19 UTC 2022");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "Fri Feb 11 09:36:19 UTC 2022");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "Fri Feb 11 09:36:19 UTC 2022");
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate16.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekyear(3);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDate21.toDateTime(localTime26, dateTimeZone30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.minus(readablePeriod46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.year();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getStart();
        org.joda.time.DateTime dateTime77 = dateTime75.withDayOfWeek(4);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime81 = dateTime75.toDateTime(dateTimeZone80);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateTime59, dateTimeZone80);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = property83.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = dateTimeZone87.getName((long) (byte) 10, locale89);
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = property83.getAsText(locale89);
        java.lang.String str93 = property48.getAsShortText(locale89);
        java.lang.String str94 = dateTimeZone30.getShortName(16L, locale89);
        java.util.Locale.Builder builder95 = builder14.setLocale(locale89);
        java.util.Locale.Builder builder96 = builder95.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder99 = builder96.setUnicodeLocaleKeyword("", "7");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.010" + "'", str90, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.010" + "'", str94, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.weekyear();
        org.joda.time.DateMidnight dateMidnight32 = property31.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        java.lang.String str38 = locale36.getISO3Language();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayName();
        java.lang.String str41 = locale36.getDisplayCountry();
        int int42 = property31.getMaximumTextLength(locale36);
        org.joda.time.DateMidnight dateMidnight43 = property31.getDateMidnight();
        boolean boolean44 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTime dateTime47 = dateTime11.withDurationAdded((-62135596800000L), 34265);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime49 = property48.roundCeilingCopy();
        org.joda.time.DateTime dateTime50 = property48.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.withDayOfYear(11);
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfMonth();
        org.joda.time.Chronology chronology56 = localDate54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.minuteOfHour();
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean60 = localDate58.isSupported(dateTimeFieldType59);
        int int61 = dateTime50.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "France" + "'", str39, "France");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "French (France)" + "'", str40, "French (France)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "France" + "'", str41, "France");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDurationAdded(16L, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYear(1439);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar6.getActualMaximum((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        long long19 = interval18.getStartMillis();
        org.joda.time.Interval interval20 = interval18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        long long30 = interval29.getStartMillis();
        org.joda.time.Interval interval31 = interval29.toInterval();
        org.joda.time.Chronology chronology32 = interval29.getChronology();
        boolean boolean33 = interval18.isBefore((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.minusMonths(19);
        int int39 = yearMonthDay36.size();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay36.plus(readablePeriod40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay36.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.minusDays(269);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay45.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay45.withYear((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTime(readableInstant49);
        org.joda.time.DateMidnight dateMidnight51 = yearMonthDay45.toDateMidnight();
        boolean boolean52 = interval18.contains((org.joda.time.ReadableInstant) dateMidnight51);
        long long53 = interval18.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = interval18.isBefore(readableInstant54);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572552029L + "'", long19 == 1644572552029L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        java.lang.String str11 = dateTimeField9.getAsText((long) 11);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale13.getDisplayVariant(locale17);
        java.lang.String str21 = dateTimeField9.getAsText((int) (byte) 10, locale17);
        long long24 = dateTimeField9.set((long) (byte) 1, 5);
        int int25 = dateTimeField9.getMaximumValue();
        long long28 = dateTimeField9.add((long) 42, 1990L);
        int int29 = dateTimeField9.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "France" + "'", str19, "France");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 18000001L + "'", long24 == 18000001L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7164000042L + "'", long28 == 7164000042L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime34.withYearOfCentury(33);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.LocalDate.Property property58 = localDate56.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTime dateTime62 = dateTime52.withField(dateTimeFieldType59, 13);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours(2);
        org.joda.time.DateTime.Property property65 = dateTime62.era();
        org.joda.time.DateTime dateTime67 = dateTime62.plusMinutes(273);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setYear(11);
        int int17 = date13.getYear();
        int int18 = date13.getHours();
        java.util.Date date19 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date19);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date19);
        date19.setSeconds(34530);
        boolean boolean24 = date13.after(date19);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        int int27 = localDate25.getDayOfWeek();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 07 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 19:17:30 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar.Builder builder7 = builder0.setWeekDate((int) (short) -1, 13, (int) (short) 10);
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(39, 3, 11);
        java.util.Calendar.Builder builder16 = builder0.setTimeOfDay(561, 48, 34937047, 1999);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572552112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weeks();
        long long12 = chronology7.add((long) 34521, (long) 1971, 59);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 150810L + "'", long12 == 150810L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear(17);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(11);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfWeek();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate15 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfWeek();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate26 = property22.withMaximumValue();
        int int27 = property11.compareTo((org.joda.time.ReadablePartial) localDate26);
        boolean boolean28 = property11.isLeap();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("T09:37:04.866");
        int int31 = property11.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayVariant();
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = locale30.getDisplayVariant(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDate3.toString("hourOfDay", locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7" + "'", str23, "7");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        int int13 = dateTimeField10.getDifference((long) 11, (long) 4);
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeField10.getAsShortText(1644572124561L, locale15);
        java.lang.String str18 = property3.getAsShortText(locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property3.getFieldType();
        java.lang.String str20 = dateTimeFieldType19.getName();
        java.util.Locale.LanguageRange languageRange23 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] { languageRange23 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList31);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(11);
        org.joda.time.LocalDate.Property property38 = localDate37.dayOfMonth();
        org.joda.time.Chronology chronology39 = localDate37.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((java.lang.Object) str33, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfWeek();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePeriod) period47, (-1L), (long) 9);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) 8, chronology39);
        org.joda.time.DateTimeField dateTimeField52 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField53 = chronology39.millis();
        org.joda.time.DateTimeField dateTimeField54 = chronology39.yearOfEra();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology39);
        boolean boolean56 = dateTimeFieldType19.isSupported(chronology39);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = chronology39.getDateTimeMillis(0L, 3, 35, (int) ' ', 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "561" + "'", str17, "561");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "11" + "'", str18, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfMonth" + "'", str20, "dayOfMonth");
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        boolean boolean14 = dateTimeField13.isSupported();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        boolean boolean20 = timeOfDay16.isAfter((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay16.minus(readablePeriod21);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMinutes(22);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str29 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) timeOfDay26, locale28);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay26.millisOfSecond();
        org.joda.time.TimeOfDay.Property property31 = timeOfDay26.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property31.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "4" + "'", str29, "4");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.LocalDate localDate14 = property8.addToCopy(13);
        org.joda.time.LocalDate localDate15 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property8.addToCopy(999);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate17.withDayOfYear(34723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34723 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "71" + "'", str12, "71");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime34.plusYears((int) (byte) -1);
        org.joda.time.DateTime dateTime54 = dateTime52.plusWeeks((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = locale58.getDisplayLanguage(locale61);
        java.lang.String str63 = locale58.getCountry();
        java.lang.String str64 = locale58.getLanguage();
        java.util.Calendar calendar65 = dateTime52.toCalendar(locale58);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        java.util.Set<java.lang.Character> charSet71 = locale69.getExtensionKeys();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale69);
        int int74 = calendar72.getMinimum((int) (byte) 0);
        int int76 = calendar72.getGreatestMinimum(7);
        calendar72.clear();
        calendar72.setTimeInMillis((long) (short) 10);
        calendar72.clear();
        int int81 = calendar65.compareTo(calendar72);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "francese" + "'", str62, "francese");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "FR" + "'", str63, "FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fr" + "'", str64, "fr");
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-31532399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(13920);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear(970);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        java.util.Date date3 = new java.util.Date(38, 892, 2067);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 27 00:00:00 UTC 2017");
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getGreatestMinimum(3);
        java.util.Date date9 = calendar6.getTime();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate15 = localDate11.withYear(34521);
        int int16 = localDate11.getYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime31.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate11.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone36);
        java.util.Locale.LanguageRange languageRange43 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] { languageRange43 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(11);
        org.joda.time.LocalDate.Property property58 = localDate57.dayOfMonth();
        org.joda.time.Chronology chronology59 = localDate57.getChronology();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((java.lang.Object) str53, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.dayOfWeek();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) 1, (long) 7, chronology64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval65.toPeriod(periodType66);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePeriod) period67, (-1L), (long) 9);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) ' ', (long) ' ', chronology59);
        org.joda.time.DateTimeField dateTimeField72 = chronology59.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.lang.String str79 = dateTimeZone76.getName((long) (byte) 10, locale78);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone76);
        org.joda.time.Interval interval81 = interval80.toInterval();
        long long82 = interval81.getStartMillis();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Interval interval84 = interval81.withDurationBeforeEnd(readableDuration83);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) 1, (long) 7, chronology87);
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Period period90 = interval88.toPeriod(periodType89);
        org.joda.time.Interval interval91 = interval84.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period90);
        int[] intArray93 = chronology59.get((org.joda.time.ReadablePeriod) period90, (long) 32);
        org.joda.time.DateTime dateTime95 = dateTime39.withPeriodAdded((org.joda.time.ReadablePeriod) period90, 4);
        org.joda.time.PeriodType periodType96 = period90.getPeriodType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572552423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:42:32 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        int int15 = property11.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMonths(4);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillisOfDay(70);
        int int33 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime30.withYear((int) 'u');
        org.joda.time.DateTime dateTime37 = dateTime30.withYearOfEra(35);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(27);
        org.joda.time.DateTime.Property property40 = dateTime37.secondOfDay();
        int int41 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime dateTime43 = dateTime37.plusMinutes(3600011);
        org.joda.time.DateTime dateTime44 = yearMonthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDate localDate45 = yearMonthDay16.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        int int20 = property11.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks((int) '#');
        int int23 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeZone27.getName((long) (byte) 10, locale29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone27);
        org.joda.time.Interval interval32 = interval31.toInterval();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(dateTimeZone38);
        int int41 = dateTimeZone38.getOffsetFromLocal((long) '#');
        org.joda.time.DateMidnight dateMidnight42 = localDate22.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate44 = localDate22.minusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property45 = localDate22.monthOfYear();
        java.lang.String str46 = localDate22.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.plusMonths(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = yearMonthDay51.getFieldTypes();
        boolean boolean53 = localDate22.equals((java.lang.Object) yearMonthDay51);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-09-13" + "'", str46, "1970-09-13");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = property39.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight41 = property39.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plusWeeks((int) (byte) 0);
        boolean boolean44 = interval5.isBefore((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withYear(264);
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter49.withOffsetParsed();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.withDayOfYear(11);
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfMonth();
        org.joda.time.Chronology chronology56 = localDate54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property62 = dateTime61.monthOfYear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.withDayOfYear(11);
        org.joda.time.LocalDate.Property property67 = localDate66.dayOfMonth();
        org.joda.time.Chronology chronology68 = localDate66.getChronology();
        org.joda.time.LocalDate.Property property69 = localDate66.dayOfWeek();
        org.joda.time.LocalDate localDate70 = property69.roundCeilingCopy();
        int int71 = property62.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.plusWeeks((int) '#');
        int int74 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getStart();
        org.joda.time.DateTime dateTime86 = dateTime84.withDayOfWeek(4);
        org.joda.time.DateTime dateTime87 = dateTime84.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime90 = dateTime84.toDateTime(dateTimeZone89);
        int int92 = dateTimeZone89.getOffsetFromLocal((long) '#');
        org.joda.time.DateMidnight dateMidnight93 = localDate73.toDateMidnight(dateTimeZone89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter49.withZone(dateTimeZone89);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight41.withZoneRetainFields(dateTimeZone89);
        long long97 = dateTimeZone89.previousTransition(7L);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 7L + "'", long97 == 7L);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.weekyearOfCentury();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        org.joda.time.LocalDate localDate17 = localDate13.minusDays(1);
        org.joda.time.LocalDate.Property property18 = localDate13.monthOfYear();
        int int19 = localDate13.size();
        int int20 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate13.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.monthOfYear();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate22 = localDate18.withYear(34521);
        int int23 = localDate18.getYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime38.getZone();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate18.toDateTimeAtStartOfDay(dateTimeZone43);
        int int47 = dateTimeZone43.getStandardOffset((long) 40);
        org.joda.time.Chronology chronology48 = chronology8.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        boolean boolean4 = interval3.isAfterNow();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay7.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMonths(4);
        java.util.Date date25 = dateTime24.toDate();
        org.joda.time.DateTime.Property property26 = dateTime24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime59 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration55, 100);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval61 = interval3.withDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval63 = interval3.withStartMillis((long) 292278994);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateTime dateTime26 = localDate4.toDateTime(localTime10, dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime58 = dateTime55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime61 = dateTime55.toDateTime(dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((java.lang.Object) dateTime39, dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime39.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone68);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getStart();
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfWeek(4);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime.Property property78 = dateTime74.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime74.getZone();
        org.joda.time.DateTime dateTime80 = dateTime64.toDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime64.plusYears((int) (byte) -1);
        boolean boolean83 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime85 = dateTime28.withHourOfDay(0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder22 = builder8.setTimeOfDay(4, 1, 30);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale26.getCountry();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category32, locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale35);
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale35);
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone41 = calendar40.getTimeZone();
        java.util.Calendar.Builder builder42 = builder39.setTimeZone(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41);
        java.util.TimeZone timeZone44 = calendar43.getTimeZone();
        java.util.Calendar.Builder builder45 = builder22.setTimeZone(timeZone44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder48 = builder22.setWeekDefinition(13920, 1003);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "francese" + "'", str30, "francese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR" + "'", str31, "FR");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644572552743,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=743,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572552743,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=743,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withYear(11);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withWeekyear(58);
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.year();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setRegion("T09:36:49.150");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: T09:36:49.150 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar6.roll(352, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder12 = builder4.setDate(58, 22, 2000);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone15 = calendar14.getTimeZone();
        java.util.Calendar.Builder builder16 = builder13.setTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Calendar.Builder builder18 = builder4.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate(34567, 23, 366);
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder26 = builder24.setLocale(locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572552795,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=795,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        boolean boolean66 = dateTimeFormatter65.isOffsetParsed();
        org.joda.time.Chronology chronology67 = dateTimeFormatter65.getChronology();
        java.io.Writer writer68 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property71 = dateTime70.monthOfYear();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate75 = localDate73.withDayOfYear(11);
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfMonth();
        org.joda.time.Chronology chronology77 = localDate75.getChronology();
        org.joda.time.LocalDate.Property property78 = localDate75.dayOfWeek();
        org.joda.time.LocalDate localDate79 = property78.roundCeilingCopy();
        int int80 = property71.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate localDate82 = localDate79.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property83 = localDate79.year();
        org.joda.time.LocalDate localDate84 = property83.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter65.printTo(writer68, (org.joda.time.ReadablePartial) localDate84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate84);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.minusWeeks((int) (byte) -1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.yearOfEra();
        org.joda.time.DateMidnight.Property property8 = dateMidnight3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property19.getFieldType();
        int int22 = dateMidnight3.get(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-61883135999990L));
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = timeOfDay1.toDateTimeToday();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology5);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtMidnight();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay6.toDateMidnight(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay6.minus(readablePeriod13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay14.year();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.YearMonthDay yearMonthDay17 = property15.withMaximumValue();
        int int18 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property15.getFieldType();
        java.lang.String str20 = property15.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay21 = property15.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusDays(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.minusMonths(19);
        int int29 = yearMonthDay26.size();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay26.plus(readablePeriod30);
        org.joda.time.Interval interval32 = yearMonthDay26.toInterval();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = interval32.isBefore(readableInstant33);
        org.joda.time.DateTime dateTime35 = interval32.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 1, (long) 7, chronology38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval39.toPeriod(periodType40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtStartOfDay();
        int int47 = localDate43.getWeekyear();
        org.joda.time.DateTime dateTime48 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period41, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Interval interval51 = interval49.withEndMillis((long) 9);
        org.joda.time.DateTime dateTime52 = interval49.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 1, (long) 7, chronology60);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = interval61.toPeriod(periodType62);
        org.joda.time.DateTime dateTime64 = dateTime57.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay69 = dateMidnight68.toYearMonthDay();
        int int70 = yearMonthDay69.getYear();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.lang.String str77 = dateTimeZone74.getName((long) (byte) 10, locale76);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone74);
        org.joda.time.Interval interval79 = interval78.toInterval();
        long long80 = interval79.getStartMillis();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Interval interval82 = interval79.withDurationBeforeEnd(readableDuration81);
        long long83 = interval79.toDurationMillis();
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = interval79.toPeriod(periodType84);
        int int86 = period85.size();
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay69.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadablePeriod) period85);
        org.joda.time.PeriodType periodType89 = period85.getPeriodType();
        org.joda.time.Period period90 = interval49.toPeriod(periodType89);
        org.joda.time.Period period91 = interval32.toPeriod(periodType89);
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay23.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.DurationFieldType durationFieldType94 = period91.getFieldType((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay96 = timeOfDay1.withFieldAdded(durationFieldType94, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.010" + "'", str77, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(durationFieldType94);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.LocalDate localDate8 = localDate3.withFields(readablePartial7);
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        int int10 = localDate8.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setExtension('x', "gregory");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("T09:40:25.075");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: T09:40:25.075 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1644572340422L);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone8.isFixed();
        boolean boolean12 = dateTimeZone8.isFixed();
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay4.toDateMidnight(dateTimeZone8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        boolean boolean20 = timeOfDay16.isAfter((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay16.minus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.withPeriodAdded(readablePeriod23, 10);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay22.minuteOfHour();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        boolean boolean29 = dateTimeField28.isSupported();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(chronology32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay33.getFieldTypes();
        boolean boolean35 = timeOfDay31.isAfter((org.joda.time.ReadablePartial) timeOfDay33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay31.minus(readablePeriod36);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.plusMinutes(22);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str44 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) timeOfDay41, locale43);
        java.lang.String str45 = locale43.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = yearMonthDay4.toString("tedesco", locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "4" + "'", str44, "4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        int int14 = dateTimeField12.getMinimumValue((long) 5);
        int int16 = dateTimeField12.get(1644580800000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        java.util.Locale locale3 = new java.util.Locale("Property[dayOfWeek]", "23 Jul 2169 08:06:02 GMT", "ita");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "property[dayofweek]_23 JUL 2169 08:06:02 GMT_ita");
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = property34.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateMidnight.Property property39 = dateMidnight36.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.minus((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight36.toMutableDateTimeISO();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        org.joda.time.LocalDate localDate51 = localDate47.minusDays(1);
        org.joda.time.LocalDate.Property property52 = localDate47.monthOfYear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset((long) (byte) 10);
        boolean boolean57 = dateTimeZone54.isFixed();
        boolean boolean58 = dateTimeZone54.isFixed();
        org.joda.time.Interval interval59 = localDate47.toInterval(dateTimeZone54);
        boolean boolean60 = interval43.overlaps((org.joda.time.ReadableInterval) interval59);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayVariant();
        java.lang.String str16 = locale13.getExtension('a');
        int int17 = property11.getMaximumShortTextLength(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property11.setCopy(360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder22 = builder8.setTimeOfDay(4, 1, 30);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale26.getCountry();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category32, locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale35);
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone42, locale43);
        java.util.Calendar.Builder builder45 = builder38.setTimeZone(timeZone42);
        java.util.Calendar.Builder builder49 = builder45.setDate(273, 517, (-292275054));
        java.util.Calendar.Builder builder53 = builder49.setTimeOfDay(1970, (-1), 2922789);
        java.util.Calendar.Builder builder57 = builder53.setDate(34567, 245, 16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder59 = builder57.setInstant(40L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "francese" + "'", str30, "francese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR" + "'", str31, "FR");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572553160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=33,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2000, 34723);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 34723");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 1, (long) 7, chronology14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = interval15.toPeriod(periodType16);
        org.joda.time.Interval interval18 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.Duration duration23 = interval22.toDuration();
        boolean boolean24 = interval11.overlaps((org.joda.time.ReadableInterval) interval22);
        boolean boolean25 = interval22.isBeforeNow();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay28.toDateMidnight();
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = property32.addWrapFieldToCopy(1);
        org.joda.time.Interval interval35 = interval22.withEnd((org.joda.time.ReadableInstant) dateMidnight34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withWeekOfWeekyear(1429200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1429200000 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder3.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale.Builder builder15 = builder3.setLocale(locale14);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("Italie");
        java.util.Locale.Builder builder19 = builder16.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.yearOfEra();
        boolean boolean15 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) str16, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 22, chronology22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology27);
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay28.toDateMidnight(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.minus(readablePeriod35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.year();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.YearMonthDay yearMonthDay39 = property37.withMaximumValue();
        long long41 = chronology22.set((org.joda.time.ReadablePartial) yearMonthDay39, (long) 2000);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) ' ', chronology22);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType1.getField(chronology22);
        java.lang.String str44 = chronology22.toString();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 529, chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9223371985593602000L + "'", long41 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property15 = dateTime14.monthOfYear();
        long long16 = property15.remainder();
        org.joda.time.DateTime dateTime17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        long long34 = interval33.getStartMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 1, (long) 7, chronology39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.Interval interval43 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval46 = interval43.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval47 = interval22.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 13, chronology54);
        org.joda.time.DurationField durationField58 = chronology54.hours();
        org.joda.time.Interval interval59 = interval46.withChronology(chronology54);
        org.joda.time.Duration duration60 = interval59.toDuration();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime9.minus((org.joda.time.ReadableDuration) duration60);
        boolean boolean63 = dateTime9.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate39 = localDate34.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate39.weekyear();
        org.joda.time.LocalDate localDate42 = localDate39.withWeekyear(3);
        org.joda.time.LocalDate localDate44 = localDate39.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = localDate39.toInterval(dateTimeZone46);
        int[] intArray52 = chronology31.get((org.joda.time.ReadablePartial) localDate39, (long) 17);
        org.joda.time.DateTimeField dateTimeField53 = chronology31.minuteOfHour();
        int int56 = dateTimeField53.getDifference((long) 360, (long) (-18));
        int int57 = dateTimeField53.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        org.joda.time.DateTime.Property property30 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = property30.addToCopy(13920);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(11);
        org.joda.time.LocalDate.Property property38 = localDate37.dayOfWeek();
        org.joda.time.LocalDate localDate40 = localDate37.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.LocalDate localDate42 = localDate37.withFields(readablePartial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology44);
        org.joda.time.DateTime dateTime46 = yearMonthDay45.toDateTimeAtMidnight();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight51 = yearMonthDay45.toDateMidnight(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay45.minus(readablePeriod52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay53.year();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.withMaximumValue();
        int int57 = property54.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        org.joda.time.LocalDate localDate60 = localDate42.withField(dateTimeFieldType58, 34546);
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale61.getDisplayVariant();
        java.lang.String str64 = locale61.getExtension('a');
        java.lang.String str65 = locale61.getISO3Language();
        java.lang.String str66 = locale61.getCountry();
        boolean boolean67 = localDate60.equals((java.lang.Object) locale61);
        int int68 = property30.getMaximumShortTextLength(locale61);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ita" + "'", str65, "ita");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "IT" + "'", str66, "IT");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean5 = dateTimeFormatter3.isParser();
        java.util.Locale locale6 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear(655);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 34615);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        boolean boolean20 = durationFieldType13.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) 1969, chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology19.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology19);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.parse("\u661f\u671f\u56db", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight41 = property37.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property37.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withWeekyear(56);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.era();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.LocalDate localDate8 = localDate3.withFields(readablePartial7);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        int int10 = localDate8.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval11.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime22.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        boolean boolean30 = interval11.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        java.lang.String str41 = dateTimeZone34.getShortName((long) 35);
        org.joda.time.DateTime dateTime42 = dateTime28.toDateTime(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        long long44 = gregorianCalendar43.getTimeInMillis();
        gregorianCalendar43.setLenient(true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-5178038399999L) + "'", long44 == (-5178038399999L));
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        int int8 = timeOfDay1.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 1, (long) 7, chronology35);
        org.joda.time.Duration duration37 = interval36.toDuration();
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime39 = dateTime18.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology40 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        long long50 = interval49.getStartMillis();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval49.withDurationBeforeEnd(readableDuration51);
        long long53 = interval49.toDurationMillis();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        int int56 = period55.size();
        org.joda.time.MutablePeriod mutablePeriod57 = period55.toMutablePeriod();
        long long60 = chronology40.add((org.joda.time.ReadablePeriod) period55, (long) 70, 39);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay1.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.TimeOfDay.Property property62 = timeOfDay61.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 70L + "'", long60 == 70L);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        long long15 = property13.remainder();
        int int16 = property13.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property13.roundHalfEvenCopy();
        int int18 = dateTime17.getYearOfEra();
        boolean boolean20 = dateTime17.isAfter(568L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 11L + "'", long15 == 11L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        java.util.Locale locale3 = new java.util.Locale("19", "57", "coreano");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        long long16 = dateTimeField13.add((long) 100, 70);
        org.joda.time.DurationField durationField17 = dateTimeField13.getRangeDurationField();
        int int18 = dateTimeField13.getMinimumValue();
        long long20 = dateTimeField13.remainder((-61725542400000L));
        boolean boolean21 = calendar5.after((java.lang.Object) (-61725542400000L));
        org.joda.time.YearMonthDay yearMonthDay22 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        java.util.Date date23 = calendar5.getTime();
        java.lang.String str24 = date23.toGMTString();
        org.junit.Assert.assertEquals(locale3.toString(), "19_57_coreano");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572553580,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=33,MILLISECOND=580,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3024000100L + "'", long16 == 3024000100L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 11 09:42:33 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11 Feb 2022 09:42:33 GMT" + "'", str24, "11 Feb 2022 09:42:33 GMT");
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        int int3 = property2.getMinimumValueOverall();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.DateTime dateTime5 = property2.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight38.minus((org.joda.time.ReadableDuration) duration55);
        int int58 = dateMidnight57.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusYears(4);
        int int61 = property2.getDifference((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = dateTimeZone65.getName((long) (byte) 10, locale67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone65);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getStart();
        org.joda.time.DateTime dateTime73 = dateTime71.withDayOfWeek(4);
        org.joda.time.DateTime dateTime75 = dateTime71.minusMonths(4);
        org.joda.time.DateTime dateTime77 = dateTime75.withMillisOfDay(70);
        int int78 = dateTime75.getSecondOfMinute();
        org.joda.time.DateTime dateTime80 = dateTime75.withYear((int) 'u');
        org.joda.time.DateTime dateTime82 = dateTime75.withYearOfEra(35);
        org.joda.time.DateTime dateTime84 = dateTime82.minusWeeks(27);
        org.joda.time.DateTime.Property property85 = dateTime82.secondOfDay();
        int int86 = dateTime82.getSecondOfDay();
        org.joda.time.DateTime dateTime88 = dateTime82.plusMinutes(3600011);
        boolean boolean89 = dateMidnight57.isBefore((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        int int13 = property11.get();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        int int15 = property11.get();
        org.joda.time.TimeOfDay timeOfDay17 = property11.addToCopy(34938);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(954, 34265, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34265 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        int int23 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay25 = property11.setCopy((int) (short) 10);
        org.joda.time.LocalDate localDate26 = yearMonthDay25.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime60 = dateTime54.toDateTime(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, dateTimeZone59);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = property62.roundHalfFloorCopy();
        boolean boolean64 = dateTimeZone28.equals((java.lang.Object) dateMidnight63);
        int int66 = dateTimeZone28.getOffsetFromLocal(6127761962000L);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(100L, dateTimeZone28);
        boolean boolean68 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime69 = localDate26.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = dateTime69.withHourOfDay(927);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 927 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572553671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=33,MILLISECOND=671,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        java.lang.String str13 = locale11.getISO3Language();
        java.lang.String str14 = dateTimeField6.getAsText(14, locale11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay17.toDateMidnight();
        int int19 = yearMonthDay17.getYear();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.minusYears((int) '#');
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay17.plusMonths(2);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) yearMonthDay23, 58, locale25);
        java.lang.String str28 = locale25.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale25.getUnicodeLocaleType("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=22,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=22,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "14" + "'", str14, "14");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "58" + "'", str27, "58");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr-CA" + "'", str28, "fr-CA");
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.addToCopy(269);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property6.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears((-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate8 = localDate1.plusYears(71);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        java.util.Date date5 = new java.util.Date(13920, 7, 34546, 2, 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime29.getZone();
        int int35 = property19.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay();
        int int37 = yearMonthDay36.getMonthOfYear();
        org.joda.time.LocalDate localDate38 = yearMonthDay36.toLocalDate();
        org.joda.time.DateTime dateTime39 = dateTime29.withFields((org.joda.time.ReadablePartial) localDate38);
        int int40 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime dateTime43 = dateTime29.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime45 = dateTime43.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        long long55 = interval54.getStartMillis();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationBeforeEnd(readableDuration56);
        long long58 = interval54.toDurationMillis();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        int int61 = period60.size();
        int int62 = period60.size();
        org.joda.time.DateTime dateTime63 = dateTime45.minus((org.joda.time.ReadablePeriod) period60);
        java.util.Date date64 = dateTime45.toDate();
        java.time.Instant instant65 = date64.toInstant();
        java.util.Date date66 = java.util.Date.from(instant65);
        int int67 = date66.getDate();
        org.joda.time.YearMonthDay yearMonthDay68 = org.joda.time.YearMonthDay.fromDateFields(date66);
        boolean boolean69 = date5.after(date66);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Mar 02 02:00:00 UTC 15915");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(chronology6);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date6.setMinutes(3);
        java.time.Instant instant9 = date6.toInstant();
        date6.setTime(604800000L);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate localDate19 = localDate15.minusDays(1);
        org.joda.time.LocalDate.Property property20 = localDate15.monthOfYear();
        int int21 = property20.getMinimumValueOverall();
        int int22 = property20.getMinimumValue();
        org.joda.time.LocalDate localDate23 = property20.withMinimumValue();
        org.joda.time.LocalDate.Property property24 = localDate23.centuryOfEra();
        java.util.Locale.LanguageRange languageRange27 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] { languageRange27 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(11);
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfMonth();
        org.joda.time.Chronology chronology43 = localDate41.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((java.lang.Object) str37, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfWeek();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 22, chronology43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology48);
        org.joda.time.DateTime dateTime50 = yearMonthDay49.toDateTimeAtMidnight();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay49.toDateMidnight(dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay49.minus(readablePeriod56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay57.year();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.YearMonthDay yearMonthDay60 = property58.withMaximumValue();
        long long62 = chronology43.set((org.joda.time.ReadablePartial) yearMonthDay60, (long) 2000);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = localDate64.toDateTimeAtStartOfDay();
        int int68 = localDate64.getWeekyear();
        org.joda.time.DateTime dateTime69 = localDate64.toDateTimeAtStartOfDay();
        int int70 = localDate64.getDayOfMonth();
        org.joda.time.LocalDate localDate72 = localDate64.plusWeeks(100);
        org.joda.time.LocalDate localDate74 = localDate64.plusMonths((int) ' ');
        long long76 = chronology43.set((org.joda.time.ReadablePartial) localDate64, (long) 34534);
        org.joda.time.LocalDate localDate77 = localDate23.withFields((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.Chronology chronology78 = localDate77.getChronology();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) localDate77);
        org.joda.time.LocalDate.Property property80 = localDate77.yearOfEra();
        boolean boolean81 = date6.equals((java.lang.Object) property80);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 08 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9223371985593602000L + "'", long62 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 34534L + "'", long76 == 34534L);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus(1644572124561L);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusDays(34536);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology15);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay16.toDateMidnight(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay16.minus(readablePeriod23);
        java.lang.String str26 = yearMonthDay16.toString("DE");
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        boolean boolean34 = durationFieldType27.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now(chronology33);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField39 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay16.withChronologyRetainFields(chronology33);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate48 = localDate43.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property49 = localDate48.weekyear();
        org.joda.time.LocalDate localDate51 = localDate48.withWeekyear(3);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime53 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.DateTime dateTime62 = localDate48.toDateTime(localTime53, dateTimeZone57);
        org.joda.time.Interval interval63 = yearMonthDay41.toInterval(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight9.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight9.plusYears((int) '#');
        org.joda.time.DateTime dateTime67 = dateMidnight9.toDateTimeISO();
        org.joda.time.Interval interval68 = dateMidnight9.toInterval();
        org.joda.time.Duration duration69 = interval68.toDuration();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd\ufffd" + "'", str26, "\ufffd\ufffd");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int31 = gregorianCalendar29.getActualMaximum((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusDays(1965);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.minusYears(713);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        boolean boolean42 = timeOfDay38.isAfter((org.joda.time.ReadablePartial) timeOfDay40);
        int int43 = timeOfDay40.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = timeOfDay40.toString(dateTimeFormatter44);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay40.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property48 = timeOfDay40.secondOfMinute();
        java.lang.String str49 = property48.getAsString();
        org.joda.time.TimeOfDay timeOfDay51 = property48.addNoWrapToCopy(34265);
        org.joda.time.TimeOfDay timeOfDay52 = property48.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = yearMonthDay32.compareTo((org.joda.time.ReadablePartial) timeOfDay52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278994 + "'", int31 == 292278994);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "T09:42:33.969" + "'", str45, "T09:42:33.969");
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "33" + "'", str49, "33");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology5);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtStartOfDay();
        int int14 = localDate10.getWeekyear();
        org.joda.time.DateTime dateTime15 = localDate10.toDateTimeAtStartOfDay();
        int int16 = localDate10.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.withMillis((long) (short) 100);
        int int55 = dateMidnight50.getWeekOfWeekyear();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readablePeriod17, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = localDate64.toDateTimeAtStartOfDay();
        int int68 = localDate64.getWeekyear();
        org.joda.time.DateTime dateTime69 = localDate64.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period62, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight50.withPeriodAdded((org.joda.time.ReadablePeriod) period62, 6);
        org.joda.time.LocalDate localDate73 = localDate10.minus((org.joda.time.ReadablePeriod) period62);
        int int74 = period62.size();
        org.joda.time.MutablePeriod mutablePeriod75 = period62.toMutablePeriod();
        org.joda.time.Period period76 = period62.toPeriod();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) period62);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plusWeeks(13);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((int) (short) -1);
        boolean boolean10 = dateMidnight8.isAfter((long) 3);
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays(0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.Duration duration46 = interval45.toDuration();
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTime dateTime48 = dateTime27.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology49 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime55 = localDate52.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate57 = localDate52.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property58 = localDate57.weekyear();
        org.joda.time.LocalDate localDate60 = localDate57.withWeekyear(3);
        org.joda.time.LocalDate localDate62 = localDate57.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.lang.String str67 = dateTimeZone64.getName((long) (byte) 10, locale66);
        org.joda.time.Interval interval68 = localDate57.toInterval(dateTimeZone64);
        int[] intArray70 = chronology49.get((org.joda.time.ReadablePartial) localDate57, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter15.withChronology(chronology49);
        org.joda.time.Chronology chronology72 = dateTimeFormatter71.getChronology();
        org.joda.time.DateTime dateTime73 = dateMidnight8.toDateTime(chronology72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology72);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        int[] intArray58 = chronology17.get((org.joda.time.ReadablePeriod) period52, (long) 10, (long) 13);
        org.joda.time.DurationField durationField59 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField60 = chronology17.dayOfWeek();
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now(chronology17);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.PRC;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology4);
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay5.toDateMidnight(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.getName((long) 11);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = dateTimeZone8.getName((long) '4', locale15);
        java.lang.String str17 = locale2.getDisplayCountry(locale15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime28.getZone();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = property35.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        java.lang.String str42 = locale40.getISO3Language();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.lang.String str44 = locale40.getDisplayName();
        java.lang.String str45 = locale40.getDisplayCountry();
        int int46 = property35.getMaximumTextLength(locale40);
        java.lang.String str47 = locale15.getDisplayCountry(locale40);
        java.lang.String str48 = locale0.getDisplayVariant(locale40);
        java.util.Locale locale49 = locale40.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = dateTimeZone65.getName((long) (byte) 10, locale67);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone65);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.DateTime dateTime71 = interval69.getStart();
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays(0);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.Duration duration78 = interval77.toDuration();
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTime dateTime80 = dateTime59.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Chronology chronology81 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.dayOfMonth();
        boolean boolean83 = locale40.equals((java.lang.Object) dateTimeField82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en-GB" + "'", str1, "en-GB");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Cina" + "'", str17, "Cina");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fra" + "'", str42, "fra");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "France" + "'", str43, "France");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French (France)" + "'", str44, "French (France)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "France" + "'", str45, "France");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Italie" + "'", str47, "Italie");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }
}

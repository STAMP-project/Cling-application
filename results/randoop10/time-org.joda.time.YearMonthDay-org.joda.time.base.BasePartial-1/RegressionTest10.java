import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        int int14 = localDate9.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean16 = localDate9.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate19 = localDate9.withWeekyear(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        int int18 = calendar6.getWeeksInWeekYear();
        calendar6.setLenient(true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate9.getFields();
        int int16 = localDate9.getWeekyear();
        org.joda.time.LocalDate.Property property17 = localDate9.yearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1971 + "'", int16 == 1971);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        int int7 = localDate1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone13);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.minusMonths(19);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtStartOfDay();
        int int31 = localDate27.getWeekyear();
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtStartOfDay();
        int int33 = localDate27.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.withMillis((long) (short) 100);
        int int72 = dateMidnight67.getWeekOfWeekyear();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readablePeriod34, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate83 = localDate81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime84 = localDate81.toDateTimeAtStartOfDay();
        int int85 = localDate81.getWeekyear();
        org.joda.time.DateTime dateTime86 = localDate81.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period79, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight67.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.LocalDate localDate90 = localDate27.minus((org.joda.time.ReadablePeriod) period79);
        int int91 = period79.size();
        org.joda.time.MutablePeriod mutablePeriod92 = period79.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay23.plus((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.YearMonthDay.Property property94 = yearMonthDay93.dayOfMonth();
        boolean boolean95 = dateMidnight20.equals((java.lang.Object) property94);
        org.joda.time.DateMidnight dateMidnight97 = dateMidnight20.plus((-41308012799965L));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateMidnight97);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'u');
        java.util.Locale locale8 = dateTimeFormatter7.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = dateTimeFormatter7.parseLocalDate("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate16.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekyear(3);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDate21.toDateTime(localTime26, dateTimeZone30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay39.minus(readablePeriod46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay47.year();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getStart();
        org.joda.time.DateTime dateTime77 = dateTime75.withDayOfWeek(4);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime81 = dateTime75.toDateTime(dateTimeZone80);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateTime59, dateTimeZone80);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = property83.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = dateTimeZone87.getName((long) (byte) 10, locale89);
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = property83.getAsText(locale89);
        java.lang.String str93 = property48.getAsShortText(locale89);
        java.lang.String str94 = dateTimeZone30.getShortName(16L, locale89);
        java.util.Locale.Builder builder95 = builder14.setLocale(locale89);
        java.util.Locale.Builder builder96 = builder95.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder98 = builder96.setVariant("AD");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: AD [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.010" + "'", str90, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.010" + "'", str94, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMillis((-1));
        int int5 = timeOfDay4.size();
        int int6 = timeOfDay4.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.plusMillis(34521);
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight45 = property43.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight46 = property43.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight47 = property43.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfWeek(4);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime57.dayOfYear();
        java.lang.String str62 = property61.toString();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        boolean boolean64 = dateTimeField63.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField63.getType();
        org.joda.time.DateMidnight.Property property66 = dateMidnight47.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay69 = timeOfDay8.withField(dateTimeFieldType65, 1932);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Property[dayOfYear]" + "'", str62, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(6974852348000L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = dateTimeZone7.getName((long) (byte) 10, locale9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone7);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getStart();
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths(4);
        org.joda.time.DateTime dateTime19 = dateTime13.minusDays(8);
        java.util.Locale.LanguageRange languageRange22 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] { languageRange22 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(11);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfMonth();
        org.joda.time.Chronology chronology38 = localDate36.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((java.lang.Object) str32, chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        long long48 = chronology38.add((org.joda.time.ReadablePeriod) period45, 87L, 1);
        java.util.Locale.LanguageRange languageRange50 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] { languageRange50 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList58);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.withDayOfYear(11);
        org.joda.time.LocalDate.Property property65 = localDate64.dayOfMonth();
        org.joda.time.Chronology chronology66 = localDate64.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((java.lang.Object) str60, chronology66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 1, (long) 7, chronology70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval71.toPeriod(periodType72);
        long long76 = chronology66.add((org.joda.time.ReadablePeriod) period73, 87L, 1);
        int[] intArray79 = chronology38.get((org.joda.time.ReadablePeriod) period73, (long) 10, (long) 13);
        org.joda.time.DurationField durationField80 = chronology38.months();
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((long) 'u', chronology38);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField83 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField84 = chronology38.seconds();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(chronology38);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.YearMonthDay yearMonthDay89 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology88);
        org.joda.time.DateMidnight dateMidnight90 = yearMonthDay89.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight90.plusWeeks(13);
        org.joda.time.DateMidnight.Property property93 = dateMidnight90.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property93.getFieldType();
        boolean boolean95 = localDate86.isSupported(dateTimeFieldType94);
        int int96 = dateTime19.get(dateTimeFieldType94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay98 = timeOfDay3.withField(dateTimeFieldType94, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 93L + "'", long48 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 93L + "'", long76 == 93L);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 12 + "'", int96 == 12);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.LocalDate localDate22 = localDate18.minusDays(1);
        org.joda.time.LocalDate.Property property23 = localDate18.monthOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime34.getZone();
        org.joda.time.DateTime dateTime40 = localDate18.toDateTime(localTime24, dateTimeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval48.toPeriod(periodType49);
        org.joda.time.DateTime dateTime51 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight11.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType53 = period50.getPeriodType();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100);
        int int56 = dateTime55.getSecondOfMinute();
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks(30);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period50, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime58.withDate(0, 611, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 611 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 30 + "'", int60 == 30);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime9.minusMonths(13920);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(34567);
        int int36 = dateTime33.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        java.util.Date date1 = new java.util.Date(3024000000L);
        date1.setMinutes(32769);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate5.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.DateTime dateTime29 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = dateTime27.isEqual(93L);
        int int32 = dateTime27.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar33 = dateTime27.toGregorianCalendar();
        java.util.Date date34 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromDateFields(date34);
        int int36 = date34.getDay();
        date34.setMonth(2022);
        gregorianCalendar33.setTime(date34);
        boolean boolean40 = date1.before(date34);
        date1.setDate(575);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Sep 20 18:09:00 UTC 1971");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 70 + "'", int28 == 70);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Sun Jul 11 09:39:23 UTC 2190");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime23.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime23.withDate(30, 34723, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34723 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withPivotYear((java.lang.Integer) 1971);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter61.withPivotYear((java.lang.Integer) 52);
        java.io.Writer writer64 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology66);
        org.joda.time.DateTime dateTime68 = yearMonthDay67.toDateTimeAtMidnight();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        int int72 = dateTimeZone70.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay67.toDateMidnight(dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay67.minus(readablePeriod74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay75.year();
        org.joda.time.DateTimeField dateTimeField77 = property76.getField();
        org.joda.time.YearMonthDay yearMonthDay78 = property76.withMaximumValue();
        int int79 = property76.get();
        org.joda.time.YearMonthDay yearMonthDay81 = property76.addToCopy(575);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter61.printTo(writer64, (org.joda.time.ReadablePartial) yearMonthDay81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay81);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsText(13, locale11);
        int int14 = dateTimeField9.getMaximumValue((long) 34567);
        boolean boolean15 = dateTimeField9.isLenient();
        long long17 = dateTimeField9.roundFloor(1644572254576L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "13" + "'", str12, "13");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644570000000L + "'", long17 == 1644570000000L);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(173, 269, 625, 0, 839, 5, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 839 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.year();
        int int8 = property7.get();
        org.joda.time.DateMidnight dateMidnight10 = property7.setCopy(126);
        boolean boolean11 = dateMidnight10.isAfterNow();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1968 + "'", int8 == 1968);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        int int12 = localDate10.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate10.withMonthOfYear(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyear();
        long long11 = dateTimeField9.roundHalfCeiling((long) 29);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-259200000L) + "'", long11 == (-259200000L));
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addNoWrapToCopy((int) '#');
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMillis(12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withChronology(chronology18);
        int int20 = dateTimeFormatter16.getDefaultYear();
        boolean boolean21 = dateTimeFormatter16.isParser();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter16.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter23.getParser();
        org.joda.time.Chronology chronology26 = dateTimeFormatter23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withDefaultYear(1971);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale30.getCountry();
        java.util.Locale locale34 = new java.util.Locale("271", "T09:35:18.216");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight70 = property68.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = property68.getAsText(locale74);
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = locale74.getDisplayName(locale78);
        java.lang.String str80 = locale34.getDisplayCountry(locale78);
        java.lang.String str81 = locale30.getDisplayName(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter23.withLocale(locale30);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeFormatter23.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = timeOfDay13.toString(dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23" + "'", str7, "23");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNull(dateTimeParser25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "IT" + "'", str31, "IT");
        org.junit.Assert.assertEquals(locale34.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fran\347ais (France)" + "'", str79, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "T09:35:18.216" + "'", str80, "T09:35:18.216");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Italian (Italy)" + "'", str81, "Italian (Italy)");
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.Duration duration44 = interval43.toDuration();
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime46 = dateTime25.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime48 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration44, 100);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateTime dateTime6 = yearMonthDay2.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withMillis((long) (short) 100);
        int int47 = dateMidnight42.getWeekOfWeekyear();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readablePeriod9, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtStartOfDay();
        int int60 = localDate56.getWeekyear();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period54, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 6);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay7.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.minuteOfHour();
        org.joda.time.DateTime dateTime70 = dateTime6.withChronology(chronology66);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = property2.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        boolean boolean10 = locale8.hasExtensions();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str13 = locale8.getDisplayScript(locale12);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale locale15 = builder14.build();
        java.lang.String str16 = locale12.getDisplayVariant(locale15);
        org.joda.time.TimeOfDay timeOfDay17 = property2.setCopy("11", locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property2.setCopy(95);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 95 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight10 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime21.dayOfYear();
        java.lang.String str26 = property25.toString();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale33 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        java.lang.String str34 = dateTimeField27.getAsText(9, locale33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMonths(4);
        org.joda.time.DateTime.Property property49 = dateTime44.monthOfYear();
        org.joda.time.DurationField durationField50 = property49.getRangeDurationField();
        org.joda.time.DateTime dateTime51 = property49.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology58 = localDate56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType52.getField(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfMonth();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        int int62 = dateTimeField60.getMaximumTextLength(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale63.getDisplayVariant();
        int int66 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.util.Calendar calendar67 = dateTime51.toCalendar(locale63);
        java.lang.String str68 = locale33.getDisplayScript(locale63);
        java.lang.String str70 = locale33.getExtension('a');
        int int71 = dateTimeField11.getMaximumTextLength(locale33);
        org.joda.time.ReadablePartial readablePartial72 = null;
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, 3, 3, 7);
        int[] intArray79 = timeOfDay78.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField11.addWrapField(readablePartial72, 173, intArray79, 5970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 173");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfYear]" + "'", str26, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 366 + "'", int28 == 366);
        org.junit.Assert.assertEquals(locale33.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Korean" + "'", str64, "Korean");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 3, 3, 7]");
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.LocalTime localTime6 = timeOfDay3.toLocalTime();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.millisOfSecond();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        int int9 = property7.get();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minus(readableDuration43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withMillis((long) 10);
        int int47 = dateMidnight46.getWeekOfWeekyear();
        int int48 = property7.compareTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight.Property property49 = dateMidnight46.yearOfEra();
        org.joda.time.DateMidnight dateMidnight51 = property49.setCopy("26");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 693 + "'", int9 == 693);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        int int13 = dateTimeField11.getMinimumValue((long) 1968);
        java.lang.String str15 = dateTimeField11.getAsShortText((long) 990);
        int int16 = dateTimeField11.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AD" + "'", str15, "AD");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("T09:38:24.511");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.plusMonths((int) '4');
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate8 = localDate3.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        int int29 = dateTimeZone26.getOffsetFromLocal((long) '#');
        long long31 = dateTimeZone26.convertUTCToLocal((long) 11);
        org.joda.time.Chronology chronology32 = chronology9.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(604800192L, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType0.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 21L + "'", long31 == 21L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder3 = builder0.setTimeZone(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.set(0, 34536, (int) ' ');
        int int9 = calendar4.getMinimalDaysInFirstWeek();
        calendar4.roll(5, false);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar4.getGreatestMinimum(523);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 523");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572363895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=23,MILLISECOND=895,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2878,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=23,MILLISECOND=895,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        int int16 = dateTime14.getMinuteOfDay();
        boolean boolean17 = dateTime14.isBeforeNow();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property6.addToCopy((int) (byte) 10);
        int[] intArray9 = timeOfDay8.getValues();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.plusHours(31);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay8.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay13 = property12.getTimeOfDay();
        org.joda.time.LocalTime localTime14 = timeOfDay13.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = timeOfDay13.getFieldType(86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[9, 39, 33, 2]");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withMillis((long) (short) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withDayOfMonth(6);
        boolean boolean46 = calendar6.before((java.lang.Object) 6);
        calendar6.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = calendar6.isSet(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572364002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=24,MILLISECOND=2,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfDay((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withChronology(chronology20);
        int int22 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter18.withDefaultYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        java.util.TimeZone timeZone33 = dateTimeZone28.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter24.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.DateTime dateTime36 = dateTime15.withZone(dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.DateTime dateTime63 = interval61.getStart();
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfWeek(4);
        org.joda.time.DateTime dateTime66 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime69 = dateTime63.toDateTime(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((java.lang.Object) dateTime47, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight70.withMillis((long) (short) 100);
        int int75 = dateMidnight70.getWeekOfWeekyear();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readablePeriod37, (org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 1, (long) 7, chronology79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval80.toPeriod(periodType81);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate86 = localDate84.plusMonths((int) '4');
        org.joda.time.DateTime dateTime87 = localDate84.toDateTimeAtStartOfDay();
        int int88 = localDate84.getWeekyear();
        org.joda.time.DateTime dateTime89 = localDate84.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period82, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight70.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 6);
        org.joda.time.DateMidnight.Property property93 = dateMidnight70.era();
        org.joda.time.DateTimeField dateTimeField94 = property93.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = dateTimeField94.getType();
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType95.getRangeDurationType();
        org.joda.time.DateTime.Property property97 = dateTime36.property(dateTimeFieldType95);
        org.joda.time.DateTime dateTime98 = property97.getDateTime();
        org.joda.time.DateTime dateTime99 = property97.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNull(durationFieldType96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addToCopy(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = yearMonthDay16.getFieldType(2067);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2067");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        long long18 = interval14.toDurationMillis();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval14.toPeriod(periodType19);
        int int21 = period20.size();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period20);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = yearMonthDay22.getValue(273);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 273");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(1969);
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight57 = property55.setCopy(456825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456825 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateTime dateTime30 = dateTime11.withZone(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime33 = property32.roundHalfCeilingCopy();
        int int34 = property32.get();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType1.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology7.hours();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(1644572192745L, chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("minutes");
        double double2 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone6);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = property13.addToCopy(517);
        boolean boolean16 = languageRange1.equals((java.lang.Object) 517);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(292278994, (int) (short) 100, 839, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.clear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths(19);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate17 = localDate10.withFields((org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.LocalDate.Property property18 = localDate10.era();
        int int19 = localDate10.size();
        org.joda.time.LocalDate localDate21 = localDate10.plusMonths(106);
        org.joda.time.LocalDate.Property property22 = localDate10.yearOfEra();
        boolean boolean23 = calendar6.before((java.lang.Object) localDate10);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(2719, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        java.util.Locale locale3 = new java.util.Locale("19", "57", "coreano");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate5.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.weekyear();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekyear(3);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime24 = localDate10.toDateTime(localTime15, dateTimeZone19);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology27);
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay28.toDateMidnight(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay28.minus(readablePeriod35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.year();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone58);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.DateTime dateTime64 = interval62.getStart();
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfWeek(4);
        org.joda.time.DateTime dateTime67 = dateTime64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime70 = dateTime64.toDateTime(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((java.lang.Object) dateTime48, dateTimeZone69);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight74 = property72.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.lang.String str79 = dateTimeZone76.getName((long) (byte) 10, locale78);
        boolean boolean80 = locale78.hasExtensions();
        java.lang.String str81 = property72.getAsText(locale78);
        java.lang.String str82 = property37.getAsShortText(locale78);
        java.lang.String str83 = dateTimeZone19.getShortName(16L, locale78);
        java.util.Locale locale84 = locale78.stripExtensions();
        java.lang.String str85 = locale3.getDisplayVariant(locale78);
        org.junit.Assert.assertEquals(locale3.toString(), "19_57_coreano");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.010" + "'", str79, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970" + "'", str82, "1970");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "coreano" + "'", str85, "coreano");
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(0, 36, (int) 'u');
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(100, 743, 924);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusWeeks(16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone52.isLocalDateTimeGap(localDateTime54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) 100, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDurationAdded(13920L, 35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) dateMidnight16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateMidnight");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean21 = date13.after(date20);
        calendar6.setTime(date20);
        calendar6.clear();
        int int24 = calendar6.getWeekYear();
        calendar6.set((-1), (-13827), 35, 28, 1, (int) 'x');
        calendar6.setFirstDayOfWeek(34534);
        calendar6.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add(16, 600);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34534,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=-13827,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=35,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=28,MINUTE=1,SECOND=120,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date20.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        java.util.Locale locale1 = new java.util.Locale("\u4e2d\u6587");
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e2d\u6587");
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int8 = yearMonthDay4.getYear();
        org.joda.time.Interval interval9 = yearMonthDay4.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 9);
        org.joda.time.DateTime dateTime16 = interval13.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withMonthOfYear(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.Chronology chronology2 = timeOfDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.weekOfWeekyear();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        long long19 = interval18.getStartMillis();
        org.joda.time.Interval interval20 = interval18.toInterval();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder25 = builder21.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        java.util.Calendar.Builder builder35 = builder21.setTimeZone(timeZone34);
        java.util.Calendar.Builder builder39 = builder21.setDate((int) (byte) 100, 47, 34534);
        java.util.Calendar.Builder builder41 = builder21.setLenient(true);
        java.util.Calendar.Builder builder43 = builder41.setLenient(true);
        boolean boolean44 = interval18.equals((java.lang.Object) builder43);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572364928L + "'", long19 == 1644572364928L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        java.util.Locale locale17 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        int int18 = dateTimeField13.getMaximumTextLength(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withLocale(locale17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withLocale(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "T09:36:20.244", "1970-01-01T00:00:00.011+00:00:00.010");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withLocale(locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeFormatter5.print(readablePartial29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals(locale27.toString(), "_T09:36:20.244_1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime13.plusDays((int) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime13.plusSeconds(36);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone29);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfWeek();
        org.joda.time.LocalDate localDate41 = localDate38.minusMonths((int) '4');
        int int42 = localDate34.compareTo((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate.Property property43 = localDate41.dayOfYear();
        org.joda.time.DateTime dateTime44 = dateTime13.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTime dateTime46 = dateTime13.withMillis((long) 34657);
        org.joda.time.DateTime.Property property47 = dateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        int int6 = yearMonthDay4.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears(927);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withDefaultYear(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = dateTimeFormatter14.parseLocalDate("2164");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        int int2 = localDate1.getDayOfWeek();
        org.joda.time.LocalDate.Property property3 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate10 = localDate5.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate10.weekyear();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str15 = dateTimeFieldType14.toString();
        int int16 = localDate13.get(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property17 = localDate1.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 360 + "'", int16 == 360);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Property[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Property[yearOfCentury]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(927);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 927");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572365278,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=25,MILLISECOND=278,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = property53.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 1, (long) 7, chronology24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) period27, (-1L), (long) 9);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) ' ', (long) ' ', chronology19);
        org.joda.time.DateTimeField dateTimeField32 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = chronology19.hourOfHalfday();
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        long long59 = interval19.getStartMillis();
        org.joda.time.DateTime dateTime60 = interval19.getEnd();
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfCentury();
        org.joda.time.DateTime.Property property62 = dateTime60.secondOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology64);
        org.joda.time.DateTime dateTime66 = yearMonthDay65.toDateTimeAtMidnight();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight71 = yearMonthDay65.toDateMidnight(dateTimeZone68);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay65.minus(readablePeriod72);
        org.joda.time.YearMonthDay.Property property74 = yearMonthDay73.year();
        org.joda.time.DateTimeField dateTimeField75 = property74.getField();
        org.joda.time.YearMonthDay yearMonthDay76 = property74.withMaximumValue();
        int int77 = property74.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay78 = property74.withMaximumValue();
        java.lang.String str79 = property74.toString();
        org.joda.time.YearMonthDay yearMonthDay80 = property74.withMinimumValue();
        org.joda.time.DateTime dateTime81 = dateTime60.withFields((org.joda.time.ReadablePartial) yearMonthDay80);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay80.plusDays(924);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay83.withDayOfMonth(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 292278993 + "'", int77 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Property[year]" + "'", str79, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter9.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        java.util.TimeZone timeZone19 = dateTimeZone14.toTimeZone();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = dateTimeField26.getAsText(14, locale31);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone19, locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter9.withLocale(locale31);
        java.lang.Appendable appendable37 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = timeOfDay52.getFieldTypes();
        org.joda.time.DateTime dateTime55 = dateTime50.withFields((org.joda.time.ReadablePartial) timeOfDay52);
        boolean boolean56 = dateTime50.isAfterNow();
        org.joda.time.DateTime dateTime58 = dateTime50.withMillisOfSecond(6);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable37, (org.joda.time.ReadableInstant) dateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fra" + "'", str33, "fra");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "14" + "'", str34, "14");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644572365359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=25,MILLISECOND=369,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withDate(49, 600, 600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.Chronology chronology12 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withDefaultYear(1971);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(292278994);
        java.lang.StringBuffer stringBuffer17 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 1969, (long) 13920);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        long long40 = dateTimeZone35.convertLocalToUTC((long) 'a', true, (long) 4);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone35);
        boolean boolean42 = interval20.isAfter((org.joda.time.ReadableInstant) dateMidnight41);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(stringBuffer17, (org.joda.time.ReadableInstant) dateMidnight41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 87L + "'", long40 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(11);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfMonth();
        org.joda.time.Chronology chronology47 = localDate45.getChronology();
        org.joda.time.LocalDate localDate49 = localDate45.minusDays(1);
        org.joda.time.LocalDate.Property property50 = localDate45.monthOfYear();
        org.joda.time.LocalTime localTime51 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfWeek(4);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTime();
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime61.getZone();
        org.joda.time.DateTime dateTime67 = localDate45.toDateTime(localTime51, dateTimeZone66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfMinute();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 1, (long) 7, chronology74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval75.toPeriod(periodType76);
        org.joda.time.DateTime dateTime78 = dateTime70.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.lang.String str85 = dateTimeZone82.getName((long) (byte) 10, locale84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone82);
        org.joda.time.Interval interval87 = interval86.toInterval();
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Interval interval89 = interval86.withPeriodBeforeEnd(readablePeriod88);
        boolean boolean90 = period77.equals((java.lang.Object) readablePeriod88);
        int int91 = period77.size();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight32.plus((org.joda.time.ReadablePeriod) period77);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = period77.getValue(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.010" + "'", str85, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(dateMidnight92);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property6.getAsText(locale8);
        org.joda.time.LocalDate localDate10 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property6.roundHalfCeilingCopy();
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate.Property property13 = localDate11.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate11.withFieldAdded(durationFieldType14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        int int34 = dateMidnight32.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime44.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone65);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight70 = property68.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = dateTimeZone72.getName((long) (byte) 10, locale74);
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = property68.getAsText(locale74);
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = locale74.getDisplayName(locale78);
        java.util.Calendar calendar80 = dateMidnight32.toCalendar(locale74);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = calendar80.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fran\347ais (France)" + "'", str79, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(calendar80);
        org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone23);
        int int25 = dateTime24.getYearOfCentury();
        org.joda.time.DateTime dateTime26 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = dateTime24.isEqual(93L);
        int int29 = dateTime24.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime24.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.DateTime dateTime40 = interval38.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(4);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime62 = dateTime56.toDateTime(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) dateTime24, dateTimeZone61);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(9L, dateTimeZone61);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusSeconds(21);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(50);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.withHourOfDay(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = timeOfDay8.getField(1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1969");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        long long27 = chronology17.add((org.joda.time.ReadablePeriod) period24, 87L, 1);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] { languageRange29 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(11);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfMonth();
        org.joda.time.Chronology chronology45 = localDate43.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object) str39, chronology45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 1, (long) 7, chronology49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = interval50.toPeriod(periodType51);
        long long55 = chronology45.add((org.joda.time.ReadablePeriod) period52, 87L, 1);
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList65);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) str67, chronology73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval78.toPeriod(periodType79);
        long long83 = chronology73.add((org.joda.time.ReadablePeriod) period80, 87L, 1);
        int[] intArray86 = chronology45.get((org.joda.time.ReadablePeriod) period80, (long) 10, (long) 13);
        long long89 = chronology17.add((org.joda.time.ReadablePeriod) period80, 604800000L, 32);
        org.joda.time.DateTimeZone dateTimeZone90 = chronology17.getZone();
        org.joda.time.DurationField durationField91 = chronology17.weeks();
        org.joda.time.DurationField durationField92 = chronology17.halfdays();
        org.joda.time.DateTimeZone dateTimeZone93 = chronology17.getZone();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 93L + "'", long27 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 93L + "'", long55 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 93L + "'", long83 == 93L);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 604800192L + "'", long89 == 604800192L);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 100, chronology19);
        org.joda.time.Interval interval23 = localDate22.toInterval();
        boolean boolean24 = interval23.isAfterNow();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        boolean boolean8 = durationFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((java.lang.Object) "T09:38:32.259", chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T09:38:32.259\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay18.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusWeeks(13);
        long long22 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight23 = property15.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withMonthOfYear(34703);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34703 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) (short) -1, (int) (byte) 10, 22);
        int int23 = calendar6.getActualMinimum(1);
        int int24 = calendar6.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add(576, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-62170844458036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=326,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=964,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 4);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(34567);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusSeconds(577);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        boolean boolean11 = timeOfDay7.isAfter((org.joda.time.ReadablePartial) timeOfDay9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay7.minus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withPeriodAdded(readablePeriod14, 10);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay13.minuteOfHour();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property17.getFieldType();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTime dateTime51 = dateTime30.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology52 = dateTime30.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfEra();
        org.joda.time.Chronology chronology55 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        boolean boolean57 = durationFieldType20.isSupported(chronology55);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay5.withFieldAdded(durationFieldType20, 34615);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField61 = timeOfDay59.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(timeOfDay59);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType25.getField(chronology31);
        long long34 = dateTimeField32.roundCeiling((long) 3);
        int int36 = dateTimeField32.getMinimumValue(11L);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        boolean boolean44 = locale42.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str47 = locale42.getDisplayScript(locale46);
        java.util.Locale.setDefault(category38, locale46);
        java.lang.String str49 = dateTimeField32.getAsText((long) 32, locale46);
        java.lang.String str50 = property24.getAsText(locale46);
        int int51 = property24.get();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 43200000L + "'", long34 == 43200000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AM" + "'", str49, "AM");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "September" + "'", str50, "September");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(28L);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(106);
        int int7 = localDate6.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate6.withDayOfYear((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int13 = localDate6.get(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate20 = localDate15.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate20.weekyear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = property21.getLocalDate();
        int int24 = localDate23.getCenturyOfEra();
        boolean boolean25 = localDate6.isAfter((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeFormatter28.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withOffsetParsed();
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = localDate23.toString(dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval23.withPeriodBeforeEnd(readablePeriod25);
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        boolean boolean38 = interval26.overlaps((org.joda.time.ReadableInterval) interval35);
        boolean boolean39 = interval15.equals((java.lang.Object) interval26);
        java.util.Locale.LanguageRange languageRange41 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] { languageRange41 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(11);
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfMonth();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((java.lang.Object) str51, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfWeek();
        org.joda.time.Interval interval60 = interval26.withChronology(chronology57);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = dateTime61.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        int int6 = localDate3.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        int int19 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        long long29 = interval28.getStartMillis();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval28.withDurationBeforeEnd(readableDuration30);
        long long32 = interval28.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        int int35 = period34.size();
        org.joda.time.MutablePeriod mutablePeriod36 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime46.minusMonths(4);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(70);
        int int53 = dateTime50.getSecondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime50.withYear((int) 'u');
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.LocalDate localDate58 = yearMonthDay17.toLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(38, 68040011);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = property11.getAsText(locale16);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter23.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withChronology(chronology25);
        int int27 = dateTimeFormatter23.getDefaultYear();
        boolean boolean28 = dateTimeFormatter23.isParser();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter23.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = dateTimeFormatter30.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter30.getParser();
        org.joda.time.Chronology chronology33 = dateTimeFormatter30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter30.withDefaultYear(1971);
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale37.getCountry();
        java.util.Locale locale41 = new java.util.Locale("271", "T09:35:18.216");
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getStart();
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfWeek(4);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime57 = dateTime51.toDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = dateTimeZone61.getName((long) (byte) 10, locale63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone61);
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.DateTime dateTime67 = interval65.getStart();
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfWeek(4);
        org.joda.time.DateTime dateTime70 = dateTime67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime73 = dateTime67.toDateTime(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((java.lang.Object) dateTime51, dateTimeZone72);
        org.joda.time.DateMidnight.Property property75 = dateMidnight74.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight77 = property75.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = dateTimeZone79.getName((long) (byte) 10, locale81);
        boolean boolean83 = locale81.hasExtensions();
        java.lang.String str84 = property75.getAsText(locale81);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = locale81.getDisplayName(locale85);
        java.lang.String str87 = locale41.getDisplayCountry(locale85);
        java.lang.String str88 = locale37.getDisplayName(locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter30.withLocale(locale37);
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay91 = property11.setCopy("0007-01-01", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0007-01-01\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:26.173" + "'", str8, "T09:39:26.173");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "26" + "'", str19, "26");
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "IT" + "'", str38, "IT");
        org.junit.Assert.assertEquals(locale41.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.010" + "'", str82, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1" + "'", str84, "1");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "fran\347ais (France)" + "'", str86, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "T09:35:18.216" + "'", str87, "T09:35:18.216");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Italian (Italy)" + "'", str88, "Italian (Italy)");
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1644572366163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=26,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval14.getStartMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 1, (long) 7, chronology20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval21.toPeriod(periodType22);
        org.joda.time.Interval interval24 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval27 = interval24.withEnd((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval28 = interval3.overlap((org.joda.time.ReadableInterval) interval27);
        boolean boolean29 = interval28.isBeforeNow();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        boolean boolean23 = durationFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration55, 106);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration55, 0);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight14.withMillis((long) 2022);
        org.joda.time.Chronology chronology64 = dateMidnight14.getChronology();
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate67 = localDate65.withYear((int) (byte) 100);
        int[] intArray69 = chronology64.get((org.joda.time.ReadablePartial) localDate65, 16L);
        org.joda.time.DateTimeField dateTimeField70 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology64.weekyear();
        long long74 = dateTimeField72.roundCeiling(252000017L);
        long long76 = dateTimeField72.roundFloor((long) 24);
        long long78 = dateTimeField72.roundHalfFloor(1644572152309L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 31795199990L + "'", long74 == 31795199990L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-259200010L) + "'", long76 == (-259200010L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1641167999990L + "'", long78 == 1641167999990L);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        java.lang.String str11 = dateTimeField9.getAsText((long) 11);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale13.getDisplayVariant(locale17);
        java.lang.String str21 = dateTimeField9.getAsText((int) (byte) 10, locale17);
        long long24 = dateTimeField9.set((long) (byte) 1, 5);
        int int25 = dateTimeField9.getMaximumValue();
        java.util.Locale locale30 = new java.util.Locale("", "T09:36:20.244", "1970-01-01T00:00:00.011+00:00:00.010");
        java.lang.String str31 = dateTimeField9.getAsText(31, locale30);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "France" + "'", str19, "France");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 18000001L + "'", long24 == 18000001L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertEquals(locale30.toString(), "_T09:36:20.244_1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31" + "'", str31, "31");
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone27);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = dateTimeZone27.getName((long) 11, locale30);
        java.lang.String str32 = dateTimeZone20.getName(1644572138904L, locale30);
        java.util.Calendar calendar33 = dateTime9.toCalendar(locale30);
        calendar33.setMinimalDaysInFirstWeek(59);
        boolean boolean36 = calendar33.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=59,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.LocalDate localDate9 = localDate5.minusDays(1);
        org.joda.time.LocalDate localDate11 = localDate9.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate11.getFieldType(0);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval19 = new org.joda.time.Interval(1644572339494L, 1644570000000L, chronology17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(15, 1020000, 34, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1020000 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withWeekyear(43);
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 100, chronology19);
        org.joda.time.LocalDate localDate24 = localDate22.plusYears(11);
        org.joda.time.LocalDate.Property property25 = localDate22.weekyear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtStartOfDay();
        int int31 = localDate27.getWeekyear();
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtStartOfDay();
        int int33 = localDate27.getDayOfMonth();
        org.joda.time.LocalDate localDate35 = localDate27.plusWeeks(100);
        int int36 = localDate35.getMonthOfYear();
        org.joda.time.LocalDate localDate38 = localDate35.minusWeeks(1969);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        java.lang.String str52 = locale50.getISO3Language();
        java.lang.String str53 = locale50.getDisplayCountry();
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = yearMonthDay41.toString("1", locale54);
        boolean boolean56 = localDate35.equals((java.lang.Object) yearMonthDay41);
        boolean boolean57 = localDate22.isAfter((org.joda.time.ReadablePartial) localDate35);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fra" + "'", str52, "fra");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "France" + "'", str53, "France");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        int int38 = dateTime23.getCenturyOfEra();
        org.joda.time.DateTime dateTime40 = dateTime23.withCenturyOfEra(25);
        org.joda.time.DateTime.Property property41 = dateTime23.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19 + "'", int38 == 19);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minus(readableDuration38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.withMillis((long) 10);
        int int42 = dateMidnight37.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight37.minusWeeks((int) 'a');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusWeeks(8);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.joda.time.Chronology chronology53 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology53.minutes();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 13, chronology53);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minus(1644572124561L);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.plusDays(34536);
        org.joda.time.DateMidnight.Property property61 = dateMidnight56.weekyear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology63);
        org.joda.time.DateTime dateTime65 = yearMonthDay64.toDateTimeAtMidnight();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay64.toDateMidnight(dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay64.minus(readablePeriod71);
        org.joda.time.YearMonthDay.Property property73 = yearMonthDay72.year();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        org.joda.time.YearMonthDay yearMonthDay75 = property73.withMaximumValue();
        int int76 = property73.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property73.getFieldType();
        org.joda.time.DateMidnight.Property property78 = dateMidnight56.property(dateTimeFieldType77);
        org.joda.time.DateMidnight.Property property79 = dateMidnight46.property(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTimeFormatter3.print((org.joda.time.ReadableInstant) dateMidnight46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval8.toPeriod(periodType13);
        int int15 = period14.size();
        int int16 = period14.size();
        org.joda.time.Period period17 = period14.toPeriod();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate22 = localDate18.withYear(34521);
        org.joda.time.DateMidnight dateMidnight23 = localDate22.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withWeekOfWeekyear(35);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        long long35 = dateTimeZone31.previousTransition(87L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-5L), dateTimeZone31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.LocalDate localDate44 = localDate40.minusDays(1);
        org.joda.time.LocalDate.Property property45 = localDate40.monthOfYear();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.LocalDate localDate47 = property45.withMaximumValue();
        org.joda.time.LocalDate localDate49 = property45.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.DateTime dateTime59 = localDate49.toDateTime(localTime50, dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean61 = localDate49.isSupported(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getDurationType();
        org.joda.time.DateTime.Property property63 = dateTime36.property(dateTimeFieldType60);
        org.joda.time.DateTime dateTime65 = dateTime36.withYearOfCentury(0);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property67 = dateTime66.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 87L + "'", long35 == 87L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property34.roundHalfFloorCopy();
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) dateMidnight35);
        long long38 = dateTimeZone0.nextTransition((long) 34530);
        long long40 = dateTimeZone0.previousTransition((long) 20);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay42 = dateTime41.toTimeOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.minusMinutes(54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((java.lang.Object) 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 34530L + "'", long38 == 34530L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        int int11 = property8.getLeapAmount();
        org.joda.time.LocalDate localDate12 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property8.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property8.setCopy("java.util.GregorianCalendar[time=1644572152906,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=52,MILLISECOND=906,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=1644572152906,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=52,MILLISECOND=906,ZONE_OFFSET=0,DST_OFFSET=0]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan" + "'", str9, "Jan");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.Period period10 = interval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 1, (long) 7, chronology13);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval16 = interval14.toInterval();
        boolean boolean17 = interval7.isBefore((org.joda.time.ReadableInterval) interval14);
        java.lang.String str18 = interval14.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.017+00:00:00.010" + "'", str18, "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.017+00:00:00.010");
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        int int11 = property2.compareTo((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks((int) '#');
        org.joda.time.LocalDate localDate15 = localDate10.plusWeeks(4);
        int int16 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtStartOfDay();
        int int22 = localDate18.getWeekyear();
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtStartOfDay();
        int int24 = localDate18.getDayOfMonth();
        org.joda.time.LocalDate localDate26 = localDate18.plusWeeks(100);
        int int27 = localDate26.getMonthOfYear();
        org.joda.time.LocalDate localDate29 = localDate26.minusWeeks(1969);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str44 = locale41.getDisplayCountry();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = yearMonthDay32.toString("1", locale45);
        boolean boolean47 = localDate26.equals((java.lang.Object) yearMonthDay32);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.DateTime dateTime59 = dateTime52.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology61);
        org.joda.time.DateMidnight dateMidnight63 = yearMonthDay62.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay64 = dateMidnight63.toYearMonthDay();
        int int65 = yearMonthDay64.getYear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        long long75 = interval74.getStartMillis();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        long long78 = interval74.toDurationMillis();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        int int81 = period80.size();
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay64.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) period80);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay32.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Period period85 = period80.toPeriod();
        org.joda.time.LocalDate localDate87 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) period85, (int) (byte) -1);
        org.joda.time.LocalDate.Property property88 = localDate87.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate90 = property88.setCopy("FR");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"FR\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fra" + "'", str43, "fra");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "France" + "'", str44, "France");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        java.lang.Integer int6 = dateTimeFormatter3.getPivotYear();
        boolean boolean7 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime22.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime28.withDurationAdded(1644572130023L, 4);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = dateTime28.isBefore(readableInstant32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime28.toMutableDateTime();
        java.util.Date date35 = mutableDateTime34.toDate();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "", 19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 04 01:12:59 UTC 14");
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.lang.String str16 = localDate13.toString("4");
        int int17 = localDate13.size();
        org.joda.time.LocalDate.Property property18 = localDate13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = property18.setCopy("793");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"793\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "4" + "'", str16, "4");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getMinutes();
        java.time.Instant instant16 = date14.toInstant();
        int int17 = date14.getMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        java.util.Locale.LanguageRange languageRange28 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] { languageRange28 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(11);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((java.lang.Object) str38, chronology44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 1, (long) 7, chronology48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval49.toPeriod(periodType50);
        long long54 = chronology44.add((org.joda.time.ReadablePeriod) period51, 87L, 1);
        java.util.Locale.LanguageRange languageRange56 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] { languageRange56 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList64);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.withDayOfYear(11);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfMonth();
        org.joda.time.Chronology chronology72 = localDate70.getChronology();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((java.lang.Object) str66, chronology72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 1, (long) 7, chronology76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval77.toPeriod(periodType78);
        long long82 = chronology72.add((org.joda.time.ReadablePeriod) period79, 87L, 1);
        int[] intArray85 = chronology44.get((org.joda.time.ReadablePeriod) period79, (long) 10, (long) 13);
        org.joda.time.DurationField durationField86 = chronology44.months();
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((long) 'u', chronology44);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(chronology44);
        org.joda.time.Chronology chronology89 = dateTime88.getChronology();
        boolean boolean90 = dateTimeZone21.equals((java.lang.Object) chronology89);
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay((java.lang.Object) date14, chronology89);
        java.lang.String str92 = chronology89.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 93L + "'", long54 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 93L + "'", long82 == 93L);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ISOChronology[UTC]" + "'", str92, "ISOChronology[UTC]");
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long10 = dateTimeField7.add((long) (short) 0, 14);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField7.getType();
        java.lang.String str12 = dateTimeField7.toString();
        long long14 = dateTimeField7.roundHalfCeiling((long) 579);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800000L + "'", long10 == 604800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str12, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("T09:36:57.761");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t09:36:57.761");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(2789);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withDayOfMonth(611);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 611 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withChronology(chronology16);
        int int18 = dateTimeFormatter14.getDefaultYear();
        boolean boolean19 = dateTimeFormatter14.isParser();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter21.getParser();
        org.joda.time.Chronology chronology24 = dateTimeFormatter21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter21.withDefaultYear(1971);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.getCountry();
        java.util.Locale locale32 = new java.util.Locale("271", "T09:35:18.216");
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getStart();
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfWeek(4);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime58.toDateTime(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, dateTimeZone63);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight68 = property66.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = dateTimeZone70.getName((long) (byte) 10, locale72);
        boolean boolean74 = locale72.hasExtensions();
        java.lang.String str75 = property66.getAsText(locale72);
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str77 = locale72.getDisplayName(locale76);
        java.lang.String str78 = locale32.getDisplayCountry(locale76);
        java.lang.String str79 = locale28.getDisplayName(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter21.withLocale(locale28);
        java.util.Set<java.lang.Character> charSet81 = locale28.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            long long82 = dateTimeField9.set(1644572360684L, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????? (????)\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "IT" + "'", str29, "IT");
        org.junit.Assert.assertEquals(locale32.toString(), "271_T09:35:18.216");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fran\347ais (France)" + "'", str77, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "T09:35:18.216" + "'", str78, "T09:35:18.216");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Italian (Italy)" + "'", str79, "Italian (Italy)");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(charSet81);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addWrapFieldToCopy(28);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(1);
        org.joda.time.DateTime.Property property20 = dateTime19.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plusWeeks(13);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate9 = dateMidnight3.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property47 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight49 = property47.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField50 = property47.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight52 = property47.addToCopy(32);
        org.joda.time.DateMidnight dateMidnight53 = property47.roundCeilingCopy();
        int int54 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeZone58.getName((long) (byte) 10, locale60);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone58);
        org.joda.time.Interval interval63 = interval62.toInterval();
        long long64 = interval62.toDurationMillis();
        org.joda.time.Interval interval66 = interval62.withEndMillis((long) (byte) 1);
        org.joda.time.Duration duration67 = interval62.toDuration();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration67, readableInstant68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration67);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.010" + "'", str61, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        int int3 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar0.getGreatestMinimum((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572367438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=27,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.DateTime dateTime50 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime50.plusDays(10);
        int int54 = dateTime53.getYearOfEra();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight36, readableInstant37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 1, (long) 7, chronology41);
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        boolean boolean44 = interval38.overlaps((org.joda.time.ReadableInterval) interval42);
        long long45 = interval42.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime55.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.withDurationAdded(readableDuration60, (int) (short) -1);
        int int63 = dateTime59.getYearOfEra();
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTime.Property property65 = dateTime59.centuryOfEra();
        boolean boolean66 = interval42.isBefore((org.joda.time.ReadableInstant) dateTime59);
        int int67 = dateTime59.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 7L + "'", long45 == 7L);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1969 + "'", int63 == 1969);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1969 + "'", int67 == 1969);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = interval8.toPeriod(periodType13);
        int int15 = period14.size();
        org.joda.time.MutablePeriod mutablePeriod16 = period14.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        boolean boolean29 = period14.equals((java.lang.Object) 4);
        java.lang.Object obj30 = null;
        boolean boolean31 = period14.equals(obj30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType33 = period14.getFieldType((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar6.get(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572367577,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=27,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight9 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusWeeks((int) (short) 10);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withYear(7);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withWeekyear(13);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight13.plusDays(5);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay2.minusDays(13920);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusYears((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight49.withMillis((long) (short) 100);
        int int54 = dateMidnight49.getWeekOfWeekyear();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readablePeriod16, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Chronology chronology56 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType15.getField(chronology56);
        java.lang.String str58 = dateTimeFieldType15.toString();
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay12.property(dateTimeFieldType15);
        java.lang.Class<?> wildcardClass60 = property59.getClass();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "year" + "'", str58, "year");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        java.util.Date date30 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromDateFields(date30);
        int int32 = date30.getDay();
        date30.setMonth(2022);
        gregorianCalendar29.setTime(date30);
        int int36 = gregorianCalendar29.getWeekYear();
        java.lang.Object obj37 = gregorianCalendar29.clone();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sun Jul 11 09:39:27 UTC 2190");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2190 + "'", int36 == 2190);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "java.util.GregorianCalendar[time=6959122767663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2190,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=192,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=27,MILLISECOND=673,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "java.util.GregorianCalendar[time=6959122767663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2190,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=192,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=27,MILLISECOND=673,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "java.util.GregorianCalendar[time=6959122767663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2190,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=192,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=27,MILLISECOND=673,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 1, (long) 7, chronology14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = interval15.toPeriod(periodType16);
        org.joda.time.Interval interval18 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Duration duration19 = interval18.toDuration();
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 1932);
        boolean boolean22 = interval18.containsNow();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = property17.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.lang.String str26 = locale22.getDisplayName();
        java.lang.String str27 = locale22.getDisplayCountry();
        int int28 = property17.getMaximumTextLength(locale22);
        org.joda.time.DateMidnight dateMidnight29 = property17.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = property17.setCopy("12");
        org.joda.time.DateTime dateTime32 = dateMidnight31.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud504\ub791\uc2a4" + "'", str25, "\ud504\ub791\uc2a4");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str26, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud504\ub791\uc2a4" + "'", str27, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = yearMonthDay2.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property5 = yearMonthDay2.property(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withLocale(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder3.removeUnicodeLocaleAttribute("it_IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: it_IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        long long31 = dateTime30.getMillis();
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.withYear(397);
        org.joda.time.DateTime dateTime36 = dateTime30.plusSeconds(3600011);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-5L) + "'", long31 == (-5L));
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        long long12 = interval11.getStartMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval11.withDurationBeforeEnd(readableDuration13);
        long long15 = interval11.toDurationMillis();
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((java.lang.Object) str27, chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        long long43 = chronology33.add((org.joda.time.ReadablePeriod) period40, 87L, 1);
        org.joda.time.Interval interval44 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        java.lang.String str45 = interval11.toString();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate50 = localDate48.withDayOfYear(11);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfMonth();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        boolean boolean53 = durationFieldType46.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.hourOfHalfday();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField58 = chronology52.days();
        boolean boolean59 = interval11.equals((java.lang.Object) chronology52);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = dateTimeZone63.getName((long) (byte) 10, locale65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone63);
        org.joda.time.Interval interval68 = interval67.toInterval();
        long long69 = interval68.getStartMillis();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Interval interval71 = interval68.withDurationBeforeEnd(readableDuration70);
        long long72 = interval68.toDurationMillis();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        long long77 = chronology52.add((org.joda.time.ReadablePeriod) period74, (long) 43, 31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval78 = new org.joda.time.Interval((java.lang.Object) date2, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 93L + "'", long43 == 93L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010" + "'", str45, "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 43L + "'", long77 == 43L);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        long long28 = chronology18.add((org.joda.time.ReadablePeriod) period25, 87L, 1);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] { languageRange30 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) str40, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        long long56 = chronology46.add((org.joda.time.ReadablePeriod) period53, 87L, 1);
        int[] intArray59 = chronology18.get((org.joda.time.ReadablePeriod) period53, (long) 10, (long) 13);
        org.joda.time.DurationField durationField60 = chronology18.months();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 'u', chronology18);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField63 = chronology18.weekyear();
        boolean boolean64 = dateTimeField63.isSupported();
        int int67 = dateTimeField63.getDifference((-1849569336000L), 40L);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 93L + "'", long28 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 93L + "'", long56 == 93L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-58) + "'", int67 == (-58));
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withYearOfEra(34546);
        int int39 = dateMidnight36.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight36.withDurationAdded(768618430905600000L, 578);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 768618430905600000 * 578");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMillis((-1));
        int[] intArray5 = timeOfDay4.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[9, 39, 28, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime15.yearOfEra();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField28.getType();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        int int34 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = builder36.build();
        java.lang.String str38 = dateTimeField28.getAsText((long) 22, locale37);
        java.lang.String str39 = locale37.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = locale37.getDisplayName(locale43);
        int int47 = property19.getMaximumShortTextLength(locale37);
        org.joda.time.DateTime dateTime48 = property19.roundHalfEvenCopy();
        org.joda.time.DurationField durationField49 = property19.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.DateTime dateTime75 = interval73.getStart();
        org.joda.time.DateTime dateTime77 = dateTime75.withDayOfWeek(4);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime81 = dateTime75.toDateTime(dateTimeZone80);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateTime59, dateTimeZone80);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight84 = property83.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight85 = property83.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight86 = property83.roundHalfEvenCopy();
        int int87 = property83.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField88 = property83.getField();
        java.util.Locale locale92 = new java.util.Locale("chinois", "");
        java.lang.String str93 = locale92.getScript();
        java.lang.String str94 = dateTimeField88.getAsText(273, locale92);
        java.lang.String str95 = property19.getAsShortText(locale92);
        org.joda.time.DateTime dateTime96 = property19.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2922789 + "'", int34 == 2922789);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19" + "'", str38, "19");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fra" + "'", str45, "fra");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals(locale92.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "273" + "'", str94, "273");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1805" + "'", str95, "1805");
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        int int15 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime26.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.weekyear();
        org.joda.time.DateMidnight dateMidnight34 = property33.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        java.lang.String str40 = locale38.getISO3Language();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.lang.String str42 = locale38.getDisplayName();
        java.lang.String str43 = locale38.getDisplayCountry();
        int int44 = property33.getMaximumTextLength(locale38);
        java.lang.String str45 = property11.getAsShortText(locale38);
        java.lang.String str46 = locale38.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 39 + "'", int15 == 39);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud504\ub791\uc2a4" + "'", str41, "\ud504\ub791\uc2a4");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str42, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud504\ub791\uc2a4" + "'", str43, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "39" + "'", str45, "39");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str46, "\ud504\ub791\uc2a4\uc5b4");
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder11 = builder8.set(16, (int) (byte) 1);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale15 = new java.util.Locale("T09:35:39.090");
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.util.Calendar.Builder builder17 = builder11.setLocale(locale15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        int int23 = localDate19.getWeekyear();
        org.joda.time.DateTime dateTime24 = localDate19.toDateTimeAtStartOfDay();
        int int25 = localDate19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTimeZone46.getName((long) (byte) 10, locale48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone46);
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfWeek(4);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.withMillis((long) (short) 100);
        int int64 = dateMidnight59.getWeekOfWeekyear();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readablePeriod26, (org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 1, (long) 7, chronology68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval69.toPeriod(periodType70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate75 = localDate73.plusMonths((int) '4');
        org.joda.time.DateTime dateTime76 = localDate73.toDateTimeAtStartOfDay();
        int int77 = localDate73.getWeekyear();
        org.joda.time.DateTime dateTime78 = localDate73.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period71, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight59.withPeriodAdded((org.joda.time.ReadablePeriod) period71, 6);
        org.joda.time.LocalDate localDate82 = localDate19.minus((org.joda.time.ReadablePeriod) period71);
        int int83 = localDate19.getCenturyOfEra();
        int[] intArray84 = localDate19.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder85 = builder17.setFields(intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "t09:35:39.090");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1970 + "'", int77 == 1970);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 19 + "'", int83 == 19);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1970, 1, 1]");
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 366);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addWrapFieldToCopy(16);
        org.joda.time.DateTimeField dateTimeField16 = property11.getField();
        org.joda.time.TimeOfDay timeOfDay17 = property11.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property11.setCopy("Feb 27, 1970 6:09:00 PM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Feb 27, 1970 6:09:00 PM\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:28.262" + "'", str8, "T09:39:28.262");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((java.lang.Object) str15, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 1, (long) 7, chronology25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        long long31 = chronology21.add((org.joda.time.ReadablePeriod) period28, 87L, 1);
        org.joda.time.DateTimeField dateTimeField32 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(32770, 52, 1969, 100, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 93L + "'", long31 == 93L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay0.plusDays(31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.withMillis((long) (short) 100);
        int int55 = dateMidnight50.getWeekOfWeekyear();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readablePeriod17, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = localDate64.toDateTimeAtStartOfDay();
        int int68 = localDate64.getWeekyear();
        org.joda.time.DateTime dateTime69 = localDate64.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period62, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight50.withPeriodAdded((org.joda.time.ReadablePeriod) period62, 6);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.millisOfDay();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate79 = localDate77.withDayOfYear(11);
        org.joda.time.LocalDate.Property property80 = localDate79.dayOfMonth();
        org.joda.time.Chronology chronology81 = localDate79.getChronology();
        org.joda.time.LocalDate localDate83 = localDate79.minusDays(1);
        org.joda.time.LocalDate.Property property84 = localDate79.monthOfYear();
        org.joda.time.LocalDate localDate85 = property84.roundHalfFloorCopy();
        int int86 = dateTimeField75.getMinimumValue((org.joda.time.ReadablePartial) localDate85);
        int int87 = localDate85.getYear();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.TimeOfDay timeOfDay90 = new org.joda.time.TimeOfDay(chronology89);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.TimeOfDay timeOfDay92 = new org.joda.time.TimeOfDay(chronology91);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray93 = timeOfDay92.getFieldTypes();
        boolean boolean94 = timeOfDay90.isAfter((org.joda.time.ReadablePartial) timeOfDay92);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.TimeOfDay timeOfDay96 = timeOfDay92.minus(readablePeriod95);
        int[] intArray97 = timeOfDay96.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField14.addWrapField((org.joda.time.ReadablePartial) localDate85, (-1), intArray97, 523);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1970 + "'", int87 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(timeOfDay96);
        org.junit.Assert.assertNotNull(intArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[9, 39, 28, 429]");
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 100, chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDate27.getChronology();
        org.joda.time.LocalDate localDate31 = localDate27.minusDays(1);
        org.joda.time.LocalDate localDate33 = localDate31.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property35 = localDate33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDate33.getFieldType(0);
        int int38 = localDate33.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale42.getDisplayName();
        java.lang.String str47 = locale42.getDisplayCountry();
        java.util.Set<java.lang.String> strSet48 = locale42.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale42);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        java.util.Set<java.lang.Character> charSet55 = locale53.getExtensionKeys();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale53);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.fromCalendarFields(calendar56);
        java.util.TimeZone timeZone58 = calendar56.getTimeZone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology60);
        org.joda.time.DateTime dateTime62 = yearMonthDay61.toDateTimeAtMidnight();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight67 = yearMonthDay61.toDateMidnight(dateTimeZone64);
        java.lang.String str69 = dateTimeZone64.getName((long) 11);
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = dateTimeZone64.getName((long) '4', locale71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone58, locale71);
        java.lang.String str74 = locale42.getDisplayCountry(locale71);
        java.lang.String str75 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDate33, locale71);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = dateTimeField23.set(388800264L, "CN");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"CN\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud504\ub791\uc2a4" + "'", str45, "\ud504\ub791\uc2a4");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str46, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud504\ub791\uc2a4" + "'", str47, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572368473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=28,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(dateMidnight67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572368473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=28,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Francia" + "'", str74, "Francia");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1971" + "'", str75, "1971");
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addWrapFieldToCopy(28);
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.plusYears(360);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.DateTime dateTime7 = property2.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = property2.roundFloorCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        boolean boolean14 = timeOfDay10.isAfter((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay10.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.withPeriodAdded(readablePeriod17, 10);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withSecondOfMinute(28);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        long long31 = interval30.getStartMillis();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval30.withDurationBeforeEnd(readableDuration32);
        long long34 = interval30.toDurationMillis();
        boolean boolean35 = interval30.containsNow();
        org.joda.time.Period period36 = interval30.toPeriod();
        org.joda.time.Period period37 = period36.toPeriod();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay19.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 39);
        org.joda.time.DateTime dateTime41 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 0);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfWeek(4);
        org.joda.time.DateTime dateTime56 = dateTime53.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = timeOfDay58.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = timeOfDay58.getFieldTypes();
        org.joda.time.DateTime dateTime61 = dateTime56.withFields((org.joda.time.ReadablePartial) timeOfDay58);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone67);
        org.joda.time.Interval interval72 = interval71.toInterval();
        org.joda.time.DateTime dateTime73 = interval71.getStart();
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfWeek(4);
        org.joda.time.DateTime dateTime77 = dateTime73.minusMonths(4);
        org.joda.time.DateTime.Property property78 = dateTime73.monthOfYear();
        org.joda.time.Chronology chronology79 = dateTime73.getChronology();
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime63.toMutableDateTime(chronology79);
        org.joda.time.DurationField durationField81 = chronology79.halfdays();
        org.joda.time.DurationField durationField82 = chronology79.centuries();
        boolean boolean83 = durationFieldType42.isSupported(chronology79);
        org.joda.time.DateTimeField dateTimeField84 = chronology79.clockhourOfHalfday();
        int int85 = dateTime8.get(dateTimeField84);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weeks" + "'", str43, "weeks");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'u');
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        boolean boolean16 = durationFieldType9.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfHour();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        java.util.Locale locale23 = dateTimeFormatter22.getLocale();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfWeek();
        org.joda.time.LocalDate localDate30 = localDate27.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.LocalDate localDate32 = localDate27.withFields(readablePartial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology34);
        org.joda.time.DateTime dateTime36 = yearMonthDay35.toDateTimeAtMidnight();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight41 = yearMonthDay35.toDateMidnight(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay35.minus(readablePeriod42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay43.year();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.joda.time.YearMonthDay yearMonthDay46 = property44.withMaximumValue();
        int int47 = property44.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property44.getFieldType();
        org.joda.time.LocalDate localDate50 = localDate32.withField(dateTimeFieldType48, 34546);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(388800264L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(20, 600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate16.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekyear(3);
        org.joda.time.LocalDate localDate26 = localDate21.withDayOfYear((int) '#');
        org.joda.time.LocalDate.Property property27 = localDate21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime37.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.minusMonths(31);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusMonths(2);
        boolean boolean49 = localDate21.isAfter((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval(31536034534L, 1644572225039L);
        org.joda.time.Period period53 = interval52.toPeriod();
        org.joda.time.LocalDate localDate54 = localDate21.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime12.minus((org.joda.time.ReadablePeriod) period53);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight42 = property37.addToCopy((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight44 = property37.addWrapFieldToCopy(22);
        org.joda.time.DateMidnight dateMidnight46 = property37.setCopy((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight47 = property37.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight49 = property37.addToCopy(1437004847520001023L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1437004847520001023 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(839L);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        java.util.TimeZone timeZone8 = calendar6.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = calendar6.isSet((-13827));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13827");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572368809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=28,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusMonths((int) '4');
        int int64 = yearMonthDay56.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay56.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = dateTimeZone67.getName((long) (byte) 10, locale69);
        org.joda.time.Interval interval71 = yearMonthDay56.toInterval(dateTimeZone67);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 1, (long) 7, chronology74);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = dateTimeZone80.getName((long) (byte) 10, locale82);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone80);
        org.joda.time.Interval interval85 = interval84.toInterval();
        long long86 = interval85.getStartMillis();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Interval interval88 = interval85.withDurationBeforeEnd(readableDuration87);
        long long89 = interval85.toDurationMillis();
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = interval85.toPeriod(periodType90);
        int int92 = period91.size();
        org.joda.time.MutablePeriod mutablePeriod93 = period91.toMutablePeriod();
        org.joda.time.Interval interval94 = interval75.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period91);
        boolean boolean95 = interval75.containsNow();
        org.joda.time.Duration duration96 = interval75.toDuration();
        org.joda.time.Interval interval97 = interval71.withDurationAfterStart((org.joda.time.ReadableDuration) duration96);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight15 = dateTime12.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        boolean boolean24 = durationFieldType17.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 7, chronology54);
        org.joda.time.Duration duration56 = interval55.toDuration();
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime58 = dateTime37.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration56, 106);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight15.withDurationAdded((org.joda.time.ReadableDuration) duration56, 0);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight15.withMillis((long) 2022);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight15.minus(1644572160225L);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight15.withDurationAdded((long) 990, 1020000);
        org.joda.time.Interval interval70 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay2.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        int int7 = dateMidnight5.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond(10);
        java.util.Date date11 = dateTime8.toDate();
        date11.setMonth(625);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Wed Mar 03 23:59:59 UTC 2021");
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        boolean boolean37 = dateMidnight32.isBeforeNow();
        org.joda.time.DateMidnight.Property property38 = dateMidnight32.centuryOfEra();
        org.joda.time.DateMidnight.Property property39 = dateMidnight32.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = property39.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = property39.getDateMidnight();
        int int42 = property39.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromDateFields(date6);
        int int17 = timeOfDay16.getMinuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean22 = timeOfDay19.isSupported(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = timeOfDay16.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationFieldType23);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("T09:39:10.653");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T09:39:10.653\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime9.withMonthOfYear(7);
        java.util.Date date15 = dateTime9.toDate();
        org.joda.time.DateTime dateTime17 = dateTime9.minusMinutes(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.Duration duration4 = interval3.toDuration();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(chronology7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay8.getFieldTypes();
        boolean boolean10 = timeOfDay6.isAfter((org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean12 = timeOfDay6.isSupported(dateTimeFieldType11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay6.minusMillis(2);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay6.minusMinutes(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 1, (long) 7, chronology19);
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        boolean boolean22 = timeOfDay6.equals((java.lang.Object) dateTime21);
        boolean boolean23 = interval3.contains((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight57.withWeekOfWeekyear(3);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight61, readableInstant62);
        boolean boolean64 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight61);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtStartOfDay();
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate1.plusWeeks(100);
        int int10 = localDate9.getMonthOfYear();
        org.joda.time.LocalDate localDate12 = localDate9.minusWeeks(1969);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Locale locale28 = locale24.stripExtensions();
        java.lang.String str29 = yearMonthDay15.toString("1", locale28);
        boolean boolean30 = localDate9.equals((java.lang.Object) yearMonthDay15);
        org.joda.time.Interval interval31 = localDate9.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "France" + "'", str27, "France");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset((long) (byte) 10);
        boolean boolean5 = dateTimeZone2.isFixed();
        boolean boolean6 = dateTimeZone2.isFixed();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(1644572140860L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = property33.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight35 = property33.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight36 = property33.roundHalfEvenCopy();
        int int37 = property33.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField38 = property33.getField();
        org.joda.time.DateMidnight dateMidnight39 = property33.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        java.util.Date date6 = new java.util.Date(10, 366, 2000, 456825, 2598, (int) (byte) 1);
        int int7 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 02 04:18:01 UTC 1998");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight41 = property37.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property37.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withWeekyear(56);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = timeOfDay59.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = timeOfDay59.getFieldTypes();
        org.joda.time.DateTime dateTime62 = dateTime57.withFields((org.joda.time.ReadablePartial) timeOfDay59);
        org.joda.time.DateTime.Property property63 = dateTime57.hourOfDay();
        org.joda.time.DateTime dateTime64 = property63.withMinimumValue();
        org.joda.time.DateTime dateTime65 = property63.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property63.getFieldType();
        org.joda.time.DateMidnight.Property property67 = dateMidnight42.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int14 = property11.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = dateTimeZone9.getName((long) 11, locale12);
        int int14 = property8.getMaximumTextLength(locale12);
        org.joda.time.LocalDate localDate15 = property8.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfMonth();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        boolean boolean25 = durationFieldType18.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) 1969, chronology24);
        long long33 = chronology24.add((-5178038399999L), (long) 32772, 269);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.Period period44 = interval41.toPeriod();
        int[] intArray46 = chronology24.get((org.joda.time.ReadablePeriod) period44, (long) (short) 100);
        org.joda.time.LocalDate localDate48 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 106);
        org.joda.time.LocalDate.Property property49 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate50 = property49.roundFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localDate50.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-5178029584331L) + "'", long33 == (-5178029584331L));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        org.joda.time.DateTime.Property property19 = dateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = dateTime17.toLocalDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder22 = builder8.setTimeOfDay(4, 1, 30);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale26.getCountry();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category32, locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale35);
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((java.lang.Object) locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "francese" + "'", str30, "francese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR" + "'", str31, "FR");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology19);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay20.toDateMidnight(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.minus(readablePeriod27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay28.year();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        long long32 = dateTimeField30.roundHalfCeiling((long) 34521);
        org.joda.time.DurationField durationField33 = dateTimeField30.getLeapDurationField();
        boolean boolean34 = calendar6.before((java.lang.Object) durationField33);
        int int36 = calendar6.getActualMinimum((int) (short) 1);
        java.util.TimeZone timeZone37 = calendar6.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = calendar6.get(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61034222142337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=24,SECOND=17,MILLISECOND=663,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] { languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList18);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) str20, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 7, chronology30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval31.toPeriod(periodType32);
        long long36 = chronology26.add((org.joda.time.ReadablePeriod) period33, 87L, 1);
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] { languageRange38 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((java.lang.Object) str48, chronology54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 1, (long) 7, chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval59.toPeriod(periodType60);
        long long64 = chronology54.add((org.joda.time.ReadablePeriod) period61, 87L, 1);
        int[] intArray67 = chronology26.get((org.joda.time.ReadablePeriod) period61, (long) 10, (long) 13);
        org.joda.time.DurationField durationField68 = chronology26.months();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 'u', chronology26);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology26);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        boolean boolean72 = dateTimeZone3.equals((java.lang.Object) chronology71);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 93L + "'", long36 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 93L + "'", long64 == 93L);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = yearMonthDay17.getFieldTypes();
        org.joda.time.Interval interval19 = yearMonthDay17.toInterval();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset((long) (byte) 10);
        boolean boolean25 = dateTimeZone22.isFixed();
        int int27 = dateTimeZone22.getOffsetFromLocal((long) 10);
        long long31 = dateTimeZone22.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 11, dateTimeZone22);
        java.lang.String str34 = dateTimeZone22.getShortName(1961L);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) interval19, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 87L + "'", long31 == 87L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(11);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.Chronology chronology11 = localDate9.getChronology();
        boolean boolean12 = durationFieldType5.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        java.lang.String str16 = dateTimeField14.getAsText((long) 11);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = dateTimeField14.getAsText((int) (byte) 10, locale22);
        java.lang.String str27 = dateTimeZone1.getName(1644572284177L, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "France" + "'", str24, "France");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10" + "'", str26, "10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+35:00" + "'", str27, "+35:00");
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int[] intArray6 = timeOfDay1.getValues();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.plusSeconds((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale10.getISO3Language();
        java.lang.String str15 = locale10.getCountry();
        java.lang.String str16 = timeOfDay1.toString("0", locale10);
        java.lang.String str17 = locale10.getDisplayLanguage();
        java.lang.String str18 = locale10.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[9, 39, 29, 991]");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ita" + "'", str14, "ita");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "IT" + "'", str15, "IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(34521);
        int int5 = localDate0.getYear();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(11);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.Chronology chronology11 = localDate9.getChronology();
        org.joda.time.LocalDate localDate13 = localDate9.minusDays(1);
        org.joda.time.LocalDate.Property property14 = localDate9.monthOfYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime25.getZone();
        org.joda.time.DateTime dateTime31 = localDate9.toDateTime(localTime15, dateTimeZone30);
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] { languageRange33 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList41);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((java.lang.Object) str43, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.dayOfWeek();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology53);
        org.joda.time.DateTime dateTime55 = yearMonthDay54.toDateTimeAtMidnight();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay54.toDateMidnight(dateTimeZone57);
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay54, 1, locale62);
        long long66 = dateTimeField51.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField51.getType();
        boolean boolean68 = localDate9.isSupported(dateTimeFieldType67);
        int int69 = localDate0.get(dateTimeFieldType67);
        org.joda.time.LocalDate localDate71 = localDate0.withYear(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate73 = localDate0.withDayOfYear((-13827));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -13827 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "lun" + "'", str63, "lun");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1468800017L + "'", long66 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(localDate71);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusMonths((int) '4');
        int int64 = yearMonthDay56.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay56.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay66 = property65.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.minusMonths(0);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay26.toDateMidnight();
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = property30.addWrapFieldToCopy(264);
        org.joda.time.DateMidnight dateMidnight33 = property30.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(11);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.LocalDate localDate46 = localDate42.minusDays(1);
        org.joda.time.LocalDate.Property property47 = localDate42.monthOfYear();
        org.joda.time.LocalTime localTime48 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getStart();
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfWeek(4);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime58.getZone();
        org.joda.time.DateTime dateTime64 = localDate42.toDateTime(localTime48, dateTimeZone63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone63);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.DateTime.Property property68 = dateTime67.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 1, (long) 7, chronology71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval72.toPeriod(periodType73);
        org.joda.time.DateTime dateTime75 = dateTime67.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight35.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.PeriodType periodType77 = period74.getPeriodType();
        org.joda.time.DateTime dateTime78 = dateTime17.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTime dateTime79 = dateTime7.plus((org.joda.time.ReadablePeriod) period74);
        int int80 = dateTime7.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 11 + "'", int80 == 11);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        java.util.Date date6 = new java.util.Date(2022, 86399999, 693, 27, 909, 50);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Oct 25 18:09:50 UTC 7203923");
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay15 = property11.addNoWrapToCopy(8);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minusMinutes(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.withMinuteOfHour(65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 2233);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((java.lang.Object) str16, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(604800000L, 6974852348000L, chronology22);
        org.joda.time.DurationField durationField26 = chronology22.months();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1644572143252L, chronology22);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfMonth();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.LocalDate localDate35 = localDate31.minusDays(1);
        org.joda.time.LocalDate.Property property36 = localDate31.monthOfYear();
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTime.Property property51 = dateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime47.getZone();
        org.joda.time.DateTime dateTime53 = localDate31.toDateTime(localTime37, dateTimeZone52);
        java.util.Locale.LanguageRange languageRange55 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] { languageRange55 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList63);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate69 = localDate67.withDayOfYear(11);
        org.joda.time.LocalDate.Property property70 = localDate69.dayOfMonth();
        org.joda.time.Chronology chronology71 = localDate69.getChronology();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((java.lang.Object) str65, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.dayOfWeek();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology75);
        org.joda.time.DateTime dateTime77 = yearMonthDay76.toDateTimeAtMidnight();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        int int81 = dateTimeZone79.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight82 = yearMonthDay76.toDateMidnight(dateTimeZone79);
        java.util.Locale locale84 = java.util.Locale.ITALY;
        java.lang.String str85 = dateTimeField73.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay76, 1, locale84);
        long long88 = dateTimeField73.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = dateTimeField73.getType();
        boolean boolean90 = localDate31.isSupported(dateTimeFieldType89);
        int int91 = dateMidnight27.get(dateTimeFieldType89);
        int int92 = localDate1.get(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "lun" + "'", str85, "lun");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1468800017L + "'", long88 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.clear();
        calendar6.setTimeInMillis(1644572130023L);
        calendar6.set(1969, 1, 661, 2, 13, 1020000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=661,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=2,MINUTE=13,SECOND=1020000,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 34565);
        org.joda.time.LocalDate localDate3 = localDate1.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        long long28 = chronology18.add((org.joda.time.ReadablePeriod) period25, 87L, 1);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] { languageRange30 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) str40, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        long long56 = chronology46.add((org.joda.time.ReadablePeriod) period53, 87L, 1);
        int[] intArray59 = chronology18.get((org.joda.time.ReadablePeriod) period53, (long) 10, (long) 13);
        org.joda.time.DurationField durationField60 = chronology18.months();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 'u', chronology18);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField63 = chronology18.dayOfMonth();
        boolean boolean64 = dateTimeField63.isLenient();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology66);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.minusMonths(0);
        org.joda.time.LocalDate localDate70 = yearMonthDay69.toLocalDate();
        int int71 = dateTimeField63.getMinimumValue((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate.Property property72 = localDate70.yearOfEra();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 93L + "'", long28 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 93L + "'", long56 == 93L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.withMinimumValue();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        int int7 = gregorianCalendar6.getWeeksInWeekYear();
        int int9 = gregorianCalendar6.get((int) (short) 10);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset((long) (byte) 10);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        long long58 = dateTimeZone53.convertLocalToUTC((long) 1971, false, (long) 39);
        org.joda.time.DateTime dateTime59 = dateTime38.toDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1961L + "'", long58 == 1961L);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology4);
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay5.toDateMidnight(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.minus(readablePeriod12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.year();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.withMaximumValue();
        int int17 = property14.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay18 = property14.withMaximumValue();
        org.joda.time.Chronology chronology19 = yearMonthDay18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(366, 655, 57, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.Chronology chronology5 = yearMonthDay0.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeField7.set((long) 2022, "Property[secondOfDay]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[secondOfDay]\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTime dateTime36 = dateTime9.plusHours(2922789);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfDay(11);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.DateTime dateTime41 = property39.getDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(34567);
        int int44 = dateTime41.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2303 + "'", int44 == 2303);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder12.setCalendarType("T09:35:45.160");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: T09:35:45.160");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property51 = dateMidnight46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = property51.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField54 = property51.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight56 = property51.addToCopy(366);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = dateTimeZone60.getName((long) (byte) 10, locale62);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone60);
        org.joda.time.Interval interval65 = interval64.toInterval();
        long long66 = interval65.getStartMillis();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 1, (long) 7, chronology71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval72.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval68.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight80 = dateMidnight12.withYearOfCentury((-1886));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1886 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight78);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("43");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 43");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 21);
        java.io.Writer writer8 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime32.getZone();
        int int38 = property22.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime40 = property22.setCopy(19);
        org.joda.time.DateTimeField dateTimeField41 = property22.getField();
        org.joda.time.DateTime dateTime42 = property22.roundCeilingCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer8, (org.joda.time.ReadableInstant) dateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration39, 106);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.minusDays(12);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusMonths(65);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays(2922789);
        boolean boolean51 = dateMidnight47.isBefore(864000000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusMinutes(16);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = timeOfDay11.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(9);
        boolean boolean17 = dateTime15.isEqual((long) 53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDurationAdded(13920L, 35);
        long long20 = dateMidnight16.getMillis();
        org.joda.time.DateMidnight.Property property21 = dateMidnight16.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight16.plusDays(0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-10L) + "'", long20 == (-10L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology16);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone27);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = dateTimeZone27.getName((long) 11, locale30);
        java.lang.String str32 = dateTimeZone20.getName(1644572138904L, locale30);
        java.util.Calendar calendar33 = dateTime9.toCalendar(locale30);
        calendar33.setMinimalDaysInFirstWeek((-1));
        calendar33.set(1970, (int) '#', 34565);
        calendar33.set(1969, 365, 14);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = calendar33.getActualMinimum(245);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 245");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-1,ERA=1,YEAR=1969,MONTH=365,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=14,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        boolean boolean17 = timeOfDay13.isAfter((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.minus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withPeriodAdded(readablePeriod20, 10);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay19.minuteOfHour();
        int int24 = property23.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology58 = dateTime36.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.Chronology chronology61 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        boolean boolean63 = durationFieldType26.isSupported(chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withChronology(chronology61);
        boolean boolean65 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(34521);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime15.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateMidnight5.compareTo((org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateMidnight5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder12 = builder4.setDate((int) (byte) 10, 70500000, 1971);
        java.util.Calendar.Builder builder16 = builder4.setTimeOfDay(95, 22, 32769);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder4.setWeekDefinition(53, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getGreatestMinimum(3);
        int int9 = calendar6.getWeekYear();
        calendar6.clear();
        calendar6.setFirstDayOfWeek(34719);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34719,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.LocalDate localDate8 = localDate3.withFields(readablePartial7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minus(readableDuration42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withMillis((long) 10);
        int int46 = dateMidnight41.getHourOfDay();
        org.joda.time.DateMidnight.Property property47 = dateMidnight41.weekyear();
        boolean boolean48 = localDate8.equals((java.lang.Object) dateMidnight41);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = timeOfDay25.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = timeOfDay25.getFieldTypes();
        org.joda.time.DateTime dateTime28 = dateTime23.withFields((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(100);
        int int31 = dateTime28.getSecondOfDay();
        boolean boolean33 = dateTime28.isBefore((long) 2000);
        org.joda.time.DateTime.Property property34 = dateTime28.yearOfCentury();
        boolean boolean35 = calendar6.equals((java.lang.Object) property34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572371425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=31,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 34771 + "'", int31 == 34771);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay3.plusMillis(68040011);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.withMillisOfSecond(2059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2059 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:31.471" + "'", str8, "T09:39:31.471");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        int int6 = localDate3.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        int int19 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        long long29 = interval28.getStartMillis();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval28.withDurationBeforeEnd(readableDuration30);
        long long32 = interval28.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        int int35 = period34.size();
        org.joda.time.MutablePeriod mutablePeriod36 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime46.minusMonths(4);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(70);
        int int53 = dateTime50.getSecondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime50.withYear((int) 'u');
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay57.minusDays((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        java.lang.String str61 = durationFieldType60.getName();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay57.withFieldAdded(durationFieldType60, (int) (byte) 0);
        org.joda.time.DateTime dateTime64 = yearMonthDay57.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getRangeDurationType();
        java.lang.String str67 = durationFieldType66.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay57.withFieldAdded(durationFieldType66, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "centuries" + "'", str67, "centuries");
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=21,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime18.withLaterOffsetAtOverlap();
        int int20 = dateTime19.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 1003);
        java.lang.StringBuffer stringBuffer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer18, 1496560659993778L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        int int19 = property11.getMaximumTextLength(locale16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        boolean boolean25 = timeOfDay21.isAfter((org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean27 = timeOfDay21.isSupported(dateTimeFieldType26);
        int int28 = timeOfDay21.size();
        java.lang.String str30 = timeOfDay21.toString("+00:00:00.010");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay21.withChronologyRetainFields(chronology31);
        int int33 = property11.compareTo((org.joda.time.ReadablePartial) timeOfDay32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = timeOfDay32.getFieldType(1968);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1968");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:31.630" + "'", str8, "T09:39:31.630");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        boolean boolean9 = dateTimeZone6.isFixed();
        int int11 = dateTimeZone6.getOffsetFromLocal((long) 10);
        java.lang.String str13 = dateTimeZone6.getName(3787257600000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(16, 100, 34662, 3600011, 126, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600011 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) (short) -1, (int) (byte) 10, 22);
        int int23 = calendar6.getActualMinimum(1);
        boolean boolean24 = calendar6.isWeekDateSupported();
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = calendar6.getDisplayName((-292275054), 661, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=10,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=22,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=687,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(999);
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        boolean boolean24 = locale22.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = locale26.getDisplayVariant(locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property16.setCopy("Mon May 08 00:00:00 UTC 1978", locale26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Mon May 08 00:00:00 UTC 1978\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        int int7 = property6.get();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale15.getDisplayLanguage(locale18);
        java.lang.String str20 = locale15.getCountry();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale15.getDisplayLanguage(locale21);
        java.lang.String str23 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) timeOfDay11, locale15);
        java.util.Set<java.lang.Character> charSet24 = locale15.getExtensionKeys();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "francese" + "'", str19, "francese");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FR" + "'", str20, "FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(charSet24);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTimeFormatter59.parseDateTime("T09:38:32.883");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate1.minusMonths(11);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = localDate1.toString("\u30d5\u30e9\u30f3\u30b9", locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale10);
        boolean boolean14 = calendar12.isSet(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str11, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572371898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=31,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = property8.setCopy("anglais (Canada)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"anglais (Canada)\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.minusMonths(25);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Chronology chronology15 = localDate13.getChronology();
        boolean boolean16 = durationFieldType9.isSupported(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfMonth();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DurationField durationField20 = durationFieldType8.getField(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay7.withFieldAdded(durationFieldType8, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getDisplayScript();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        boolean boolean66 = dateTimeFormatter65.isOffsetParsed();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(chronology69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = timeOfDay70.getFieldTypes();
        boolean boolean72 = timeOfDay68.isAfter((org.joda.time.ReadablePartial) timeOfDay70);
        int int73 = timeOfDay70.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = timeOfDay70.toString(dateTimeFormatter74);
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay70.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property78 = timeOfDay70.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTimeFormatter65.print((org.joda.time.ReadablePartial) timeOfDay70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "T09:39:32.339" + "'", str75, "T09:39:32.339");
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMonths(4);
        java.util.Date date19 = dateTime18.toDate();
        int int20 = date19.getMinutes();
        java.time.Instant instant21 = date19.toInstant();
        int int22 = date19.getMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] { languageRange33 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList41);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfYear(11);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfMonth();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((java.lang.Object) str43, chronology49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = interval54.toPeriod(periodType55);
        long long59 = chronology49.add((org.joda.time.ReadablePeriod) period56, 87L, 1);
        java.util.Locale.LanguageRange languageRange61 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] { languageRange61 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList69);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate75 = localDate73.withDayOfYear(11);
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfMonth();
        org.joda.time.Chronology chronology77 = localDate75.getChronology();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((java.lang.Object) str71, chronology77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) 1, (long) 7, chronology81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval82.toPeriod(periodType83);
        long long87 = chronology77.add((org.joda.time.ReadablePeriod) period84, 87L, 1);
        int[] intArray90 = chronology49.get((org.joda.time.ReadablePeriod) period84, (long) 10, (long) 13);
        org.joda.time.DurationField durationField91 = chronology49.months();
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((long) 'u', chronology49);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(chronology49);
        org.joda.time.Chronology chronology94 = dateTime93.getChronology();
        boolean boolean95 = dateTimeZone26.equals((java.lang.Object) chronology94);
        org.joda.time.YearMonthDay yearMonthDay96 = new org.joda.time.YearMonthDay((java.lang.Object) date19, chronology94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime97 = new org.joda.time.DateTime(264, 655, (-13827), 13920, 1990, chronology94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13920 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Sep 01 00:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 93L + "'", long59 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 93L + "'", long87 == 93L);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(366, 2);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(13920L, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfSecond();
        long long16 = dateTimeField13.addWrapField((long) 577, 1970);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = dateTimeField13.getDifference((long) 95, 1644576099515L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1644576099420");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 547L + "'", long16 == 547L);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        int int7 = localDate1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology9);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay10.toDateMidnight(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getName((long) 11);
        org.joda.time.DateTime dateTime19 = localDate1.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 1, (long) 7, chronology46);
        org.joda.time.Duration duration48 = interval47.toDuration();
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTime dateTime50 = dateTime29.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Chronology chronology51 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime19.toMutableDateTime(chronology51);
        org.joda.time.DateTime.Property property53 = dateTime19.monthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval3.toPeriod(periodType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        int int11 = localDate7.getWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 1, (long) 7, chronology18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        org.joda.time.DateTime dateTime27 = dateTime20.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology29);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay30.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight31.toYearMonthDay();
        int int33 = yearMonthDay32.getYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        long long43 = interval42.getStartMillis();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Interval interval45 = interval42.withDurationBeforeEnd(readableDuration44);
        long long46 = interval42.toDurationMillis();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval42.toPeriod(periodType47);
        int int49 = period48.size();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay32.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period48);
        org.joda.time.PeriodType periodType52 = period48.getPeriodType();
        org.joda.time.Period period53 = interval15.toPeriod(periodType52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTimeZone57.getName((long) (byte) 10, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone57);
        org.joda.time.Interval interval62 = interval61.toInterval();
        long long63 = interval62.getStartMillis();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval62.withDurationBeforeEnd(readableDuration64);
        long long66 = interval62.toDurationMillis();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval62.toPeriod(periodType67);
        int int69 = period68.size();
        org.joda.time.MutablePeriod mutablePeriod70 = period68.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.lang.String str77 = dateTimeZone74.getName((long) (byte) 10, locale76);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone74);
        org.joda.time.Interval interval79 = interval78.toInterval();
        org.joda.time.DateTime dateTime80 = interval78.getStart();
        org.joda.time.DateTime dateTime82 = dateTime80.withDayOfWeek(4);
        boolean boolean83 = period68.equals((java.lang.Object) 4);
        org.joda.time.PeriodType periodType84 = period68.getPeriodType();
        org.joda.time.Period period85 = interval15.toPeriod(periodType84);
        boolean boolean86 = interval15.isBeforeNow();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.010" + "'", str77, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11 Feb 2022 09:38:16 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"11 Feb 2022 09:38:16 GMT\" is malformed at \" Feb 2022 09:38:16 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset((long) (byte) 10);
        boolean boolean5 = dateTimeZone2.isFixed();
        int int7 = dateTimeZone2.getOffsetFromLocal((long) 10);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 11, dateTimeZone2);
        org.joda.time.DateTime dateTime14 = dateTime12.minus((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 578 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 87L + "'", long11 == 87L);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology31 = dateTime9.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        java.lang.String str35 = dateTimeField33.getAsText(43200000L);
        boolean boolean37 = dateTimeField33.isLeap(43200000L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        boolean boolean44 = timeOfDay40.isAfter((org.joda.time.ReadablePartial) timeOfDay42);
        int int45 = timeOfDay42.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = timeOfDay42.toString(dateTimeFormatter46);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay42.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property50 = timeOfDay42.secondOfMinute();
        int int51 = property50.getMinimumValueOverall();
        org.joda.time.DurationField durationField52 = property50.getRangeDurationField();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        boolean boolean54 = property50.equals((java.lang.Object) locale53);
        java.lang.String str55 = locale53.getDisplayScript();
        java.lang.String str56 = dateTimeField33.getAsText(1644572288106L, locale53);
        java.lang.String str57 = locale53.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "T09:39:32.757" + "'", str47, "T09:39:32.757");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.Period period10 = interval7.toPeriod();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        boolean boolean18 = durationFieldType11.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        org.joda.time.Interval interval20 = interval7.withChronology(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DurationField durationField22 = chronology17.months();
        java.lang.String str23 = chronology17.toString();
        java.lang.String str24 = chronology17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate12);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = dateTimeField9.getAsText((long) 22, locale18);
        java.lang.String str20 = locale18.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName(locale24);
        java.lang.String str28 = locale0.getDisplayVariant(locale24);
        java.lang.String str29 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "19" + "'", str19, "19");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 269);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.plusMonths((int) '4');
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate8 = localDate3.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(11);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        boolean boolean17 = durationFieldType10.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfHalfday();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(39);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int24 = dateTime20.get(dateTimeFieldType23);
        java.lang.String str25 = dateTimeFieldType23.toString();
        org.joda.time.LocalDate.Property property26 = localDate8.property(dateTimeFieldType23);
        org.joda.time.DateTime.Property property27 = dateTime1.property(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekOfWeekyear" + "'", str25, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays(0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.Duration duration33 = interval32.toDuration();
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime35 = dateTime14.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology36 = dateTime14.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.Chronology chronology39 = chronology36.withUTC();
        org.joda.time.DurationField durationField40 = chronology39.weeks();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(41, 29, 0, 12, 724, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 724 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setDate(1969);
        date13.setYear(6);
        java.util.Date date25 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date32 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean33 = date25.after(date32);
        date32.setDate(1969);
        date32.setYear(6);
        boolean boolean38 = date13.before(date32);
        int int39 = date32.getDate();
        date32.setSeconds(100);
        date32.setMinutes(924);
        java.time.Instant instant44 = date32.toInstant();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Jul 21 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jul 21 19:25:40 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(instant44);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        boolean boolean14 = dateTimeField13.isSupported();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        boolean boolean20 = timeOfDay16.isAfter((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay16.minus(readablePeriod21);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMinutes(22);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str29 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) timeOfDay26, locale28);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay26.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay32 = timeOfDay26.withHourOfDay(963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 963 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 1, (long) 7, chronology27);
        org.joda.time.Duration duration29 = interval28.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = dateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate37 = localDate35.plusMonths((int) '4');
        org.joda.time.DateTime dateTime38 = localDate35.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate40 = localDate35.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property41 = localDate40.weekyear();
        org.joda.time.LocalDate localDate43 = localDate40.withWeekyear(3);
        org.joda.time.LocalDate localDate45 = localDate40.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = localDate40.toInterval(dateTimeZone47);
        int[] intArray53 = chronology32.get((org.joda.time.ReadablePartial) localDate40, (long) 17);
        org.joda.time.DateTimeField dateTimeField54 = chronology32.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((-61747120186046L), chronology32);
        org.joda.time.DateTime dateTime56 = yearMonthDay55.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField31 = chronology18.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        java.util.Locale.LanguageRange languageRange35 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] { languageRange35 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList43);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(11);
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfMonth();
        org.joda.time.Chronology chronology51 = localDate49.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((java.lang.Object) str45, chronology51);
        org.joda.time.DurationField durationField53 = durationFieldType33.getField(chronology51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (byte) 100, chronology51);
        org.joda.time.LocalDate localDate56 = localDate54.plusYears(11);
        org.joda.time.Chronology chronology57 = localDate56.getChronology();
        int int58 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) dateTimeField31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 53 + "'", int58 == 53);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        long long35 = dateTimeZone31.previousTransition(87L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-5L), dateTimeZone31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(11);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.Chronology chronology42 = localDate40.getChronology();
        org.joda.time.LocalDate localDate44 = localDate40.minusDays(1);
        org.joda.time.LocalDate.Property property45 = localDate40.monthOfYear();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.LocalDate localDate47 = property45.withMaximumValue();
        org.joda.time.LocalDate localDate49 = property45.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.DateTime dateTime59 = localDate49.toDateTime(localTime50, dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean61 = localDate49.isSupported(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getDurationType();
        org.joda.time.DateTime.Property property63 = dateTime36.property(dateTimeFieldType60);
        boolean boolean65 = dateTime36.isBefore((long) 5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime36.withHourOfDay(34521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34521 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 87L + "'", long35 == 87L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = property17.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight19 = property17.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withMillis((long) 1969);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.minusYears((-58));
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(32770);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime16.withDayOfWeek(693);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 693 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtStartOfDay();
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.DateTime dateTime18 = interval16.getStart();
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withMillis((long) (short) 100);
        int int46 = dateMidnight41.getWeekOfWeekyear();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readablePeriod8, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.plusMonths((int) '4');
        org.joda.time.DateTime dateTime58 = localDate55.toDateTimeAtStartOfDay();
        int int59 = localDate55.getWeekyear();
        org.joda.time.DateTime dateTime60 = localDate55.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight41.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 6);
        org.joda.time.LocalDate localDate64 = localDate1.minus((org.joda.time.ReadablePeriod) period53);
        int int65 = localDate1.getCenturyOfEra();
        int int66 = localDate1.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 19 + "'", int65 == 19);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 19 + "'", int66 == 19);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder22 = builder8.setTimeOfDay(4, 1, 30);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale26.getCountry();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category32, locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale35);
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone42, locale43);
        java.util.Calendar.Builder builder45 = builder38.setTimeZone(timeZone42);
        java.util.Calendar.Builder builder49 = builder45.setDate(273, 517, (-292275054));
        java.util.Date date56 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date63 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean64 = date56.after(date63);
        date63.setMonth((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder67 = builder45.setInstant(date63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "francese" + "'", str30, "francese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR" + "'", str31, "FR");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572373472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=33,MILLISECOND=472,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals(date56.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date63.toString(), "Thu May 07 04:06:02 UTC 2172");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology7);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtMidnight();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay8.toDateMidnight(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.minus(readablePeriod15);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.year();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        int int20 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay21 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(11);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfMonth();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.LocalDate localDate29 = localDate25.minusDays(1);
        org.joda.time.LocalDate.Property property30 = localDate25.monthOfYear();
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime41.getZone();
        org.joda.time.DateTime dateTime47 = localDate25.toDateTime(localTime31, dateTimeZone46);
        org.joda.time.Interval interval48 = yearMonthDay21.toInterval(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay4.toDateMidnight(dateTimeZone46);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 'x', true, 34546L);
        int int55 = dateTimeZone46.getOffsetFromLocal((-62135596800010L));
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 110L + "'", long53 == 110L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        int int10 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        int int12 = localDate6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withMillis((long) (short) 100);
        int int51 = dateMidnight46.getWeekOfWeekyear();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readablePeriod13, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate62 = localDate60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.getWeekyear();
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.LocalDate localDate69 = localDate6.minus((org.joda.time.ReadablePeriod) period58);
        int int70 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod71 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTimeField dateTimeField74 = yearMonthDay2.getField(2);
        long long76 = dateTimeField74.roundHalfFloor(187200001L);
        java.lang.String str77 = dateTimeField74.toString();
        java.lang.String str78 = dateTimeField74.getName();
        java.lang.String str79 = dateTimeField74.toString();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 172800000L + "'", long76 == 172800000L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str77, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "dayOfMonth" + "'", str78, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str79, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        int int13 = dateTimeField11.getMinimumValue((long) 1968);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        int int28 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate25);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = dateTimeField22.getAsText((long) 22, locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        java.lang.String str35 = locale31.getVariant();
        java.lang.String str36 = dateTimeField11.getAsShortText(1644576099515L, locale31);
        long long38 = dateTimeField11.roundCeiling(34615L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2922789 + "'", int28 == 2922789);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "19" + "'", str32, "19");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AD" + "'", str36, "AD");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9223372036854775807L + "'", long38 == 9223372036854775807L);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 1969);
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight1.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) (byte) 100);
        org.joda.time.DateMidnight.Property property5 = dateMidnight1.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy(95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths(23);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight55.toYearMonthDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(11);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusMonths((int) '4');
        int int64 = yearMonthDay56.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay56.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay66 = property65.getYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int68 = yearMonthDay66.getValue(954);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 954");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate15 = dateTime9.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        boolean boolean23 = durationFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(39);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfSecond(27);
        org.joda.time.DateTime.Property property31 = dateTime28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.DateTime dateTime57 = interval55.getStart();
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfWeek(4);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime63 = dateTime57.toDateTime(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minus(readableDuration65);
        java.util.Locale.LanguageRange languageRange68 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] { languageRange68 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strList76);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate82 = localDate80.withDayOfYear(11);
        org.joda.time.LocalDate.Property property83 = localDate82.dayOfMonth();
        org.joda.time.Chronology chronology84 = localDate82.getChronology();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((java.lang.Object) str78, chronology84);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Interval interval89 = new org.joda.time.Interval((long) 1, (long) 7, chronology88);
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = interval89.toPeriod(periodType90);
        long long94 = chronology84.add((org.joda.time.ReadablePeriod) period91, 87L, 1);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight66.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.Period period96 = period91.toPeriod();
        org.joda.time.Interval interval97 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadablePeriod) period96);
        org.joda.time.DateTime dateTime99 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period96, 292278994);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 93L + "'", long94 == 93L);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset((long) (byte) 10);
        boolean boolean4 = dateTimeZone1.isFixed();
        int int6 = dateTimeZone1.getOffsetFromLocal((long) 10);
        java.lang.String str8 = dateTimeZone1.getName(3787257600000L);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder14 = builder10.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder18 = builder14.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        java.util.Calendar.Builder builder28 = builder18.setTimeZone(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale29.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str35 = locale29.getDisplayName(locale33);
        java.lang.String str36 = dateTimeZone1.getName(77L, locale33);
        boolean boolean38 = dateTimeZone1.isStandardOffset(9223371985593602010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572373915,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=33,MILLISECOND=925,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ja" + "'", str34, "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str35, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale18);
        int int22 = property11.getMaximumTextLength(locale18);
        java.lang.String str23 = property11.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572373938,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=33,MILLISECOND=938,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "year" + "'", str23, "year");
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(724, 365, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 724 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = localDate3.plusMonths((-1));
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean11 = localDate7.equals((java.lang.Object) dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.LocalDate localDate19 = localDate15.minusDays(1);
        org.joda.time.LocalDate.Property property20 = localDate15.monthOfYear();
        int int21 = property20.getMinimumValueOverall();
        org.joda.time.LocalDate localDate22 = property20.withMaximumValue();
        org.joda.time.LocalDate localDate24 = property20.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.DateTime dateTime34 = localDate24.toDateTime(localTime25, dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.DateTime dateTime36 = localDate7.toDateTimeAtCurrentTime(dateTimeZone29);
        int int38 = dateTimeZone29.getOffsetFromLocal(44L);
        long long42 = dateTimeZone29.convertLocalToUTC(234034520L, true, 671L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 234034510L + "'", long42 == 234034510L);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1496560659993778L);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyear();
        org.joda.time.DurationField durationField12 = chronology6.minutes();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone5);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.DateTime dateTime11 = interval9.getStart();
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfWeek(4);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone32);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfFloorCopy();
        boolean boolean37 = dateTimeZone1.equals((java.lang.Object) dateMidnight36);
        int int39 = dateTimeZone1.getOffsetFromLocal(6127761962000L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(100L, dateTimeZone1);
        boolean boolean41 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone1);
        long long46 = dateTimeZone1.convertLocalToUTC((-61779456000010L), false, (long) 611);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61779456000010L) + "'", long46 == (-61779456000010L));
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property15 = dateTime14.monthOfYear();
        long long16 = property15.remainder();
        org.joda.time.DateTime dateTime17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 1, (long) 7, chronology21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval22.toPeriod(periodType23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        long long34 = interval33.getStartMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 1, (long) 7, chronology39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval40.toPeriod(periodType41);
        org.joda.time.Interval interval43 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(10L);
        org.joda.time.Interval interval46 = interval43.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval47 = interval22.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(11);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfMonth();
        org.joda.time.Chronology chronology54 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 13, chronology54);
        org.joda.time.DurationField durationField58 = chronology54.hours();
        org.joda.time.Interval interval59 = interval46.withChronology(chronology54);
        org.joda.time.Duration duration60 = interval59.toDuration();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime9.minus((org.joda.time.ReadableDuration) duration60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay((java.lang.Object) duration60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 1969);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withWeekyear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withEra((-30800));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -30800 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = localDate4.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDate.Property property9 = localDate4.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, dateTimeZone41);
        long long45 = dateTimeZone41.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(0L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval48 = localDate4.toInterval(dateTimeZone41);
        long long50 = dateTimeZone41.convertUTCToLocal(9223371985593602000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(34615, 39, 35313, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 87L + "'", long45 == 87L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223371985593602010L + "'", long50 == 9223371985593602010L);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        boolean boolean12 = dateTimeFormatter9.isParser();
        org.joda.time.Chronology chronology13 = dateTimeFormatter9.getChronolgy();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chronology13);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        int int37 = dateMidnight36.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withCenturyOfEra(59);
        org.joda.time.DateMidnight.Property property40 = dateMidnight36.dayOfMonth();
        int int41 = property40.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.weekyear();
        org.joda.time.DateMidnight dateMidnight28 = property27.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale32.getDisplayCountry();
        java.lang.String str36 = locale32.getDisplayName();
        java.lang.String str37 = locale32.getDisplayCountry();
        int int38 = property27.getMaximumTextLength(locale32);
        org.joda.time.DateMidnight dateMidnight39 = property27.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = property27.setCopy("12");
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer9, (org.joda.time.ReadableInstant) dateMidnight41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "France" + "'", str35, "France");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French (France)" + "'", str36, "French (France)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "France" + "'", str37, "France");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) '#');
        long long33 = dateTimeZone28.convertUTCToLocal((long) 11);
        java.lang.String str35 = dateTimeZone28.getNameKey(1644572124561L);
        org.joda.time.DateTime dateTime36 = localDate9.toDateTimeAtMidnight(dateTimeZone28);
        int int37 = localDate9.getEra();
        org.joda.time.DateTime dateTime38 = localDate9.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 21L + "'", long33 == 21L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfYear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.withDayOfYear(11);
        org.joda.time.LocalDate.Property property67 = localDate66.dayOfMonth();
        org.joda.time.Chronology chronology68 = localDate66.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekOfWeekyear();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology72);
        org.joda.time.DateTime dateTime74 = yearMonthDay73.toDateTimeAtMidnight();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight79 = yearMonthDay73.toDateMidnight(dateTimeZone76);
        java.lang.String str81 = dateTimeZone76.getName((long) 11);
        org.joda.time.Chronology chronology82 = chronology68.withZone(dateTimeZone76);
        int int84 = dateTimeZone76.getOffsetFromLocal(0L);
        org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay(dateTimeZone76);
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.lang.String str88 = locale87.getScript();
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.lang.String str90 = locale87.getDisplayName(locale89);
        java.lang.String str91 = dateTimeZone76.getName(0L, locale89);
        java.lang.String str92 = dateTimeField61.getAsText(1003, locale89);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str90, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.010" + "'", str91, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1003" + "'", str92, "1003");
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset((long) (byte) 10);
        boolean boolean16 = dateTimeZone13.isFixed();
        int int18 = dateTimeZone13.getOffsetFromLocal((long) 10);
        long long22 = dateTimeZone13.convertLocalToUTC((long) 'a', false, 187200001L);
        boolean boolean23 = dateTimeZone13.isFixed();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        boolean boolean28 = dateTimeZone25.isFixed();
        int int30 = dateTimeZone25.getOffsetFromLocal((long) 10);
        long long32 = dateTimeZone25.previousTransition((long) 17);
        long long34 = dateTimeZone13.getMillisKeepLocal(dateTimeZone25, (long) 13);
        org.joda.time.DateTime dateTime35 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay9.withMonthOfYear((-13827));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -13827 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572374451,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=34,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 87L + "'", long22 == 87L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 17L + "'", long32 == 17L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 13L + "'", long34 == 13L);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        java.lang.Integer int6 = dateTimeFormatter3.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder11 = builder8.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("francese");
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfMonth();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        int int24 = dateTimeField22.getMaximumTextLength(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.lang.String str27 = locale25.getDisplayVariant();
        int int28 = dateTimeField22.getMaximumShortTextLength(locale25);
        java.util.Locale.Builder builder29 = builder11.setLocale(locale25);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = builder30.build();
        java.util.Locale.Builder builder32 = builder29.setLocale(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter3.withLocale(locale31);
        java.lang.Appendable appendable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable34, 100018L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Korean" + "'", str26, "Korean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 70, chronology6);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder16 = builder12.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder20 = builder16.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        java.util.TimeZone timeZone29 = dateTimeZone24.toTimeZone();
        java.util.Calendar.Builder builder30 = builder20.setTimeZone(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = locale31.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.toLanguageTag();
        java.lang.String str37 = locale31.getDisplayName(locale35);
        java.util.Calendar calendar38 = dateTime11.toCalendar(locale31);
        calendar38.clear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeZone45.getName((long) (byte) 10, locale47);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone45);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.joda.time.DateTime dateTime51 = interval49.getStart();
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfWeek(4);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfYear();
        java.lang.String str56 = property55.toString();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        org.joda.time.DateTime dateTime58 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime59 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime60 = property55.getDateTime();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        int int62 = property55.getMaximumShortTextLength(locale61);
        java.lang.String str63 = locale61.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = calendar38.getDisplayName(805, 366, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572374560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=34,MILLISECOND=570,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zho" + "'", str33, "zho");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ja" + "'", str36, "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str37, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[dayOfYear]" + "'", str56, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        boolean boolean23 = calendar6.before((java.lang.Object) interval21);
        int int24 = calendar6.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = calendar6.getMaximum(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=34,MILLISECOND=599,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean4 = timeOfDay1.isSupported(dateTimeFieldType3);
        int int5 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay1.minuteOfHour();
        int int7 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusSeconds(68040011);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 631 + "'", int5 == 631);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 631 + "'", int7 == 631);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withDefaultYear(32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 1003);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeFormatter17.parseMillis("\u661f\u671f\u65e5");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property13.getDateTime();
        org.joda.time.DateTime dateTime19 = property13.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property13.getField();
        long long22 = dateTimeField20.roundHalfCeiling(864001003L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 863999990L + "'", long22 == 863999990L);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        boolean boolean6 = localDate1.isSupported(durationFieldType5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minus(readableDuration40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight39.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight39.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate56 = localDate51.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property57 = localDate56.weekyear();
        org.joda.time.LocalDate localDate59 = localDate56.withWeekyear(3);
        org.joda.time.LocalDate localDate61 = localDate59.plusDays(0);
        org.joda.time.LocalDate localDate63 = localDate61.withCenturyOfEra((int) (byte) 10);
        int int64 = localDate63.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone68);
        org.joda.time.Interval interval73 = interval72.toInterval();
        long long74 = interval73.getStartMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Interval interval76 = interval73.withDurationBeforeEnd(readableDuration75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 1, (long) 7, chronology79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval80.toPeriod(periodType81);
        org.joda.time.Interval interval83 = interval76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDate localDate85 = localDate63.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 1971);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period82, (int) (short) 10);
        org.joda.time.LocalDate localDate88 = localDate1.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDate localDate90 = localDate1.withCenturyOfEra(34530);
        org.joda.time.LocalDate localDate91 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate93 = localDate91.withYear((int) (byte) 100);
        int int94 = localDate91.size();
        boolean boolean95 = localDate90.isBefore((org.joda.time.ReadablePartial) localDate91);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 360 + "'", int64 == 360);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setDate(1969);
        date13.setYear(6);
        date13.setYear(32772);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis((long) (byte) 100);
        boolean boolean56 = date13.equals((java.lang.Object) dateMidnight55);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jul 21 04:06:02 UTC 34677");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(32772);
        java.lang.String str11 = dateTimeZone9.getShortName((-62135596800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZone(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:32.772" + "'", str11, "+00:00:32.772");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 1, (long) 7, chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval23.toPeriod(periodType24);
        long long28 = chronology18.add((org.joda.time.ReadablePeriod) period25, 87L, 1);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] { languageRange30 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((java.lang.Object) str40, chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 1, (long) 7, chronology50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        long long56 = chronology46.add((org.joda.time.ReadablePeriod) period53, 87L, 1);
        int[] intArray59 = chronology18.get((org.joda.time.ReadablePeriod) period53, (long) 10, (long) 13);
        org.joda.time.DurationField durationField60 = chronology18.months();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 'u', chronology18);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField63 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField64 = chronology18.seconds();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology18);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        java.util.Set<java.lang.Character> charSet72 = locale70.getExtensionKeys();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale70);
        int int75 = calendar73.getGreatestMinimum(3);
        calendar73.add(7, 106);
        java.util.Date date85 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date85.setMinutes(3);
        calendar73.setTime(date85);
        boolean boolean89 = localDate66.equals((java.lang.Object) calendar73);
        java.util.Date date90 = calendar73.getTime();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 93L + "'", long28 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 93L + "'", long56 == 93L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertNotNull(calendar73);
        org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=6127761782000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=3,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals(date85.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Wed Mar 07 04:03:02 UTC 2164");
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        int int34 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime23.withDurationAdded((long) 10, 1);
        org.joda.time.DateTime dateTime39 = dateTime23.plusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMillis((-1));
        org.joda.time.DateTime.Property property42 = dateTime39.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str46 = locale44.getUnicodeLocaleType("30");
        java.lang.String str47 = property42.getAsText(locale44);
        org.joda.time.DateTime dateTime48 = property42.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime48.withTime(12, 924, 19, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 924 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate46 = localDate44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate49 = localDate44.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate49.weekyear();
        org.joda.time.LocalDate localDate52 = localDate49.withWeekyear(3);
        org.joda.time.LocalDate localDate54 = localDate52.plusDays(0);
        org.joda.time.LocalDate localDate56 = localDate54.withCenturyOfEra((int) (byte) 10);
        int int57 = localDate56.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = dateTimeZone61.getName((long) (byte) 10, locale63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone61);
        org.joda.time.Interval interval66 = interval65.toInterval();
        long long67 = interval66.getStartMillis();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Interval interval69 = interval66.withDurationBeforeEnd(readableDuration68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) 1, (long) 7, chronology72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval73.toPeriod(periodType74);
        org.joda.time.Interval interval76 = interval69.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        org.joda.time.LocalDate localDate78 = localDate56.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 1971);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight40.withPeriodAdded((org.joda.time.ReadablePeriod) period75, (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime81 = dateMidnight40.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime82 = dateMidnight40.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 360 + "'", int57 == 360);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((java.lang.Object) yearMonthDay10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572375261,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=35,MILLISECOND=261,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean24 = localDate12.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = localDate12.withWeekOfWeekyear(23);
        org.joda.time.LocalDate localDate28 = localDate12.minusWeeks(86399);
        org.joda.time.Chronology chronology29 = localDate12.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.Interval interval8 = yearMonthDay2.toInterval();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = interval8.isBefore(readableInstant9);
        org.joda.time.DateTime dateTime11 = interval8.getEnd();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(1906);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("T09:38:37.557");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t09:38:37.557");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime57.minusMinutes(366);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(269);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getStart();
        org.joda.time.DateTime dateTime86 = dateTime84.minusDays(0);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Interval interval90 = new org.joda.time.Interval((long) 1, (long) 7, chronology89);
        org.joda.time.Duration duration91 = interval90.toDuration();
        org.joda.time.DateTime dateTime92 = dateTime86.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.DateTime dateTime93 = dateTime72.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.Chronology chronology94 = dateTime72.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.seconds();
        org.joda.time.DateTimeField dateTimeField96 = chronology94.yearOfEra();
        org.joda.time.DateTime dateTime97 = dateTime60.withChronology(chronology94);
        boolean boolean99 = dateTime97.isEqual(1644572360684L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        int int10 = calendar8.getGreatestMinimum(3);
        java.util.Date date11 = calendar8.getTime();
        calendar0.setTime(date11);
        calendar0.setLenient(false);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.LocalDate localDate22 = localDate18.minusDays(1);
        org.joda.time.LocalDate.Property property23 = localDate18.monthOfYear();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.LocalDate localDate25 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property23.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime37 = localDate27.toDateTime(localTime28, dateTimeZone32);
        java.util.TimeZone timeZone38 = dateTimeZone32.toTimeZone();
        calendar0.setTimeZone(timeZone38);
        boolean boolean40 = calendar0.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(55, 927, 122);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 122");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572375367,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=35,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572375367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=35,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:39:35 UTC 2022");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = localDate3.plusMonths((-1));
        org.joda.time.LocalDate localDate9 = localDate3.withYear(43);
        int int10 = localDate3.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate3.withYearOfCentury(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = property13.setCopy(19);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(2022);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = property34.setCopy("1 janv. 1970 00:00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1 janv. 1970 00:00:00\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getGreatestMinimum(3);
        calendar6.add(7, 106);
        java.util.Date date18 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date18.setMinutes(3);
        calendar6.setTime(date18);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.setWeekDate(34657, 25, 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 57");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=6127761782000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2164,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=67,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=3,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Mar 07 04:03:02 UTC 2164");
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        date13.setDate(1969);
        date13.setYear(6);
        java.util.Date date22 = new java.util.Date(0, 269, 577);
        date22.setHours(13896);
        int int25 = date22.getMinutes();
        int int26 = date13.compareTo(date22);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Jul 21 04:06:02 UTC 1911");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jul 30 00:00:00 UTC 1925");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType1.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) 604800000L, chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.Duration duration42 = interval41.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime44 = dateTime23.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds(1);
        org.joda.time.DateTime.Property property47 = dateTime44.dayOfYear();
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        java.lang.String str54 = locale52.getDisplayCountry();
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = property47.getAsText(locale48);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = dateTimeField11.set((long) 713, "fr", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"fr\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "France" + "'", str54, "France");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder18 = builder0.setDate((int) (byte) 100, 47, 34534);
        java.util.Calendar.Builder builder20 = builder0.setLenient(true);
        java.util.Calendar.Builder builder25 = builder0.setTimeOfDay(54, 578, 32769, 245);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer6 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.minusYears(2022);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withMonthOfYear((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer6, (org.joda.time.ReadableInstant) dateMidnight39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter2.getZone();
        java.io.Writer writer9 = null;
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer9, readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology58 = localDate56.getChronology();
        boolean boolean59 = durationFieldType52.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(chronology58);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getStart();
        org.joda.time.DateTime dateTime86 = dateTime84.minusDays(0);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Interval interval90 = new org.joda.time.Interval((long) 1, (long) 7, chronology89);
        org.joda.time.Duration duration91 = interval90.toDuration();
        org.joda.time.DateTime dateTime92 = dateTime86.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.DateTime dateTime93 = dateTime72.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight62.withDurationAdded((org.joda.time.ReadableDuration) duration91, 106);
        org.joda.time.DateMidnight dateMidnight97 = dateMidnight32.withDurationAdded((org.joda.time.ReadableDuration) duration91, (-13827));
        org.joda.time.DateMidnight dateMidnight99 = dateMidnight97.withWeekyear(924);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(dateMidnight97);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(28L);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(264);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = dateTimeZone6.getName((long) 11, locale9);
        org.joda.time.Interval interval11 = localDate3.toInterval(dateTimeZone6);
        org.joda.time.LocalDate.Property property12 = localDate3.era();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology12);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay13.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusWeeks(13);
        org.joda.time.DateMidnight.Property property17 = dateMidnight14.monthOfYear();
        org.joda.time.DateTime dateTime18 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        int int19 = dateTime18.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime61 = dateTime57.withDurationAdded((long) 13, 9);
        org.joda.time.DateTime.Property property62 = dateTime57.yearOfCentury();
        java.lang.String str63 = property62.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[yearOfCentury]" + "'", str63, "Property[yearOfCentury]");
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = dateTimeZone7.getName((long) (byte) 10, locale9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone7);
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval12.getStartMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Interval interval15 = interval12.withDurationBeforeEnd(readableDuration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 1, (long) 7, chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = interval19.toPeriod(periodType20);
        org.joda.time.Interval interval22 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 1, (long) 7, chronology25);
        org.joda.time.Duration duration27 = interval26.toDuration();
        boolean boolean28 = interval15.overlaps((org.joda.time.ReadableInterval) interval26);
        boolean boolean29 = interval26.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        long long39 = interval38.getStartMillis();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        org.joda.time.Interval interval48 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        org.joda.time.MutableInterval mutableInterval49 = interval41.toMutableInterval();
        boolean boolean50 = interval26.isBefore((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.Chronology chronology51 = interval26.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 32, 43200100L, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(611, 109, chronology51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 611 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.withYear(7);
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology17);
        org.joda.time.DurationField durationField20 = chronology17.weekyears();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay10.withChronologyRetainFields(chronology17);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.clockhourOfHalfday();
        java.util.Locale.LanguageRange languageRange27 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] { languageRange27 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(11);
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfMonth();
        org.joda.time.Chronology chronology43 = localDate41.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((java.lang.Object) str37, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.dayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 1, (long) 7, chronology48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval49.toPeriod(periodType50);
        int[] intArray54 = chronology43.get((org.joda.time.ReadablePeriod) period51, (-1L), (long) 9);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) ' ', (long) ' ', chronology43);
        org.joda.time.DateTimeField dateTimeField56 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = chronology43.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) chronology17, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        int int16 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType17.getField(chronology23);
        long long27 = dateTimeField24.add((long) 100, 70);
        boolean boolean28 = dateTimeField24.isLenient();
        int int29 = dateTime15.get(dateTimeField24);
        org.joda.time.DateTime.Property property30 = dateTime15.dayOfMonth();
        int int31 = dateTime15.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3024000100L + "'", long27 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.year();
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DateTime dateTime10 = property8.addToCopy((long) (short) 1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTime dateTime14 = interval12.getStart();
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone19);
        org.joda.time.LocalDate localDate21 = dateTime20.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDate21.getValue(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292278993");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.Chronology chronology12 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withDefaultYear(1971);
        java.lang.Appendable appendable15 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(28L);
        org.joda.time.LocalDate localDate19 = localDate17.withCenturyOfEra((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable15, (org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        int int8 = property7.getLeapAmount();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime23 = localDate13.toDateTime(localTime14, dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        boolean boolean30 = locale28.hasExtensions();
        boolean boolean31 = locale28.hasExtensions();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) boolean31);
        java.lang.String str34 = dateTimeZone18.getShortName(534L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(3787257600000L, dateTimeZone18);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = dateTimeZone38.getName((long) 11, locale41);
        boolean boolean44 = dateTimeZone38.isStandardOffset(3024000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        int int47 = dateTimeZone38.getOffsetFromLocal((long) 924);
        org.joda.time.Interval interval48 = localDate37.toInterval(dateTimeZone38);
        java.util.TimeZone timeZone49 = dateTimeZone38.toTimeZone();
        long long51 = dateTimeZone38.previousTransition(1496560659993778L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1496560659993778L + "'", long51 == 1496560659993778L);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        boolean boolean19 = dateTime17.isEqual((long) 292278993);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(6974852348000L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Interval interval47 = interval44.withPeriodBeforeEnd(readablePeriod46);
        boolean boolean48 = interval47.isAfterNow();
        boolean boolean49 = dateTimeZone36.equals((java.lang.Object) interval47);
        org.joda.time.DateTime dateTime50 = timeOfDay21.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTime dateTime51 = dateTime17.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(0);
        int int54 = dateTime51.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(8, 621, 924, 5970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 621 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        boolean boolean17 = timeOfDay13.isAfter((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.minus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withPeriodAdded(readablePeriod20, 10);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay19.minuteOfHour();
        int int24 = property23.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology58 = dateTime36.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.Chronology chronology61 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        boolean boolean63 = durationFieldType26.isSupported(chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withChronology(chronology61);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology61.getDateTimeMillis(53, 840, 55, 600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 840 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property12 = localDate7.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        int int8 = timeOfDay1.size();
        java.lang.String str10 = timeOfDay1.toString("+00:00:00.010");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        boolean boolean17 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = timeOfDay14.indexOf(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay14.plusMillis(0);
        int int22 = timeOfDay21.size();
        int[] intArray23 = timeOfDay21.getValues();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay21.plusMillis(575);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay21.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        org.joda.time.TimeOfDay timeOfDay28 = property26.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[9, 39, 36, 609]");
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.minusMonths(54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withMonthOfYear(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(4);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(70);
        int int30 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime27.withYear((int) 'u');
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfEra(35);
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int36 = property11.get();
        org.joda.time.TimeOfDay timeOfDay38 = property11.addWrapFieldToCopy(1969);
        int int39 = property11.get();
        java.util.Locale locale43 = new java.util.Locale("FRA", "T09:35:17.686", "dayOfYear");
        int int44 = property11.getMaximumShortTextLength(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property11.getFieldType();
        int int46 = property11.get();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 39 + "'", int36 == 39);
        org.junit.Assert.assertNotNull(timeOfDay38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 39 + "'", int39 == 39);
        org.junit.Assert.assertEquals(locale43.toString(), "fra_T09:35:17.686_dayOfYear");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 39 + "'", int46 == 39);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZone(dateTimeZone5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 55);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer9, (long) 963);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateTime dateTime30 = dateTime11.withZone(dateTimeZone29);
        int int32 = dateTimeZone29.getOffsetFromLocal((long) 999);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths(273);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        int int10 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        int int12 = localDate6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withMillis((long) (short) 100);
        int int51 = dateMidnight46.getWeekOfWeekyear();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readablePeriod13, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate62 = localDate60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.getWeekyear();
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.LocalDate localDate69 = localDate6.minus((org.joda.time.ReadablePeriod) period58);
        int int70 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod71 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTimeField dateTimeField74 = yearMonthDay2.getField(2);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay2);
        int int76 = yearMonthDay2.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval8.toDurationMillis();
        boolean boolean13 = interval8.containsNow();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate20 = localDate15.plusYears((int) (byte) 1);
        int int21 = localDate15.getWeekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.DateTime dateTime25 = yearMonthDay24.toDateTimeAtMidnight();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay24.toDateMidnight(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.getName((long) 11);
        org.joda.time.DateTime dateTime33 = localDate15.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime33.era();
        boolean boolean36 = interval8.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime33.plusMinutes(3);
        org.joda.time.DateTime.Property property39 = dateTime33.dayOfMonth();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology46 = localDate44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.millisOfSecond();
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        org.joda.time.DurationField durationField49 = dateTimeField47.getLeapDurationField();
        long long51 = dateTimeField47.remainder((long) 16);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str55 = dateTimeField47.getAsShortText((int) (byte) -1, locale53);
        java.util.Calendar.Builder builder56 = builder40.setLocale(locale53);
        java.lang.String str57 = property39.getAsShortText(locale53);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusSeconds(21);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(50);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours(2922789);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMillisOfSecond((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withSecondOfMinute((int) '#');
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(397, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 117");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        java.util.Calendar calendar13 = builder12.build();
        calendar13.setMinimalDaysInFirstWeek(52);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields(calendar13);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.millisOfSecond();
        int int18 = property17.getMinimumValue();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=24016348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=52,ERA=1,YEAR=2731,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=19,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+35:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        calendar6.set(70, 19, (-1), 1, (-1), (int) (short) 1);
        calendar6.roll(0, (int) '4');
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        int int18 = calendar6.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar6.getActualMinimum(34546);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34546");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=71,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=59,SECOND=1,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        java.util.Date date1 = new java.util.Date(970L);
        java.util.Date date7 = new java.util.Date(2922789, 31, 30, 7, 8);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        int int10 = date8.getDay();
        int int11 = date8.getSeconds();
        boolean boolean12 = date7.after(date8);
        int int13 = date8.getSeconds();
        long long14 = date8.getTime();
        boolean boolean15 = date1.after(date8);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 30 07:08:00 UTC 2924691");
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:39:37 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37 + "'", int9 == 37);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37 + "'", int11 == 37);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37 + "'", int13 == 37);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572377232L + "'", long14 == 1644572377232L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category20, locale23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property18.setCopy("1805", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1805 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(70);
        int int16 = dateTime13.getSecondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(19);
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withYear(11);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withWeekyear(58);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        long long38 = interval37.getStartMillis();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = interval37.withDurationBeforeEnd(readableDuration39);
        long long41 = interval37.toDurationMillis();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval37.toPeriod(periodType42);
        int int44 = period43.size();
        org.joda.time.MutablePeriod mutablePeriod45 = period43.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime59 = dateTime55.minusMonths(4);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillisOfDay(70);
        int int62 = dateTime59.getSecondOfMinute();
        org.joda.time.DateTime dateTime64 = dateTime59.withYear((int) 'u');
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight25.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 34536);
        org.joda.time.Period period68 = period43.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        boolean boolean17 = timeOfDay13.isAfter((org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.minus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withPeriodAdded(readablePeriod20, 10);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay19.minuteOfHour();
        int int24 = property23.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTimeZone30.getName((long) (byte) 10, locale32);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone30);
        org.joda.time.Interval interval35 = interval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval34.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 1, (long) 7, chronology53);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = dateTime36.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology58 = dateTime36.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.Chronology chronology61 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfEra();
        boolean boolean63 = durationFieldType26.isSupported(chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withChronology(chronology61);
        boolean boolean65 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology67 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology68 = dateTimeFormatter2.getChronolgy();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(chronology67);
        org.junit.Assert.assertNull(chronology68);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded(readableDuration27, (int) (short) -1);
        int int30 = dateTime26.getYearOfEra();
        org.joda.time.DateTime dateTime32 = dateTime26.withWeekOfWeekyear(5);
        org.joda.time.DateTime.Property property33 = dateTime26.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = dateTimeZone55.getName((long) (byte) 10, locale57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone55);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.joda.time.DateTime dateTime61 = interval59.getStart();
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfWeek(4);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime61.toDateTime(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) dateTime45, dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime35.toMutableDateTime(dateTimeZone66);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = dateTimeFormatter12.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime69, "T09:37:59.133", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1969 + "'", int30 == 1969);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.010" + "'", str58, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.DateTime dateTime18 = property16.setCopy(19);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        boolean boolean26 = durationFieldType19.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(39);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int33 = dateTime29.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime29.plusMillis(2022);
        int int36 = property16.getDifference((org.joda.time.ReadableInstant) dateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = property16.setCopy("T09:36:00.624");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:36:00.624\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        java.lang.StringBuffer stringBuffer14 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate16.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withWeekyear(3);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate28 = localDate26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtStartOfDay();
        int int30 = localDate26.getWeekyear();
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtStartOfDay();
        int int32 = localDate26.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = dateTimeZone37.getName((long) (byte) 10, locale39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone37);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfWeek(4);
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight66.withMillis((long) (short) 100);
        int int71 = dateMidnight66.getWeekOfWeekyear();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readablePeriod33, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 1, (long) 7, chronology75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval76.toPeriod(periodType77);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate82 = localDate80.plusMonths((int) '4');
        org.joda.time.DateTime dateTime83 = localDate80.toDateTimeAtStartOfDay();
        int int84 = localDate80.getWeekyear();
        org.joda.time.DateTime dateTime85 = localDate80.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period78, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight66.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 6);
        org.joda.time.LocalDate localDate89 = localDate26.minus((org.joda.time.ReadablePeriod) period78);
        int int90 = period78.size();
        org.joda.time.LocalDate localDate92 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 35);
        int int93 = localDate21.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer14, (org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5 + "'", int93 == 5);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList12);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((java.lang.Object) str14, chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(604800000L, 6974852348000L, chronology20);
        org.joda.time.DurationField durationField24 = chronology20.months();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1644572143252L, chronology20);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.LocalDate localDate33 = localDate29.minusDays(1);
        org.joda.time.LocalDate.Property property34 = localDate29.monthOfYear();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTime.Property property49 = dateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime45.getZone();
        org.joda.time.DateTime dateTime51 = localDate29.toDateTime(localTime35, dateTimeZone50);
        java.util.Locale.LanguageRange languageRange53 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] { languageRange53 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList61);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate67 = localDate65.withDayOfYear(11);
        org.joda.time.LocalDate.Property property68 = localDate67.dayOfMonth();
        org.joda.time.Chronology chronology69 = localDate67.getChronology();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((java.lang.Object) str63, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.dayOfWeek();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology73);
        org.joda.time.DateTime dateTime75 = yearMonthDay74.toDateTimeAtMidnight();
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        int int79 = dateTimeZone77.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight80 = yearMonthDay74.toDateMidnight(dateTimeZone77);
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = dateTimeField71.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay74, 1, locale82);
        long long86 = dateTimeField71.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = dateTimeField71.getType();
        boolean boolean88 = localDate29.isSupported(dateTimeFieldType87);
        int int89 = dateMidnight25.get(dateTimeFieldType87);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight25.withWeekOfWeekyear(25);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "lun" + "'", str83, "lun");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1468800017L + "'", long86 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertNotNull(dateMidnight91);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((java.lang.Object) str15, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 22, chronology21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology26);
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay27.toDateMidnight(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.minus(readablePeriod34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.year();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.YearMonthDay yearMonthDay38 = property36.withMaximumValue();
        long long40 = chronology21.set((org.joda.time.ReadablePartial) yearMonthDay38, (long) 2000);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) ' ', chronology21);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType0.getField(chronology21);
        java.lang.String str43 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223371985593602000L + "'", long40 == 9223371985593602000L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyearOfCentury" + "'", str43, "weekyearOfCentury");
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusMonths(0);
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfSecond(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter11.getPrinter();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = dateTime23.plusWeeks(13);
        org.joda.time.DateTime dateTime33 = dateTime23.withWeekyear((int) (short) 1);
        org.joda.time.DateTime.Property property34 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime36 = property34.setCopy(28);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone56);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getStart();
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfWeek(4);
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime68 = dateTime62.toDateTime(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, dateTimeZone67);
        org.joda.time.DateMidnight.Property property70 = dateMidnight69.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight72 = property70.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight73 = property70.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight74 = property70.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getStart();
        org.joda.time.DateTime dateTime86 = dateTime84.withDayOfWeek(4);
        org.joda.time.DateTime dateTime87 = dateTime84.toDateTime();
        org.joda.time.DateTime.Property property88 = dateTime84.dayOfYear();
        java.lang.String str89 = property88.toString();
        org.joda.time.DateTimeField dateTimeField90 = property88.getField();
        boolean boolean91 = dateTimeField90.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = dateTimeField90.getType();
        org.joda.time.DateMidnight.Property property93 = dateMidnight74.property(dateTimeFieldType92);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight74.plusMonths(0);
        long long96 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DateTime dateTime97 = property34.roundHalfEvenCopy();
        org.joda.time.DurationField durationField98 = property34.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Property[dayOfYear]" + "'", str89, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'u');
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 15);
        org.joda.time.Chronology chronology13 = dateTimeFormatter10.getChronolgy();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(11);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType1.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) 604800000L, chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = localDate13.toDateTimeAtStartOfDay();
        int int17 = localDate13.getWeekyear();
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtStartOfDay();
        int int19 = localDate13.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.DateTime dateTime30 = interval28.getStart();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfWeek(4);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime46.toDateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight53.withMillis((long) (short) 100);
        int int58 = dateMidnight53.getWeekOfWeekyear();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readablePeriod20, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 1, (long) 7, chronology62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval63.toPeriod(periodType64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate69 = localDate67.plusMonths((int) '4');
        org.joda.time.DateTime dateTime70 = localDate67.toDateTimeAtStartOfDay();
        int int71 = localDate67.getWeekyear();
        org.joda.time.DateTime dateTime72 = localDate67.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period65, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight53.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 6);
        org.joda.time.LocalDate localDate76 = localDate13.minus((org.joda.time.ReadablePeriod) period65);
        int int77 = localDate13.getCenturyOfEra();
        org.joda.time.LocalDate localDate79 = localDate13.withWeekyear(2);
        org.joda.time.ReadablePartial readablePartial80 = null;
        org.joda.time.LocalDate localDate81 = localDate79.withFields(readablePartial80);
        java.util.Locale.Category category83 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale84 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category83, locale84);
        java.util.Locale locale86 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category83, locale86);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale91 = java.util.Locale.FRANCE;
        java.lang.String str92 = dateTimeZone89.getName((long) (byte) 10, locale91);
        boolean boolean93 = locale91.hasExtensions();
        java.util.Locale locale95 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str96 = locale91.getDisplayScript(locale95);
        java.util.Locale.setDefault(category83, locale95);
        java.lang.String str98 = dateTimeField11.getAsShortText(readablePartial80, 2233, locale95);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 19 + "'", int77 == 19);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + category83 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category83.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00:00.010" + "'", str92, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2233" + "'", str98, "2233");
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfMonth();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(1);
        org.joda.time.LocalDate.Property property24 = localDate19.monthOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime35.getZone();
        org.joda.time.DateTime dateTime41 = localDate19.toDateTime(localTime25, dateTimeZone40);
        org.joda.time.Interval interval42 = yearMonthDay15.toInterval(dateTimeZone40);
        int int44 = dateTimeZone40.getOffsetFromLocal(9223371985593602010L);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now(dateTimeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        int int2 = yearMonthDay1.getMonthOfYear();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay1.dayOfMonth();
        int int5 = yearMonthDay1.getDayOfMonth();
        org.joda.time.Chronology chronology6 = yearMonthDay1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfYear();
        java.lang.String str21 = property20.toString();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.DateTime dateTime23 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime24 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.Interval interval26 = yearMonthDay1.toInterval(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 55, dateTimeZone25);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone48);
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfWeek(4);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime60 = dateTime54.toDateTime(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        org.joda.time.Interval interval71 = interval70.toInterval();
        org.joda.time.DateTime dateTime72 = interval70.getStart();
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(0);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 1, (long) 7, chronology77);
        org.joda.time.Duration duration79 = interval78.toDuration();
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight62.plus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight27.minus((org.joda.time.ReadableDuration) duration79);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfYear]" + "'", str21, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight82);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate5 = localDate3.plusMonths((int) '4');
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate8 = localDate3.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        int int29 = dateTimeZone26.getOffsetFromLocal((long) '#');
        long long31 = dateTimeZone26.convertUTCToLocal((long) 11);
        org.joda.time.Chronology chronology32 = chronology9.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(604800192L, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType0.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.hourOfDay();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 21L + "'", long31 == 21L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        int int13 = dateTimeField10.getDifference((long) 11, (long) 4);
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeField10.getAsShortText(1644572124561L, locale15);
        java.lang.String str18 = property3.getAsShortText(locale15);
        org.joda.time.YearMonthDay yearMonthDay20 = property3.addWrapFieldToCopy((int) '#');
        java.lang.String str21 = property3.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = property3.getYearMonthDay();
        int int23 = property3.getMaximumValue();
        int int24 = property3.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay26 = property3.setCopy((-907));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -907 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "561" + "'", str17, "561");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "11" + "'", str18, "11");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfMonth]" + "'", str21, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 28 + "'", int23 == 28);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 28 + "'", int24 == 28);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property5.addToCopy(575);
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        long long11 = dateTimeField9.roundFloor((long) 909);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate8.withMonthOfYear(579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval8.getStartMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval8.withDurationBeforeEnd(readableDuration10);
        long long12 = interval11.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime22.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        boolean boolean30 = interval11.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = interval11.getStart();
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        int int33 = dateTime31.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = property13.setCopy(19);
        org.joda.time.DateTime dateTime32 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(0L, chronology20);
        int int22 = dateMidnight21.getYearOfEra();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime48.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime32, dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.minusHours((-1));
        boolean boolean58 = interval19.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime57.plusMinutes(0);
        org.joda.time.DateTime dateTime63 = dateTime57.withYearOfEra(7);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        boolean boolean9 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 360);
        java.io.Writer writer12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(19);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer12, (org.joda.time.ReadablePartial) yearMonthDay19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        java.util.Locale locale3 = new java.util.Locale("millisOfSecond", "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010", "Japanese");
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "millisofsecond_1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010_Japanese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "millisofsecond" + "'", str4, "millisofsecond");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010" + "'", str5, "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.011+00:00:00.010");
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        org.joda.time.DateMidnight.Property property55 = dateMidnight51.weekyear();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight51.withFieldAdded(durationFieldType56, 22);
        java.lang.String str59 = durationFieldType56.toString();
        java.lang.String str60 = durationFieldType56.getName();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "halfdays" + "'", str59, "halfdays");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "halfdays" + "'", str60, "halfdays");
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar54 = dateMidnight51.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = gregorianCalendar54.isSet(44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 44");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate22 = localDate17.minusDays(7);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(3);
        org.joda.time.DateTime dateTime25 = dateTime15.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime26 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime27.withLaterOffsetAtOverlap();
        int int29 = dateTime28.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale63.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter61.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter66.getParser();
        boolean boolean68 = dateTimeFormatter66.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "IT" + "'", str64, "IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(dateTimeParser67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.minusHours((-1));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.Interval interval43 = interval42.toInterval();
        org.joda.time.DateTime dateTime44 = interval42.getStart();
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime dateTime50 = dateTime34.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime34.withYearOfCentury(33);
        org.joda.time.DateTime dateTime54 = dateTime52.minusYears(1003);
        org.joda.time.DateTime dateTime56 = dateTime54.withSecondOfMinute(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateTime dateTime30 = dateTime11.withZone(dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime30.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = property31.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime33 = dateTime32.toLocalDateTime();
        org.joda.time.DateTime dateTime35 = dateTime32.plus(1961L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(11);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        boolean boolean9 = durationFieldType2.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) 1969, chronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.DateTime dateTime20 = yearMonthDay19.toDateTimeAtMidnight();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay19.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone22);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(11);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfWeek();
        org.joda.time.LocalDate localDate34 = localDate31.minusMonths((int) '4');
        int int35 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate34);
        int int36 = localDate34.getYearOfCentury();
        org.joda.time.LocalDate localDate38 = localDate34.minusMonths(32770);
        java.util.Locale.LanguageRange languageRange40 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] { languageRange40 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String str50 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList48);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate54 = localDate52.withDayOfYear(11);
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfMonth();
        org.joda.time.Chronology chronology56 = localDate54.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((java.lang.Object) str50, chronology56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 1, (long) 7, chronology60);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = interval61.toPeriod(periodType62);
        long long66 = chronology56.add((org.joda.time.ReadablePeriod) period63, 87L, 1);
        java.util.Locale.LanguageRange languageRange68 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] { languageRange68 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strList76);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate82 = localDate80.withDayOfYear(11);
        org.joda.time.LocalDate.Property property83 = localDate82.dayOfMonth();
        org.joda.time.Chronology chronology84 = localDate82.getChronology();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((java.lang.Object) str78, chronology84);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Interval interval89 = new org.joda.time.Interval((long) 1, (long) 7, chronology88);
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = interval89.toPeriod(periodType90);
        long long94 = chronology84.add((org.joda.time.ReadablePeriod) period91, 87L, 1);
        int[] intArray97 = chronology56.get((org.joda.time.ReadablePeriod) period91, (long) 10, (long) 13);
        int int98 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate38, intArray97);
        org.joda.time.DateTimeField[] dateTimeFieldArray99 = localDate38.getFields();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 65 + "'", int36 == 65);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 93L + "'", long66 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 93L + "'", long94 == 93L);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray99);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        java.util.Locale.LanguageRange languageRange9 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] { languageRange9 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList17);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(11);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((java.lang.Object) str19, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 1, (long) 7, chronology29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval30.toPeriod(periodType31);
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period32, 87L, 1);
        java.util.Locale.LanguageRange languageRange37 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] { languageRange37 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList45);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(11);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.joda.time.Chronology chronology53 = localDate51.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((java.lang.Object) str47, chronology53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 1, (long) 7, chronology57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        long long63 = chronology53.add((org.joda.time.ReadablePeriod) period60, 87L, 1);
        int[] intArray66 = chronology25.get((org.joda.time.ReadablePeriod) period60, (long) 10, (long) 13);
        org.joda.time.DurationField durationField67 = chronology25.months();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) 'u', chronology25);
        org.joda.time.DateTimeField dateTimeField69 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology25.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(696, 793, 40, (-1), 611, 1990, 57, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 93L + "'", long35 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 93L + "'", long63 == 93L);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.dayOfWeek();
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        boolean boolean14 = durationFieldType7.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(23, 3, 31, 0, 6, chronology13);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(11);
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfMonth();
        org.joda.time.Chronology chronology28 = localDate26.getChronology();
        org.joda.time.LocalDate localDate30 = localDate26.minusDays(1);
        org.joda.time.LocalDate.Property property31 = localDate26.monthOfYear();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfWeek(4);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime42.getZone();
        org.joda.time.DateTime dateTime48 = localDate26.toDateTime(localTime32, dateTimeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 106, dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getNameKey(292278983L);
        org.joda.time.Chronology chronology54 = chronology13.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfDay();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) ' ', (long) 13896, chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.minuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, dateTimeZone43);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = property46.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = property46.getAsText(locale52);
        java.lang.String str56 = property11.getAsShortText(locale52);
        java.util.Locale locale60 = new java.util.Locale("dayOfYear", "hi!", "+00:00:00.010");
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = property11.getAsText(locale60);
        org.joda.time.YearMonthDay yearMonthDay63 = property11.withMinimumValue();
        org.joda.time.Interval interval64 = yearMonthDay63.toInterval();
        org.joda.time.MutableInterval mutableInterval65 = interval64.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970" + "'", str56, "1970");
        org.junit.Assert.assertEquals(locale60.toString(), "dayofyear_HI!_+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(mutableInterval65);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("T09:36:46.071");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t09:36:46.071");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1644572147727L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withMonthOfYear(34703);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34703 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 52);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) 13, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.centuryOfEra();
        long long15 = dateTimeField13.roundHalfCeiling(0L);
        long long17 = dateTimeField13.roundHalfFloor((-1450L));
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = locale19.getDisplayVariant();
        java.lang.String str21 = dateTimeField13.getAsText(793, locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeOfDay1.toString("", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 946684800000L + "'", long15 == 946684800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 946684800000L + "'", long17 == 946684800000L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "793" + "'", str21, "793");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        long long35 = dateTimeZone31.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(0L, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(chronology50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = timeOfDay51.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay51.getFieldTypes();
        org.joda.time.DateTime dateTime54 = dateTime49.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.DateTime.Property property55 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime49.withMinuteOfHour(55);
        boolean boolean58 = dateMidnight36.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime57.getDayOfWeek();
        int int60 = dateTime57.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 87L + "'", long35 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("69");
        org.joda.time.LocalDate localDate3 = localDate1.withYear(264);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        long long5 = property4.remainder();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        boolean boolean37 = dateMidnight32.isBeforeNow();
        int int38 = dateMidnight32.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, 19);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(1644572138904L, dateTimeZone42);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = dateTimeZone42.getName(150810L, locale45);
        java.util.Calendar calendar48 = dateMidnight32.toCalendar(locale45);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = calendar48.getMaximum((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:19" + "'", str47, "+07:19");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        boolean boolean32 = dateTimeField19.isLenient();
        org.joda.time.DurationField durationField33 = dateTimeField19.getLeapDurationField();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = dateTimeField19.getAsShortText((long) 33, locale35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.minusMonths(19);
        int int42 = yearMonthDay39.size();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay39.plus(readablePeriod43);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay39.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusDays(269);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay48.toDateMidnight();
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight51 = property50.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight53 = property50.setCopy(17);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay();
        int int55 = yearMonthDay54.getMonthOfYear();
        org.joda.time.LocalDate localDate56 = yearMonthDay54.toLocalDate();
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay54.dayOfMonth();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate61 = localDate59.withDayOfYear(11);
        org.joda.time.LocalDate.Property property62 = localDate61.dayOfMonth();
        org.joda.time.Chronology chronology63 = localDate61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.millisOfSecond();
        int int67 = dateTimeField64.getDifference((long) 11, (long) 4);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.lang.String str70 = locale69.getDisplayCountry();
        java.lang.String str71 = dateTimeField64.getAsShortText(1644572124561L, locale69);
        java.lang.String str72 = property57.getAsShortText(locale69);
        java.lang.String str73 = property50.getAsText(locale69);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate77 = localDate75.plusMonths((int) '4');
        org.joda.time.DateTime dateTime78 = localDate75.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate80 = localDate75.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property81 = localDate80.weekyear();
        org.joda.time.LocalDate localDate83 = localDate80.withWeekyear(3);
        org.joda.time.LocalDate.Property property84 = localDate80.dayOfYear();
        java.util.Locale locale85 = java.util.Locale.ITALY;
        boolean boolean86 = locale85.hasExtensions();
        int int87 = property84.getMaximumShortTextLength(locale85);
        boolean boolean88 = locale85.hasExtensions();
        java.lang.String str89 = locale69.getDisplayCountry(locale85);
        int int90 = dateTimeField19.getMaximumTextLength(locale69);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Do" + "'", str36, "Do");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "561" + "'", str71, "561");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "11" + "'", str72, "11");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "19" + "'", str73, "19");
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Regno Unito" + "'", str89, "Regno Unito");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        java.util.Calendar.Builder builder18 = builder8.setTimeZone(timeZone17);
        java.util.Calendar calendar19 = builder18.build();
        long long20 = calendar19.getTimeInMillis();
        java.lang.String str21 = calendar19.toString();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-61779456000010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=12,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=17,DAY_OF_YEAR=108,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61779456000010L) + "'", long20 == (-61779456000010L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.util.GregorianCalendar[time=-61779456000010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=12,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=17,DAY_OF_YEAR=108,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]" + "'", str21, "java.util.GregorianCalendar[time=-61779456000010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=12,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=17,DAY_OF_YEAR=108,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        int int5 = yearMonthDay2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay2.plus(readablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.plusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(269);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((-17065L));
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfMonth();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.roundCeilingCopy();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = property25.getAsText(locale27);
        int int29 = property25.get();
        org.joda.time.LocalDate localDate30 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate31 = property25.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 1, (long) 7, chronology58);
        org.joda.time.Duration duration60 = interval59.toDuration();
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime41.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology63 = dateTime41.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.seconds();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.yearOfEra();
        org.joda.time.Chronology chronology66 = chronology63.withUTC();
        boolean boolean67 = property25.equals((java.lang.Object) chronology63);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight18.withChronology(chronology63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateMidnight68.toString("year");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u661f\u671f\u65e5" + "'", str28, "\u661f\u671f\u65e5");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = dateTimeField15.getAsText(14, locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone8);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.util.Date date30 = new java.util.Date((int) (short) 0, 0, (int) (short) 1);
        java.time.Instant instant31 = date30.toInstant();
        int int32 = date30.getHours();
        calendar25.setTime(date30);
        int int34 = date30.getTimezoneOffset();
        java.lang.Object obj35 = date30.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14" + "'", str23, "14");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572379179,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=39,MILLISECOND=189,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-2208988800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1900,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date30.toString(), "Mon Jan 01 00:00:00 UTC 1900");
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "Mon Jan 01 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "Mon Jan 01 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "Mon Jan 01 00:00:00 UTC 1900");
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        org.joda.time.TimeOfDay timeOfDay14 = property11.addNoWrapToCopy(8);
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.withMinuteOfHour(1990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1990 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekyear();
        boolean boolean18 = dateMidnight16.isBeforeNow();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone25);
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths(11);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 1, (long) 7, chronology35);
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval41.toPeriod(periodType42);
        org.joda.time.DateTime dateTime44 = dateTime37.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology46);
        org.joda.time.DateMidnight dateMidnight48 = yearMonthDay47.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight48.toYearMonthDay();
        int int50 = yearMonthDay49.getYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        long long60 = interval59.getStartMillis();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval59.withDurationBeforeEnd(readableDuration61);
        long long63 = interval59.toDurationMillis();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval59.toPeriod(periodType64);
        int int66 = period65.size();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay49.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.LocalDate localDate69 = localDate30.plus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight16.plus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.MutablePeriod mutablePeriod71 = period65.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = period65.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(mutablePeriod71);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(31536034534L, 1644572225039L);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeZone5.getName((long) (byte) 10, locale7);
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields(calendar10);
        calendar10.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        boolean boolean27 = calendar10.before((java.lang.Object) interval25);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        org.joda.time.Interval interval52 = interval51.toInterval();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfWeek(4);
        org.joda.time.DateTime dateTime56 = dateTime53.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime59 = dateTime53.toDateTime(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, dateTimeZone58);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = property61.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight64 = property61.withMinimumValue();
        boolean boolean65 = interval25.isAfter((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = dateTimeZone69.getName((long) (byte) 10, locale71);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone69);
        org.joda.time.Interval interval74 = interval73.toInterval();
        long long75 = interval74.getStartMillis();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        long long78 = interval74.toDurationMillis();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        int int81 = period80.size();
        org.joda.time.MutablePeriod mutablePeriod82 = period80.toMutablePeriod();
        int int84 = mutablePeriod82.getValue(5);
        org.joda.time.Interval interval85 = interval25.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod82);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) 9, (long) 1970);
        boolean boolean89 = interval85.isAfter((org.joda.time.ReadableInterval) interval88);
        boolean boolean90 = interval88.isBeforeNow();
        boolean boolean92 = interval88.isBefore((long) 34265);
        boolean boolean93 = interval2.isBefore((org.joda.time.ReadableInterval) interval88);
        org.joda.time.DateTime dateTime94 = interval2.getEnd();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=39,MILLISECOND=279,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.010" + "'", str72, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime22 = localDate12.toDateTime(localTime13, dateTimeZone17);
        int int23 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate.Property property24 = localDate12.year();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset((long) (byte) 10);
        boolean boolean29 = dateTimeZone26.isFixed();
        int int31 = dateTimeZone26.getOffsetFromLocal((long) 10);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 'a', false, 187200001L);
        boolean boolean36 = dateTimeZone26.isFixed();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset((long) (byte) 10);
        boolean boolean41 = dateTimeZone38.isFixed();
        int int43 = dateTimeZone38.getOffsetFromLocal((long) 10);
        long long45 = dateTimeZone38.previousTransition((long) 17);
        long long47 = dateTimeZone26.getMillisKeepLocal(dateTimeZone38, (long) 13);
        org.joda.time.DateTime dateTime48 = localDate12.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTime();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 87L + "'", long35 == 87L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 17L + "'", long45 == 17L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 13L + "'", long47 == 13L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        int int5 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withWeekyear(6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMonths(4);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(70);
        int int24 = dateTime21.getSecondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.minusMonths(19);
        org.joda.time.DateTime dateTime30 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay29.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.withYear(11);
        int int34 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 1, (long) 7, chronology37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval38.toPeriod(periodType39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight33.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate localDate42 = localDate7.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period40.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = period40.getValue(793);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 793");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime18.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = dateTime18.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime18.withWeekOfWeekyear((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.LocalDate localDate14 = localDate10.minusDays(1);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (org.joda.time.ReadablePartial) localDate14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime9.minusHours((int) (byte) -1);
        org.joda.time.DateTime.Property property15 = dateTime9.hourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate22 = localDate17.plusYears((int) (byte) 1);
        int int23 = localDate17.getWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology25);
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight32 = yearMonthDay26.toDateMidnight(dateTimeZone29);
        java.lang.String str34 = dateTimeZone29.getName((long) 11);
        org.joda.time.DateTime dateTime35 = localDate17.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone29);
        int int38 = dateTimeZone29.getOffsetFromLocal(261L);
        org.joda.time.DateTime dateTime39 = dateTime9.toDateTime(dateTimeZone29);
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(11);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfMonth();
        org.joda.time.Chronology chronology47 = localDate45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfSecond();
        org.joda.time.DurationField durationField49 = dateTimeField48.getLeapDurationField();
        org.joda.time.DurationField durationField50 = dateTimeField48.getLeapDurationField();
        long long52 = dateTimeField48.remainder((long) 16);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getDisplayVariant();
        java.lang.String str56 = dateTimeField48.getAsShortText((int) (byte) -1, locale54);
        java.util.Calendar.Builder builder57 = builder41.setLocale(locale54);
        java.util.Locale.LanguageRange languageRange59 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] { languageRange59 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList67);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate73 = localDate71.withDayOfYear(11);
        org.joda.time.LocalDate.Property property74 = localDate73.dayOfMonth();
        org.joda.time.Chronology chronology75 = localDate73.getChronology();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((java.lang.Object) str69, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.dayOfWeek();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology79);
        org.joda.time.DateTime dateTime81 = yearMonthDay80.toDateTimeAtMidnight();
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        int int85 = dateTimeZone83.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight86 = yearMonthDay80.toDateMidnight(dateTimeZone83);
        java.util.Locale locale88 = java.util.Locale.ITALY;
        java.lang.String str89 = dateTimeField77.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay80, 1, locale88);
        java.lang.String str90 = locale88.getScript();
        java.lang.String str91 = locale54.getDisplayScript(locale88);
        java.lang.String str92 = locale88.getVariant();
        java.lang.String str93 = dateTimeZone29.getName(6127761962000L, locale88);
        java.lang.String str94 = locale88.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "lun" + "'", str89, "lun");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.010" + "'", str93, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "it" + "'", str94, "it");
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTime.Property property19 = dateTime13.millisOfSecond();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTime dateTime22 = property19.setCopy(126);
        org.joda.time.DateTime.Property property23 = dateTime22.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int[] intArray6 = timeOfDay1.getValues();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.plusSeconds((int) (short) 10);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale10.getISO3Language();
        java.lang.String str15 = locale10.getCountry();
        java.lang.String str16 = timeOfDay1.toString("0", locale10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean21 = timeOfDay18.isSupported(dateTimeFieldType20);
        java.lang.String str22 = dateTimeFieldType20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property23 = timeOfDay1.property(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[9, 39, 39, 538]");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ita" + "'", str14, "ita");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "IT" + "'", str15, "IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfWeek" + "'", str22, "dayOfWeek");
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(6, 2922789, 724, 173, 1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 173 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        int int6 = timeOfDay3.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = timeOfDay3.toString(dateTimeFormatter7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay3.secondOfMinute();
        org.joda.time.LocalTime localTime13 = timeOfDay3.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay3.withMinuteOfHour(963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 963 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:39:39.571" + "'", str8, "T09:39:39.571");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtStartOfDay();
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate1.plusWeeks(100);
        int int10 = localDate9.getMonthOfYear();
        org.joda.time.LocalDate localDate12 = localDate9.minusWeeks(1969);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Locale locale28 = locale24.stripExtensions();
        java.lang.String str29 = yearMonthDay15.toString("1", locale28);
        boolean boolean30 = localDate9.equals((java.lang.Object) yearMonthDay15);
        org.joda.time.LocalDate localDate31 = yearMonthDay15.toLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "France" + "'", str27, "France");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(575);
        java.lang.Appendable appendable10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (short) -1);
        int int28 = dateTime24.getYearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime24.withWeekOfWeekyear(5);
        int int31 = dateTime24.getMonthOfYear();
        org.joda.time.DateTime dateTime33 = dateTime24.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime24.withLaterOffsetAtOverlap();
        int int35 = dateTime34.getYear();
        org.joda.time.DateTime dateTime37 = dateTime34.minusMinutes(15);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval45.withPeriodBeforeEnd(readablePeriod47);
        boolean boolean49 = interval48.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        boolean boolean60 = interval48.overlaps((org.joda.time.ReadableInterval) interval57);
        org.joda.time.MutableInterval mutableInterval61 = interval48.toMutableInterval();
        org.joda.time.Duration duration62 = interval48.toDuration();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 1, (long) 7, chronology65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Interval interval68 = interval66.toInterval();
        boolean boolean69 = interval48.overlaps((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Duration duration70 = interval68.toDuration();
        org.joda.time.DateTime dateTime71 = dateTime34.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime34.minusSeconds((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable10, (org.joda.time.ReadableInstant) dateTime73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1969 + "'", int35 == 1969);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = interval7.withPeriodBeforeEnd(readablePeriod9);
        boolean boolean11 = interval10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        boolean boolean22 = interval10.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime23 = interval19.getEnd();
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        long long46 = interval45.getStartMillis();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = interval45.withDurationBeforeEnd(readableDuration47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.Interval interval55 = interval48.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Duration duration56 = interval55.toDuration();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration56);
        int int58 = dateMidnight32.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight9 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        java.lang.String str11 = dateTimeZone6.getName((long) 11);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(1644572226084L, dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfYear();
        java.lang.String str17 = property16.toString();
        boolean boolean18 = localDate1.equals((java.lang.Object) str17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.DateTime dateTime29 = interval27.getStart();
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfWeek(4);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeZone39.getName((long) (byte) 10, locale41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone39);
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.DateTime dateTime45 = interval43.getStart();
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfWeek(4);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, dateTimeZone50);
        long long54 = dateTimeZone50.previousTransition(87L);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(0L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight56 = localDate1.toDateMidnight(dateTimeZone50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate58 = localDate1.withEra(34675613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34675613 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[dayOfYear]" + "'", str17, "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 87L + "'", long54 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.Chronology chronology60 = dateTimeFormatter59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfYear();
        boolean boolean63 = dateTimeField61.isLeap(0L);
        long long66 = dateTimeField61.set((long) (byte) -1, 53);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale locale69 = builder68.build();
        java.util.Locale.Builder builder70 = builder68.clear();
        java.util.Locale.Builder builder71 = builder68.clear();
        java.util.Locale.Builder builder73 = builder71.setLanguageTag("francese");
        java.util.Locale.Builder builder76 = builder73.setExtension('a', "");
        java.util.Locale.Builder builder77 = builder76.clearExtensions();
        java.util.Locale locale78 = builder77.build();
        java.lang.String str79 = dateTimeField61.getAsText(1644572157000L, locale78);
        long long81 = dateTimeField61.roundCeiling(864000000L);
        long long84 = dateTimeField61.getDifferenceAsLong(3599990L, (long) 269);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 4492799999L + "'", long66 == 4492799999L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "42" + "'", str79, "42");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 950399990L + "'", long81 == 950399990L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        java.util.Calendar calendar13 = builder12.build();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight49 = property47.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMonthOfYear(3);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight49.withCenturyOfEra(58);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        boolean boolean59 = timeOfDay55.isAfter((org.joda.time.ReadablePartial) timeOfDay57);
        int int60 = timeOfDay57.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = timeOfDay57.toString(dateTimeFormatter61);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay57.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property65 = timeOfDay57.secondOfMinute();
        int int66 = property65.getMinimumValueOverall();
        org.joda.time.DurationField durationField67 = property65.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay69 = property65.addWrapFieldToCopy(16);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight49.withFields((org.joda.time.ReadablePartial) timeOfDay69);
        int[] intArray71 = timeOfDay69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder72 = builder12.setFields(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=24016348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2731,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=19,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "T09:39:39.787" + "'", str62, "T09:39:39.787");
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[9, 39, 55, 787]");
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        java.util.Locale.LanguageRange languageRange11 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange11 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList19);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(11);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfMonth();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((java.lang.Object) str21, chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval32.toPeriod(periodType33);
        long long37 = chronology27.add((org.joda.time.ReadablePeriod) period34, 87L, 1);
        java.util.Locale.LanguageRange languageRange39 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] { languageRange39 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(11);
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfMonth();
        org.joda.time.Chronology chronology55 = localDate53.getChronology();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((java.lang.Object) str49, chronology55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 1, (long) 7, chronology59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval60.toPeriod(periodType61);
        long long65 = chronology55.add((org.joda.time.ReadablePeriod) period62, 87L, 1);
        int[] intArray68 = chronology27.get((org.joda.time.ReadablePeriod) period62, (long) 10, (long) 13);
        org.joda.time.DurationField durationField69 = chronology27.months();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) 'u', chronology27);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        boolean boolean73 = dateTimeZone4.equals((java.lang.Object) chronology72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(41L, dateTimeZone4);
        int int75 = localDate74.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 93L + "'", long37 == 93L);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 93L + "'", long65 == 93L);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 70 + "'", int75 == 70);
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.era();
        int int13 = dateTimeField11.get((-5178038399999L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((java.lang.Object) str17, chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(604800000L, 6974852348000L, chronology23);
        org.joda.time.DurationField durationField27 = chronology23.months();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1644572143252L, chronology23);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(11);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(1);
        org.joda.time.LocalDate.Property property37 = localDate32.monthOfYear();
        org.joda.time.LocalTime localTime38 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone42.getName((long) (byte) 10, locale44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone42);
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.DateTime dateTime48 = interval46.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(4);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTime();
        org.joda.time.DateTime.Property property52 = dateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime48.getZone();
        org.joda.time.DateTime dateTime54 = localDate32.toDateTime(localTime38, dateTimeZone53);
        java.util.Locale.LanguageRange languageRange56 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] { languageRange56 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList64);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate70 = localDate68.withDayOfYear(11);
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfMonth();
        org.joda.time.Chronology chronology72 = localDate70.getChronology();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((java.lang.Object) str66, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.dayOfWeek();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology76);
        org.joda.time.DateTime dateTime78 = yearMonthDay77.toDateTimeAtMidnight();
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        int int82 = dateTimeZone80.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight83 = yearMonthDay77.toDateMidnight(dateTimeZone80);
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.lang.String str86 = dateTimeField74.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay77, 1, locale85);
        long long89 = dateTimeField74.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField74.getType();
        boolean boolean91 = localDate32.isSupported(dateTimeFieldType90);
        int int92 = dateMidnight28.get(dateTimeFieldType90);
        org.joda.time.DateMidnight.Property property93 = dateMidnight2.property(dateTimeFieldType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight95 = property93.setCopy(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "lun" + "'", str86, "lun");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1468800017L + "'", long89 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.LocalDate localDate12 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "71" + "'", str10, "71");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.Duration duration4 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        long long14 = interval13.getStartMillis();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        long long17 = interval13.toDurationMillis();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval13.toPeriod(periodType18);
        int int20 = period19.size();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfWeek();
        org.joda.time.LocalDate localDate33 = property32.roundCeilingCopy();
        int int34 = property25.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate36 = localDate33.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property37 = localDate33.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        java.lang.String str51 = locale49.getISO3Language();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = yearMonthDay40.toString("1", locale53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay40.plusYears(4);
        org.joda.time.DateTime dateTime57 = yearMonthDay56.toDateTimeAtMidnight();
        long long58 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime61 = dateTime57.plusWeeks(70500000);
        org.joda.time.DateTime.Property property62 = dateTime57.monthOfYear();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "France" + "'", str52, "France");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1450L) + "'", long58 == (-1450L));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        int int10 = calendar6.getGreatestMinimum(7);
        calendar6.clear();
        int int13 = calendar6.getMinimum(8);
        int int14 = calendar6.getFirstDayOfWeek();
        int int15 = calendar6.getFirstDayOfWeek();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder16.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder23 = builder16.setWeekDate((int) (short) -1, 13, (int) (short) 10);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(11);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDate27.getChronology();
        org.joda.time.LocalDate localDate31 = localDate27.minusDays(1);
        org.joda.time.LocalDate.Property property32 = localDate27.monthOfYear();
        int int33 = property32.getMinimumValueOverall();
        org.joda.time.LocalDate localDate34 = property32.withMaximumValue();
        org.joda.time.LocalDate localDate36 = property32.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate36.toDateTime(localTime37, dateTimeZone41);
        java.util.TimeZone timeZone47 = dateTimeZone41.toTimeZone();
        java.util.Calendar.Builder builder48 = builder23.setTimeZone(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.DateTime dateTime58 = interval56.getStart();
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfWeek(4);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime58.toDateTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = dateTimeZone68.getName((long) (byte) 10, locale70);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone68);
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.DateTime dateTime74 = interval72.getStart();
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfWeek(4);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime80 = dateTime74.toDateTime(dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((java.lang.Object) dateTime58, dateTimeZone79);
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight84 = property82.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale88 = java.util.Locale.FRANCE;
        java.lang.String str89 = dateTimeZone86.getName((long) (byte) 10, locale88);
        boolean boolean90 = locale88.hasExtensions();
        java.lang.String str91 = property82.getAsText(locale88);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone47, locale88);
        int int93 = calendar6.compareTo(calendar92);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572380013,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=40,MILLISECOND=13,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00:00.010" + "'", str89, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1" + "'", str91, "1");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1644572380013,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=40,MILLISECOND=23,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(34521);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDate4.getFieldType(34536);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34536");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getMinimum((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = property10.withMaximumValue();
        int int12 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572380090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=40,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeZone12.getName((long) (byte) 10, locale14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone12);
        org.joda.time.Interval interval17 = interval16.toInterval();
        boolean boolean18 = interval7.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology19 = interval7.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology22);
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay23.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone26);
        long long33 = chronology19.set((org.joda.time.ReadablePartial) localDate31, (-61747120148658L));
        org.joda.time.LocalDate.Property property34 = localDate31.dayOfYear();
        org.joda.time.LocalDate localDate36 = property34.addWrapFieldToCopy(55);
        org.joda.time.LocalDate localDate37 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths(6);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears(71);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 22251342L + "'", long33 == 22251342L);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) "T09:37:00.235");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T09:37:00.235\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(10);
        java.lang.Appendable appendable11 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime21, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property49 = dateMidnight44.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight51 = property49.addToCopy((long) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = property49.roundFloorCopy();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = localDate54.toDateTimeAtStartOfDay();
        int int58 = property49.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateMidnight dateMidnight59 = property49.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable11, (org.joda.time.ReadableInstant) dateMidnight59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.plusSeconds(1970);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.plusSeconds(273);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay2.plusYears(5);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate13 = localDate9.withYear(34521);
        int int14 = localDate9.getYear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(11);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.LocalDate localDate22 = localDate18.minusDays(1);
        org.joda.time.LocalDate.Property property23 = localDate18.monthOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime34.getZone();
        org.joda.time.DateTime dateTime40 = localDate18.toDateTime(localTime24, dateTimeZone39);
        java.util.Locale.LanguageRange languageRange42 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] { languageRange42 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList50);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(11);
        org.joda.time.LocalDate.Property property57 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology58 = localDate56.getChronology();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((java.lang.Object) str52, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfWeek();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology62);
        org.joda.time.DateTime dateTime64 = yearMonthDay63.toDateTimeAtMidnight();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight69 = yearMonthDay63.toDateMidnight(dateTimeZone66);
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay63, 1, locale71);
        long long75 = dateTimeField60.add(17L, (long) 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField60.getType();
        boolean boolean77 = localDate18.isSupported(dateTimeFieldType76);
        int int78 = localDate9.get(dateTimeFieldType76);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType76.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay2.withFieldAdded(durationFieldType79, 27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "lun" + "'", str72, "lun");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1468800017L + "'", long75 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(durationFieldType79);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate.Property property8 = localDate3.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(13);
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekyear(954);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("jeu.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"jeu.\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight12);
        java.lang.Class<?> wildcardClass14 = dateMidnight12.getClass();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.Object obj3 = locale0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((java.lang.Object) locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CN" + "'", str1, "CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "zh_CN");
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withChronology(chronology4);
        int int6 = dateTimeFormatter2.getDefaultYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.Duration duration42 = interval41.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime44 = dateTime23.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = dateTimeZone48.getName((long) (byte) 10, locale50);
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale50.getDisplayLanguage(locale53);
        java.util.Calendar calendar55 = dateTime44.toCalendar(locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTimeFormatter13.print((org.joda.time.ReadableInstant) dateTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "francese" + "'", str54, "francese");
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-5,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTime dateTime15 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=22,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]", (double) 625);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=625.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        int int5 = localDate3.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate3.minusYears(100);
        java.lang.String str9 = localDate7.toString("31");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.secondOfMinute();
        int int17 = property16.get();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addWrapFieldToCopy(34534);
        org.joda.time.TimeOfDay timeOfDay20 = property16.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDate7.compareTo((org.joda.time.ReadablePartial) timeOfDay20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "31" + "'", str9, "31");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 8);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate17 = localDate12.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone20);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = dateTimeZone20.getName((long) 11, locale23);
        int int25 = property19.getMaximumTextLength(locale23);
        java.lang.String str26 = property19.toString();
        org.joda.time.LocalDate localDate27 = property19.roundHalfFloorCopy();
        java.util.Date date28 = localDate27.toDate();
        long long30 = chronology10.set((org.joda.time.ReadablePartial) localDate27, 66269664034534L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate27.withDayOfWeek(397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 397 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[yearOfCentury]" + "'", str26, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Jan 01 00:00:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31536034534L + "'", long30 == 31536034534L);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = dateTimeZone11.getName((long) (byte) 10, locale13);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone11);
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.DateTime dateTime17 = interval15.getStart();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfWeek(4);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTime23.isEqual(93L);
        int int28 = dateTime23.getHourOfDay();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime23.toGregorianCalendar();
        int int30 = gregorianCalendar29.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone34);
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval38.withPeriodBeforeEnd(readablePeriod40);
        boolean boolean43 = interval38.contains((long) '4');
        boolean boolean44 = gregorianCalendar29.before((java.lang.Object) interval38);
        gregorianCalendar29.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar29.clear(269);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 269");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.010" + "'", str14, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        java.util.Date date13 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        boolean boolean14 = date6.after(date13);
        int int15 = date6.getYear();
        date6.setYear(269);
        date6.setDate(0);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date6);
        java.lang.String str21 = date6.toLocaleString();
        org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 28 04:06:02 UTC 2169");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 07 04:06:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 264 + "'", int15 == 264);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "28 f\351vr. 2169 04:06:02" + "'", str21, "28 f\351vr. 2169 04:06:02");
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList9);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) str11, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology21);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay22.toDateMidnight(dateTimeZone25);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay22, 1, locale30);
        long long34 = dateTimeField19.add(17L, (long) 17);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology36);
        org.joda.time.DateTime dateTime38 = yearMonthDay37.toDateTimeAtMidnight();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay37.toDateMidnight(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.minus(readablePeriod44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay45.year();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        org.joda.time.YearMonthDay yearMonthDay48 = property46.withMaximumValue();
        int int49 = property46.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay50 = property46.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay51 = property46.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay53 = property46.addWrapFieldToCopy(50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(11);
        org.joda.time.LocalDate.Property property58 = localDate57.dayOfMonth();
        org.joda.time.Chronology chronology59 = localDate57.getChronology();
        org.joda.time.LocalDate localDate61 = localDate57.minusDays(1);
        org.joda.time.LocalDate.Property property62 = localDate57.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate67 = localDate65.withDayOfYear(11);
        org.joda.time.LocalDate.Property property68 = localDate67.dayOfMonth();
        org.joda.time.Chronology chronology69 = localDate67.getChronology();
        boolean boolean70 = durationFieldType63.isSupported(chronology69);
        boolean boolean71 = localDate57.isSupported(durationFieldType63);
        java.lang.String str72 = durationFieldType63.toString();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay53.withFieldAdded(durationFieldType63, (-19034));
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate79 = localDate77.withDayOfYear(11);
        int[] intArray80 = localDate77.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField19.set((org.joda.time.ReadablePartial) yearMonthDay74, 106, intArray80, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "lun" + "'", str31, "lun");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1468800017L + "'", long34 == 1468800017L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "years" + "'", str72, "years");
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1970, 1, 1]");
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 269);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear(35);
        org.joda.time.DateTime dateTime5 = dateTime3.minus(1644572303495L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.withYearOfEra(14);
        org.joda.time.DateTime dateTime36 = dateTime9.withCenturyOfEra(11);
        org.joda.time.DateTime.Property property37 = dateTime9.dayOfYear();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime9.toYearMonthDay();
        org.joda.time.DateTime dateTime40 = dateTime9.minusMinutes(954);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguage("Jan");
        java.util.Locale.Builder builder8 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("Mar 7, 2169 4:06:02 AM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Mar 7, 2169 4:06:02 AM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        int int12 = property11.get();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int16 = dateTimeField13.getDifference((long) (short) 1, (long) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.util.Set<java.lang.Character> charSet22 = locale20.getExtensionKeys();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale20);
        int int25 = calendar23.getMinimum((int) (byte) 0);
        int int27 = calendar23.getGreatestMinimum(7);
        calendar23.set((int) '#', (int) (short) 10, 28, 5, 264, 17);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology36);
        org.joda.time.DateTime dateTime38 = yearMonthDay37.toDateTimeAtMidnight();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay37.toDateMidnight(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.minus(readablePeriod44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay45.year();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        long long49 = dateTimeField47.roundHalfCeiling((long) 34521);
        org.joda.time.DurationField durationField50 = dateTimeField47.getLeapDurationField();
        boolean boolean51 = calendar23.before((java.lang.Object) durationField50);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromCalendarFields(calendar23);
        int int53 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDate52);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61034222142802,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=24,SECOND=17,MILLISECOND=198,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-292275054) + "'", int53 == (-292275054));
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder43 = builder39.setDate((int) (short) 0, (int) 'x', (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone47);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        java.util.Calendar.Builder builder53 = builder39.setTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        boolean boolean59 = timeOfDay55.isAfter((org.joda.time.ReadablePartial) timeOfDay57);
        int int60 = timeOfDay57.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = timeOfDay57.toString(dateTimeFormatter61);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay57.minusMinutes(100);
        org.joda.time.TimeOfDay.Property property65 = timeOfDay57.secondOfMinute();
        int int66 = property65.getMinimumValueOverall();
        org.joda.time.DurationField durationField67 = property65.getRangeDurationField();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        boolean boolean69 = property65.equals((java.lang.Object) locale68);
        java.util.Calendar.Builder builder70 = builder53.setLocale(locale68);
        java.lang.String str71 = property37.getAsText(locale68);
        org.joda.time.Interval interval72 = property37.toInterval();
        java.lang.String str73 = property37.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "T09:39:41.237" + "'", str62, "T09:39:41.237");
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 1, (long) 7, chronology2);
        org.joda.time.Duration duration4 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 10, locale10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone8);
        org.joda.time.Interval interval13 = interval12.toInterval();
        long long14 = interval13.getStartMillis();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        long long17 = interval13.toDurationMillis();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = interval13.toPeriod(periodType18);
        int int20 = period19.size();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(11);
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfWeek();
        org.joda.time.LocalDate localDate33 = property32.roundCeilingCopy();
        int int34 = property25.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate36 = localDate33.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property37 = localDate33.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay40.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeZone47.getName((long) (byte) 10, locale49);
        java.lang.String str51 = locale49.getISO3Language();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = yearMonthDay40.toString("1", locale53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay40.plusYears(4);
        org.joda.time.DateTime dateTime57 = yearMonthDay56.toDateTimeAtMidnight();
        long long58 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property60 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime62 = dateTime57.plusMinutes(32772);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "France" + "'", str52, "France");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1450L) + "'", long58 == (-1450L));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) str13, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 1, (long) 7, chronology24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) period27, (-1L), (long) 9);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) ' ', (long) ' ', chronology19);
        org.joda.time.DateTimeField dateTimeField32 = chronology19.weekyearOfCentury();
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(11);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfMonth();
        org.joda.time.Chronology chronology11 = localDate9.getChronology();
        boolean boolean12 = durationFieldType5.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) 1969, chronology11);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.monthOfYear();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate23 = localDate21.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate25 = localDate21.withYear(34521);
        int int26 = localDate21.getYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeZone35.getName((long) (byte) 10, locale37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone35);
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.DateTime dateTime41 = interval39.getStart();
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(4);
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime41.getZone();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(14, 1, 2, 1, 13, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate21.toDateTimeAtStartOfDay(dateTimeZone46);
        int int50 = dateTimeZone46.getStandardOffset((long) 40);
        org.joda.time.Chronology chronology51 = chronology11.withZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(724, 0, 100, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.010" + "'", str38, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = dateTimeField15.getAsText(14, locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone8, locale20);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight60 = property58.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTimeZone62.getName((long) (byte) 10, locale64);
        boolean boolean66 = locale64.hasExtensions();
        java.lang.String str67 = property58.getAsText(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone8, locale64);
        calendar68.setTimeInMillis(534L);
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.fromCalendarFields(calendar68);
        java.time.Instant instant72 = calendar68.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar68.add(15, 1971);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14" + "'", str23, "14");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572381530,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=41,MILLISECOND=540,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=534,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=544,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(instant72);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0, 100, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(11);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfMonth();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((java.lang.Object) str12, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 1, (long) 7, chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval24.toPeriod(periodType25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (-1L), (long) 9);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 8, chronology18);
        org.joda.time.DateTimeField dateTimeField31 = chronology18.dayOfMonth();
        java.lang.String str32 = dateTimeField31.toString();
        long long34 = dateTimeField31.roundHalfCeiling((long) 1003);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str32, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = dateTimeField15.getAsText(14, locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone8, locale20);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = dateTimeZone28.getName((long) (byte) 10, locale30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone28);
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.DateTime dateTime34 = interval32.getStart();
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeZone44.getName((long) (byte) 10, locale46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone44);
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(4);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, dateTimeZone55);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight60 = property58.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTimeZone62.getName((long) (byte) 10, locale64);
        boolean boolean66 = locale64.hasExtensions();
        java.lang.String str67 = property58.getAsText(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone8, locale64);
        calendar68.setTimeInMillis(534L);
        calendar68.set(32, 11, (int) (short) 100, 13920, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            calendar68.set(779, 245);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 779");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14" + "'", str23, "14");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572381631,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=41,MILLISECOND=641,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=100,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=13920,MINUTE=100,SECOND=0,MILLISECOND=544,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        int int2 = yearMonthDay1.getMonthOfYear();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay1.dayOfMonth();
        int int5 = yearMonthDay1.getDayOfMonth();
        org.joda.time.Chronology chronology6 = yearMonthDay1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfYear();
        java.lang.String str21 = property20.toString();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.DateTime dateTime23 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime24 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.Interval interval26 = yearMonthDay1.toInterval(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 55, dateTimeZone25);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        java.lang.String str29 = property28.getAsShortText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfYear]" + "'", str21, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.clear();
        calendar6.set(5, 34265, 36, 954, 65, 34619);
        calendar6.setTimeInMillis((long) 18);
        calendar6.setTimeInMillis(1644572169028L);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar6.getActualMinimum(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572169028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=9,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property6.addToCopy((int) (byte) 10);
        int int9 = timeOfDay8.size();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(11);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        org.joda.time.LocalDate localDate16 = localDate13.minusMonths((int) '4');
        org.joda.time.LocalDate localDate18 = localDate13.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate localDate20 = localDate13.plusWeeks(31);
        org.joda.time.DateTime dateTime21 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.minusYears(11);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 1, (long) 7, chronology31);
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 1, (long) 7, chronology36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = dateTime33.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology42);
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay43.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay45 = dateMidnight44.toYearMonthDay();
        int int46 = yearMonthDay45.getYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        long long56 = interval55.getStartMillis();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Interval interval58 = interval55.withDurationBeforeEnd(readableDuration57);
        long long59 = interval55.toDurationMillis();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval55.toPeriod(periodType60);
        int int62 = period61.size();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay45.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period61);
        org.joda.time.PeriodType periodType65 = period61.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay28.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.LocalDate localDate68 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period61, (-13827));
        org.joda.time.LocalDate localDate70 = localDate13.withYear(56);
        int int71 = localDate70.getYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = timeOfDay8.isAfter((org.joda.time.ReadablePartial) localDate70);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 56 + "'", int71 == 56);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar54 = dateMidnight51.toGregorianCalendar();
        java.util.Date date61 = new java.util.Date(3, 22, 32769, 1969, 47, 11);
        java.lang.String str62 = date61.toLocaleString();
        gregorianCalendar54.setTime(date61);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
        org.junit.Assert.assertEquals(date61.toString(), "Mon Oct 10 01:47:11 UTC 1994");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10 oct. 1994 01:47:11" + "'", str62, "10 oct. 1994 01:47:11");
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("T09:38:49.602");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime21, dateTimeZone42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset((long) (byte) 10);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime21, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        long long70 = dateTimeZone65.convertLocalToUTC((long) 1971, false, (long) 39);
        org.joda.time.DateTime dateTime71 = dateTime50.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime72 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone65);
        org.joda.time.Interval interval73 = yearMonthDay10.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1961L + "'", long70 == 1961L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight3.toYearMonthDay();
        int int5 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay9 = property6.addWrapFieldToCopy(34567);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property6.getFieldType();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder15 = builder11.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder19 = builder15.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        java.util.Calendar.Builder builder29 = builder19.setTimeZone(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str32 = locale30.getDisplayLanguage();
        java.util.Locale.setDefault(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfMonth();
        org.joda.time.Chronology chronology40 = localDate38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType34.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfHalfday();
        long long45 = dateTimeField43.roundHalfEven(11L);
        java.util.Locale locale49 = new java.util.Locale("ISOChronology[Etc/UTC]", "monthOfYear");
        java.lang.String str50 = dateTimeField43.getAsShortText(1644572134383L, locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale30.getDisplayName(locale49);
        int int53 = property6.getMaximumShortTextLength(locale49);
        java.lang.String str54 = property6.getName();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572381866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=41,MILLISECOND=876,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str32, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals(locale49.toString(), "isochronology[etc/utc]_MONTHOFYEAR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9" + "'", str50, "9");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "dayOfMonth" + "'", str54, "dayOfMonth");
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.get();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.addWrapFieldToCopy(28);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology19);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay20.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) 11L, dateTimeZone23);
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths(11);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 1, (long) 7, chronology33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 1, (long) 7, chronology38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval39.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = dateTime35.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology44);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay45.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight46.toYearMonthDay();
        int int48 = yearMonthDay47.getYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone52);
        org.joda.time.Interval interval57 = interval56.toInterval();
        long long58 = interval57.getStartMillis();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Interval interval60 = interval57.withDurationBeforeEnd(readableDuration59);
        long long61 = interval57.toDurationMillis();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = interval57.toPeriod(periodType62);
        int int64 = period63.size();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay47.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) period63);
        org.joda.time.LocalDate localDate67 = localDate28.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay16.minusYears(0);
        org.joda.time.DateMidnight dateMidnight71 = yearMonthDay70.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.getMonthOfYear();
        org.joda.time.LocalDate localDate2 = yearMonthDay0.toLocalDate();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.dayOfMonth();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        int int13 = dateTimeField10.getDifference((long) 11, (long) 4);
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeField10.getAsShortText(1644572124561L, locale15);
        java.lang.String str18 = property3.getAsShortText(locale15);
        org.joda.time.YearMonthDay yearMonthDay20 = property3.addWrapFieldToCopy((int) '#');
        java.lang.String str21 = property3.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = property3.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusYears((int) (short) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology26);
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay27.toDateMidnight(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay27.minus(readablePeriod34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.year();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        java.util.Locale.LanguageRange languageRange50 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] { languageRange50 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList58);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate64 = localDate62.withDayOfYear(11);
        org.joda.time.LocalDate.Property property65 = localDate64.dayOfMonth();
        org.joda.time.Chronology chronology66 = localDate64.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((java.lang.Object) str60, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.dayOfWeek();
        org.joda.time.DateTime dateTime69 = dateTime46.toDateTime(chronology66);
        boolean boolean70 = property36.equals((java.lang.Object) dateTime69);
        org.joda.time.DateTime dateTime71 = yearMonthDay22.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int int72 = dateTime69.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u56fd" + "'", str16, "\u82f1\u56fd");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "561" + "'", str17, "561");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "11" + "'", str18, "11");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfMonth]" + "'", str21, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTimeZone20.getName((long) (byte) 10, locale22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone20);
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.DateTime dateTime26 = interval24.getStart();
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(4);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withMillis((long) (short) 100);
        int int38 = dateMidnight33.getWeekOfWeekyear();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 1, (long) 7, chronology42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtStartOfDay();
        int int51 = localDate47.getWeekyear();
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.DateMidnight.Property property56 = dateMidnight33.era();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight33.plusYears(36);
        int int59 = dateMidnight58.getWeekyear();
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withFields(readablePartial60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight58.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = property62.getAsShortText(locale63);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2005 + "'", int59 == 2005);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "52" + "'", str64, "52");
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        java.lang.String str12 = dateTimeField10.getAsShortText((long) 34521);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "34" + "'", str12, "34");
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset((long) (byte) 10);
        boolean boolean5 = dateTimeZone2.isFixed();
        int int7 = dateTimeZone2.getOffsetFromLocal((long) 10);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 'a', false, 187200001L);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 11, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = dateTimeZone16.getName((long) (byte) 10, locale18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone16);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = interval20.getStart();
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfWeek(4);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime22.minusHours((int) (byte) -1);
        org.joda.time.DateTime.Property property28 = dateTime22.hourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate32 = localDate30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = localDate30.plusYears((int) (byte) 1);
        int int36 = localDate30.getWeekyear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology38);
        org.joda.time.DateTime dateTime40 = yearMonthDay39.toDateTimeAtMidnight();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay39.toDateMidnight(dateTimeZone42);
        java.lang.String str47 = dateTimeZone42.getName((long) 11);
        org.joda.time.DateTime dateTime48 = localDate30.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now(dateTimeZone42);
        int int51 = dateTimeZone42.getOffsetFromLocal(261L);
        org.joda.time.DateTime dateTime52 = dateTime22.toDateTime(dateTimeZone42);
        int int53 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime52.plusSeconds(696);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeFormatter59.getZone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter59.withChronology(chronology61);
        int int63 = dateTimeFormatter59.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter59.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = dateTimeFormatter59.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter59.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter67.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTime56.toString(dateTimeFormatter67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 87L + "'", long11 == 87L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2000 + "'", int63 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNull(dateTimePrinter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 360);
        int int2 = yearMonthDay1.size();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.minusYears(32770);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears(0);
        int int7 = yearMonthDay6.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.withDayOfMonth(34546);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34546 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        java.lang.String str5 = property4.getName();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "dayOfYear" + "'", str5, "dayOfYear");
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property13.getDateTime();
        org.joda.time.DateTime dateTime19 = property13.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property13.getField();
        org.joda.time.DateTime dateTime22 = property13.addWrapFieldToCopy(1971);
        boolean boolean24 = dateTime22.isEqual((long) 25);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfYear]" + "'", str14, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(106, 33, 1969, 9);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder16 = builder10.setTimeOfDay(13920, 724, 713);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-61885036800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=347,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withPivotYear((java.lang.Integer) 1971);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime63 = dateTimeFormatter61.parseMutableDateTime("18");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = property6.addWrapFieldToCopy(8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withMonthOfYear(352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 352 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withPeriodAdded(readablePeriod8, 10);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay7.minuteOfHour();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 16, locale16);
        int int19 = dateTimeField13.get(1644572155242L);
        long long21 = dateTimeField13.roundHalfEven(90L);
        boolean boolean22 = dateTimeField13.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.TimeOfDay timeOfDay9 = property6.addToCopy(2);
        java.lang.String str10 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "42" + "'", str7, "42");
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "42" + "'", str10, "42");
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMillis((-1));
        int int5 = timeOfDay4.size();
        int int6 = timeOfDay4.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.plusMillis(34521);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withHourOfDay(34662);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34662 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set((int) (short) 0, (int) '4', (int) (byte) -1);
        calendar6.roll(2022, (int) (short) 0);
        calendar6.set(13896, 65, 37, (-1), 30);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(28, (-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13896,MONTH=65,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=37,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=-1,MINUTE=30,SECOND=42,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        java.util.TimeZone timeZone8 = calendar6.getTimeZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology10);
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay11.toDateMidnight(dateTimeZone14);
        java.lang.String str19 = dateTimeZone14.getName((long) 11);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = dateTimeZone14.getName((long) '4', locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone8, locale21);
        int int25 = calendar23.getMaximum(11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572382407,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=42,MILLISECOND=407,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572382407,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=42,MILLISECOND=407,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.withMaximumValue();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay15 = property11.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = property11.getYearMonthDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(11);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 35, chronology23);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(11);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfMonth();
        org.joda.time.Chronology chronology37 = localDate35.getChronology();
        boolean boolean38 = durationFieldType31.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology37);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) 1969, chronology37);
        long long46 = chronology37.add((-5178038399999L), (long) 32772, 269);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTimeZone50.getName((long) (byte) 10, locale52);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone50);
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.DateTime dateTime56 = interval54.getStart();
        org.joda.time.Period period57 = interval54.toPeriod();
        int[] intArray59 = chronology37.get((org.joda.time.ReadablePeriod) period57, (long) (short) 100);
        int[] intArray61 = chronology23.get((org.joda.time.ReadablePeriod) period57, (long) 3600011);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.centuryOfEra();
        org.joda.time.LocalDate localDate65 = property64.roundCeilingCopy();
        org.joda.time.LocalDate localDate66 = property64.roundHalfEvenCopy();
        int int67 = yearMonthDay16.compareTo((org.joda.time.ReadablePartial) localDate66);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-5178029584331L) + "'", long46 == (-5178029584331L));
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 1, 0, 0, 11]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTime.Property property12 = dateTime9.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(11);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.Chronology chronology19 = localDate17.getChronology();
        boolean boolean20 = durationFieldType13.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.Chronology chronology24 = chronology19.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((java.lang.Object) property12, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(999);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withChronology(chronology9);
        int int11 = dateTimeFormatter7.getDefaultYear();
        boolean boolean12 = dateTimeFormatter7.isParser();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter7.withZone(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays(59);
        boolean boolean18 = dateMidnight15.isAfterNow();
        int int19 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        int int6 = localDate3.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology8);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.minus(readablePeriod16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        int int19 = localDate3.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTimeZone23.getName((long) (byte) 10, locale25);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone23);
        org.joda.time.Interval interval28 = interval27.toInterval();
        long long29 = interval28.getStartMillis();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval28.withDurationBeforeEnd(readableDuration30);
        long long32 = interval28.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        int int35 = period34.size();
        org.joda.time.MutablePeriod mutablePeriod36 = period34.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeZone40.getName((long) (byte) 10, locale42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone40);
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(4);
        org.joda.time.DateTime dateTime50 = dateTime46.minusMonths(4);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(70);
        int int53 = dateTime50.getSecondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime50.withYear((int) 'u');
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) period34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField59 = yearMonthDay17.getField(1932);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1932");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        boolean boolean6 = dateTimeFormatter4.isParser();
        boolean boolean7 = dateTimeFormatter4.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.parse("803", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime9.minusHours((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withSecondOfMinute(34675613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34675613 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        boolean boolean37 = dateMidnight32.isBeforeNow();
        int int38 = dateMidnight32.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, 19);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(1644572138904L, dateTimeZone42);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = dateTimeZone42.getName(150810L, locale45);
        java.util.Calendar calendar48 = dateMidnight32.toCalendar(locale45);
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight32.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:19" + "'", str47, "+07:19");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay49);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        java.lang.String str13 = locale11.getISO3Language();
        java.lang.String str14 = dateTimeField6.getAsText(14, locale11);
        long long17 = dateTimeField6.add((long) 28, (long) (byte) 0);
        long long20 = dateTimeField6.addWrapField(1644572152299L, (int) (short) 10);
        long long23 = dateTimeField6.add(43L, 97L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "14" + "'", str14, "14");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572152309L + "'", long20 == 1644572152309L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 140L + "'", long23 == 140L);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DurationField durationField40 = property37.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight41 = property37.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property37.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField43 = property37.getField();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) (byte) 10);
        boolean boolean48 = dateTimeZone45.isFixed();
        int int50 = dateTimeZone45.getOffsetFromLocal((long) 10);
        java.lang.String str52 = dateTimeZone45.getName(3787257600000L);
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder54.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder62 = builder58.setDate(12, 3, 17);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = dateTimeZone66.getName((long) (byte) 10, locale68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone66);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        java.util.Calendar.Builder builder72 = builder62.setTimeZone(timeZone71);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone71, locale73);
        java.lang.String str75 = locale73.getISO3Language();
        java.lang.String str76 = locale73.getDisplayScript();
        java.util.Locale locale77 = java.util.Locale.JAPANESE;
        java.lang.String str78 = locale77.toLanguageTag();
        java.lang.String str79 = locale73.getDisplayName(locale77);
        java.lang.String str80 = dateTimeZone45.getName(77L, locale77);
        java.lang.String str81 = property37.getAsShortText(locale77);
        org.joda.time.DateTimeField dateTimeField82 = property37.getField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644572382768,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=42,MILLISECOND=778,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zho" + "'", str75, "zho");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ja" + "'", str78, "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str79, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.010" + "'", str80, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar6);
        calendar6.set(13, 1, 70, 366, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        boolean boolean23 = calendar6.before((java.lang.Object) interval21);
        org.joda.time.MutableInterval mutableInterval24 = interval21.toMutableInterval();
        boolean boolean26 = interval21.isBefore((-10L));
        boolean boolean27 = interval21.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=70,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=366,MINUTE=10,SECOND=42,MILLISECOND=829,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy(11);
        org.joda.time.DateMidnight dateMidnight37 = property33.setCopy("11");
        java.lang.String str38 = property33.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset((long) (byte) 10);
        boolean boolean4 = dateTimeZone1.isFixed();
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(839);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 1969, (long) 13920);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) 'a', true, (long) 4);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(dateTimeZone17);
        boolean boolean24 = interval2.isAfter((org.joda.time.ReadableInstant) dateMidnight23);
        java.lang.Object obj25 = null;
        boolean boolean26 = interval2.equals(obj25);
        org.joda.time.Interval interval28 = interval2.withStartMillis((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeZone32.getName((long) (byte) 10, locale34);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone32);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfYear();
        java.lang.String str43 = property42.toString();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        org.joda.time.DateTime dateTime45 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime46 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime47 = property42.getDateTime();
        java.util.Locale locale49 = null;
        org.joda.time.DateTime dateTime50 = property42.setCopy("71", locale49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        boolean boolean52 = interval28.contains((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 87L + "'", long22 == 87L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[dayOfYear]" + "'", str43, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTimeZone36.getName((long) (byte) 10, locale38);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone36);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.DateTime dateTime42 = interval40.getStart();
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 1, (long) 7, chronology47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration49);
        int int52 = dateMidnight51.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.minusYears(4);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Interval interval56 = dateMidnight54.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.010" + "'", str39, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1965 + "'", int55 == 1965);
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay2.toDateMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay2.minus(readablePeriod9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(4);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTimeZone31.getName((long) (byte) 10, locale33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone31);
        org.joda.time.Interval interval36 = interval35.toInterval();
        org.joda.time.DateTime dateTime37 = interval35.getStart();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(4);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime21, dateTimeZone42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset((long) (byte) 10);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime21, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone54.getName((long) (byte) 10, locale56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone54);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.DateTime dateTime60 = interval58.getStart();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime(dateTimeZone65);
        long long70 = dateTimeZone65.convertLocalToUTC((long) 1971, false, (long) 39);
        org.joda.time.DateTime dateTime71 = dateTime50.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime72 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone65);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay10.withFieldAdded(durationFieldType73, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1961L + "'", long70 == 1961L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(durationFieldType73);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(1439, 0, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = dateTimeZone7.getName((long) (byte) 10, locale9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone7);
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.DateTime dateTime13 = interval11.getStart();
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfWeek(4);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime3.toMutableDateTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(11);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = localDate24.minusDays(1);
        org.joda.time.LocalDate.Property property29 = localDate24.monthOfYear();
        int int30 = property29.getMinimumValueOverall();
        org.joda.time.LocalDate localDate31 = property29.withMaximumValue();
        org.joda.time.LocalDate localDate33 = property29.addWrapFieldToCopy(3);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = dateTimeZone38.getName((long) (byte) 10, locale40);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate33.toDateTime(localTime34, dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean45 = localDate33.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDate localDate47 = localDate33.plusDays(39);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology49);
        org.joda.time.DateTime dateTime51 = yearMonthDay50.toDateTimeAtMidnight();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay50.toDateMidnight(dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay50.minus(readablePeriod57);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.minusYears(15);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology62);
        org.joda.time.DateTime dateTime64 = yearMonthDay63.toDateTimeAtMidnight();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight69 = yearMonthDay63.toDateMidnight(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeZone73.getName((long) (byte) 10, locale75);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone73);
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.joda.time.DateTime dateTime79 = interval77.getStart();
        org.joda.time.DateTime dateTime81 = dateTime79.withDayOfWeek(4);
        org.joda.time.DateTime dateTime82 = dateTime79.toDateTime();
        int int83 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) dateTime79);
        java.lang.String str85 = dateTimeZone66.getNameKey(3L);
        org.joda.time.DateTime dateTime86 = yearMonthDay60.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight87 = localDate33.toDateMidnight(dateTimeZone66);
        long long89 = dateTimeZone18.getMillisKeepLocal(dateTimeZone66, (long) 34615);
        long long91 = dateTimeZone66.nextTransition(0L);
        boolean boolean92 = dateTimeZone66.isFixed();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 34615L + "'", long89 == 34615L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTimeZone15.getName((long) (byte) 10, locale17);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone15);
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.DateTime dateTime21 = interval19.getStart();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 1, (long) 7, chronology26);
        org.joda.time.Duration duration28 = interval27.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime30 = dateTime9.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = dateTimeZone34.getName((long) (byte) 10, locale36);
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale36.getDisplayLanguage(locale39);
        java.util.Calendar calendar41 = dateTime30.toCalendar(locale36);
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromCalendarFields(calendar41);
        int int44 = calendar41.getActualMinimum(0);
        java.time.Instant instant45 = calendar41.toInstant();
        java.lang.Object obj46 = calendar41.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "francese" + "'", str40, "francese");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-5,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "java.util.GregorianCalendar[time=-5,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "java.util.GregorianCalendar[time=-5,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "java.util.GregorianCalendar[time=-5,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("francese");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(11);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        int int16 = dateTimeField14.getMaximumTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getDisplayVariant();
        int int20 = dateTimeField14.getMaximumShortTextLength(locale17);
        java.util.Locale.Builder builder21 = builder3.setLocale(locale17);
        java.util.Locale.Builder builder22 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder3.setUnicodeLocaleKeyword("561", "Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 561 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate15 = localDate10.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.LocalDate localDate18 = localDate15.withWeekyear(3);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtMidnight();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTimeZone24.getName((long) (byte) 10, locale26);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = localDate15.toDateTime(localTime20, dateTimeZone24);
        long long32 = dateTimeZone24.adjustOffset((long) 41, false);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay8.toDateMidnight(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter7.withZone(dateTimeZone24);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("T09:37:04.866");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter36.withLocale(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = locale38.getUnicodeLocaleType("0003-12-26");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 0003-12-26");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41L + "'", long32 == 41L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(1969);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        java.util.Date date19 = dateTime15.toDate();
        date19.setYear(27);
        java.util.Date date28 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date28.setMinutes(3);
        boolean boolean31 = date19.after(date28);
        int int32 = date28.getDate();
        java.util.Date date38 = new java.util.Date(35, 16, (int) 'u', 17, 17);
        java.util.Date date45 = new java.util.Date((int) (byte) 100, 1969, (int) ' ', (int) (byte) 100, 6, 2);
        date45.setMinutes(3);
        boolean boolean48 = date38.before(date45);
        boolean boolean49 = date28.before(date45);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 01 00:00:00 UTC 1927");
        org.junit.Assert.assertEquals(date28.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertEquals(date38.toString(), "Tue Aug 25 17:17:00 UTC 1936");
        org.junit.Assert.assertEquals(date45.toString(), "Wed Mar 07 04:03:02 UTC 2164");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.DateTime dateTime23 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int int24 = dateTime23.getYearOfEra();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMinutes(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime23.withWeekOfWeekyear(954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 954 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        int int6 = localDate5.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset((long) (byte) 10);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime16, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTimeZone49.getName((long) (byte) 10, locale51);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone49);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfWeek(4);
        org.joda.time.DateTime dateTime58 = dateTime55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime61 = dateTime55.toDateTime(dateTimeZone60);
        long long65 = dateTimeZone60.convertLocalToUTC((long) 1971, false, (long) 39);
        org.joda.time.DateTime dateTime66 = dateTime45.toDateTime(dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight67 = localDate5.toDateMidnight(dateTimeZone60);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1961L + "'", long65 == 1961L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate6 = localDate1.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(3);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(0);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        int int13 = localDate11.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        int int20 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime13.withLaterOffsetAtOverlap();
        int int24 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime dateTime26 = dateTime13.minusSeconds(264);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) (short) 0, (int) 'x', (-1));
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(49, 292278993, (int) (short) -1);
        java.util.Calendar.Builder builder12 = builder8.setDate(0, 32772, 0);
        java.util.Calendar.Builder builder16 = builder12.setDate(27, 34530, 292278994);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale.LanguageRange languageRange19 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] { languageRange19 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(11);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.Chronology chronology35 = localDate33.getChronology();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((java.lang.Object) str29, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfWeek();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 1, (long) 7, chronology40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval41.toPeriod(periodType42);
        int[] intArray46 = chronology35.get((org.joda.time.ReadablePeriod) period43, (-1L), (long) 9);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType17.getField(chronology35);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeZone51.getName((long) (byte) 10, locale53);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone51);
        org.joda.time.Interval interval56 = interval55.toInterval();
        long long57 = interval56.getStartMillis();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 1, (long) 7, chronology62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval63.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        int[] intArray68 = chronology35.get((org.joda.time.ReadablePeriod) period65, (long) '4');
        java.util.Calendar.Builder builder69 = builder12.setFields(intArray68);
        java.util.Calendar.Builder builder73 = builder69.setWeekDate(56, 924, 5970);
        java.util.Calendar.Builder builder77 = builder69.setDate(69, 1429331, 49);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.010" + "'", str54, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withMillis((long) 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withYearOfEra((int) 'a');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.plusWeeks((int) (short) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean45 = timeOfDay42.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateMidnight.Property property47 = dateMidnight32.property(dateTimeFieldType44);
        int int48 = property47.getMinimumValueOverall();
        int int49 = property47.get();
        org.joda.time.DateMidnight dateMidnight50 = property47.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight52 = property47.addToCopy(52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusWeeks(20);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay6.toDateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded(1644572192745L, 30);
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.yearOfEra();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(6, (int) '#', 12);
        java.util.Calendar.Builder builder8 = builder4.setDate(12, 3, 17);
        java.util.Calendar.Builder builder11 = builder8.set(16, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder11.setCalendarType("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: cinese (Cina)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = dateTimeZone19.getName((long) (byte) 10, locale21);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone19);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfWeek(4);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.withWeekOfWeekyear(3);
        boolean boolean37 = dateMidnight32.isBeforeNow();
        org.joda.time.DateMidnight.Property property38 = dateMidnight32.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight39 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(11);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfMonth();
        org.joda.time.LocalDate localDate46 = property45.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate49 = property47.addToCopy(39);
        org.joda.time.LocalDate localDate50 = property47.withMinimumValue();
        int int51 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay.Property property1 = yearMonthDay0.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = dateTimeZone6.getName((long) (byte) 10, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone6);
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfWeek(4);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone22.getName((long) (byte) 10, locale24);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone22);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTime dateTime28 = interval26.getStart();
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfWeek(4);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight35.withMillis((long) (short) 100);
        int int40 = dateMidnight35.getWeekOfWeekyear();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readablePeriod2, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 1, (long) 7, chronology44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = interval45.toPeriod(periodType46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate51 = localDate49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtStartOfDay();
        int int53 = localDate49.getWeekyear();
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period47, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 6);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology59 = yearMonthDay58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.clockhourOfHalfday();
        int int64 = dateTimeField61.getDifference(1644572152309L, (long) 34536);
        org.joda.time.DurationField durationField65 = dateTimeField61.getDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 456825 + "'", int64 == 456825);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 13, chronology6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus(1644572124561L);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusDays(34536);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property14.addToCopy((long) 954);
        org.joda.time.DateMidnight dateMidnight17 = property14.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(34530);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.DateTime dateTime27 = interval25.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 1, (long) 7, chronology32);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = dateTime15.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology37 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate45 = localDate40.plusYears((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekyear(3);
        org.joda.time.LocalDate localDate50 = localDate45.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = dateTimeZone52.getName((long) (byte) 10, locale54);
        org.joda.time.Interval interval56 = localDate45.toInterval(dateTimeZone52);
        int[] intArray58 = chronology37.get((org.joda.time.ReadablePartial) localDate45, (long) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField60 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = chronology37.secondOfDay();
        boolean boolean63 = dateTimeField61.isLeap(1644572334278L);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(1969);
        org.joda.time.DateMidnight dateMidnight14 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = dateTimeZone18.getName((long) (byte) 10, locale20);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone18);
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime24.getZone();
        org.joda.time.DateTime dateTime30 = dateTime11.withZone(dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime30.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = property31.withMinimumValue();
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(1968);
        org.joda.time.DateTime dateTime36 = dateTime32.withCenturyOfEra(779);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.DateMidnight dateMidnight3 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(13);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone10.getName((long) (byte) 10, locale12);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone10);
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.DateTime dateTime16 = interval14.getStart();
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfWeek(4);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeZone26.getName((long) (byte) 10, locale28);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone26);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone43);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.DateTime dateTime49 = interval47.getStart();
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays(0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 1, (long) 7, chronology54);
        org.joda.time.Duration duration56 = interval55.toDuration();
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight39.minus((org.joda.time.ReadableDuration) duration56);
        int int59 = dateMidnight58.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusYears(4);
        org.joda.time.DateMidnight.Property property62 = dateMidnight58.weekyear();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight58.withFieldAdded(durationFieldType63, 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay2.withFieldAdded(durationFieldType63, 793);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateMidnight65);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTimeZone13.getName((long) (byte) 10, locale15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone13);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.DateTime dateTime19 = interval17.getStart();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.DateTime dateTime35 = interval33.getStart();
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfWeek(4);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withMillis((long) (short) 100);
        int int47 = dateMidnight42.getWeekOfWeekyear();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readablePeriod9, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 1, (long) 7, chronology51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate58 = localDate56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtStartOfDay();
        int int60 = localDate56.getWeekyear();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period54, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 6);
        org.joda.time.DateMidnight.Property property65 = dateMidnight42.era();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight42.plusYears(36);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(11);
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfMonth();
        org.joda.time.Chronology chronology73 = localDate71.getChronology();
        int int74 = localDate71.getDayOfWeek();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology76);
        org.joda.time.DateTime dateTime78 = yearMonthDay77.toDateTimeAtMidnight();
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        int int82 = dateTimeZone80.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight83 = yearMonthDay77.toDateMidnight(dateTimeZone80);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay77.minus(readablePeriod84);
        org.joda.time.YearMonthDay.Property property86 = yearMonthDay85.year();
        int int87 = localDate71.compareTo((org.joda.time.ReadablePartial) yearMonthDay85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType88.getRangeDurationType();
        org.joda.time.LocalDate localDate91 = localDate71.withField(dateTimeFieldType88, 8);
        java.lang.String str92 = dateTimeFieldType88.toString();
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight67.withField(dateTimeFieldType88, 19);
        boolean boolean95 = localDate7.isSupported(dateTimeFieldType88);
        java.lang.String str96 = dateTimeFieldType88.getName();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "dayOfMonth" + "'", str92, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "dayOfMonth" + "'", str96, "dayOfMonth");
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate23 = localDate18.plusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate18.minusMonths(11);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = localDate18.toString("\u30d5\u30e9\u30f3\u30b9", locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap29 = gregorianCalendar13.getDisplayNames(20, 100, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str28, "\u30d5\u30e9\u30f3\u30b9");
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        boolean boolean5 = timeOfDay1.isAfter((org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean7 = timeOfDay1.isSupported(dateTimeFieldType6);
        int int8 = timeOfDay1.size();
        java.lang.String str10 = timeOfDay1.toString("+00:00:00.010");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay14.getFieldTypes();
        boolean boolean17 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = timeOfDay14.indexOf(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay14.plusMillis(0);
        int int22 = timeOfDay21.size();
        int[] intArray23 = timeOfDay21.getValues();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay21.plusMinutes((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withHourOfDay(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[9, 39, 44, 14]");
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1);
        org.joda.time.LocalDate.Property property9 = localDate4.monthOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = dateTimeZone14.getName((long) (byte) 10, locale16);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone14);
        org.joda.time.Interval interval19 = interval18.toInterval();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime20.getZone();
        org.joda.time.DateTime dateTime26 = localDate4.toDateTime(localTime10, dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(2190, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTimeZone1.getName((long) (byte) 10, locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        int int8 = calendar6.getGreatestMinimum(3);
        java.util.Date date9 = calendar6.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar6.getActualMaximum(34703);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34703");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572384092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=39,SECOND=44,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:39:44 UTC 2022");
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("11 Feb 2022 09:38:16 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '11 Feb 2022 09:38:16 GMT' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear(11);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = localDate3.minusDays(1);
        org.joda.time.LocalDate localDate9 = localDate7.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(0);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(11);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology22 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = localDate20.minusDays(1);
        org.joda.time.LocalDate.Property property25 = localDate20.monthOfYear();
        int int26 = property25.getMinimumValueOverall();
        int int27 = property25.getMinimumValue();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = localDate29.toDateTimeAtStartOfDay();
        int int33 = property25.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(11);
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfMonth();
        org.joda.time.Chronology chronology40 = localDate38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType34.getField(chronology40);
        long long44 = dateTimeField41.add((long) 100, 70);
        boolean boolean45 = dateTimeField41.isLenient();
        int int46 = dateTime32.get(dateTimeField41);
        org.joda.time.DateTime.Property property47 = dateTime32.year();
        boolean boolean48 = localDate16.equals((java.lang.Object) dateTime32);
        java.lang.String str49 = localDate16.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3024000100L + "'", long44 == 3024000100L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-11" + "'", str49, "2022-02-11");
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fra");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(11);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.LocalDate localDate11 = localDate7.minusDays(1);
        org.joda.time.LocalDate.Property property12 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.plusWeeks(43);
        boolean boolean16 = languageRange1.equals((java.lang.Object) 43);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        long long6 = java.util.Date.UTC(40, 724, 245, 31, 30, 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 978334200000L + "'", long6 == 978334200000L);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (short) -1);
        int int17 = dateTime13.getYearOfEra();
        org.joda.time.DateTime dateTime19 = dateTime13.withWeekOfWeekyear(5);
        org.joda.time.DateTime.Property property20 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(19);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtStartOfDay();
        int int10 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        int int12 = localDate6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfWeek(4);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime45 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withMillis((long) (short) 100);
        int int51 = dateMidnight46.getWeekOfWeekyear();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readablePeriod13, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 1, (long) 7, chronology55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval56.toPeriod(periodType57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate62 = localDate60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.getWeekyear();
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.LocalDate localDate69 = localDate6.minus((org.joda.time.ReadablePeriod) period58);
        int int70 = period58.size();
        org.joda.time.MutablePeriod mutablePeriod71 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.LocalDate localDate73 = yearMonthDay2.toLocalDate();
        int int74 = localDate73.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(19);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate1.withFields((org.joda.time.ReadablePartial) yearMonthDay6);
        org.joda.time.LocalDate.Property property9 = localDate1.era();
        org.joda.time.LocalDate localDate10 = property9.withMinimumValue();
        org.joda.time.DurationField durationField11 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        long long9 = interval7.toDurationMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 1, (long) 7, chronology12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate19 = localDate17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        int int21 = localDate17.getWeekyear();
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Interval interval25 = interval23.withEndMillis((long) 9);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeZone29.getName((long) (byte) 10, locale31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone29);
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Interval interval36 = interval33.withPeriodBeforeEnd(readablePeriod35);
        boolean boolean37 = interval36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeZone41.getName((long) (byte) 10, locale43);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone41);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        boolean boolean48 = interval36.overlaps((org.joda.time.ReadableInterval) interval45);
        boolean boolean49 = interval25.equals((java.lang.Object) interval36);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeZone53.getName((long) (byte) 10, locale55);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone53);
        org.joda.time.Interval interval58 = interval57.toInterval();
        org.joda.time.DateTime dateTime59 = interval57.getStart();
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfWeek(4);
        org.joda.time.DateTime dateTime63 = dateTime59.minusMonths(4);
        org.joda.time.DateTime dateTime65 = dateTime59.minusDays(8);
        org.joda.time.DateTime dateTime67 = dateTime65.withMillisOfSecond(0);
        boolean boolean68 = interval36.contains((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime71 = dateTime65.withDurationAdded(1644572152299L, 366);
        boolean boolean72 = interval7.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration73 = interval7.toDuration();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 1, (long) 7, chronology4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay();
        int int13 = localDate9.getWeekyear();
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Interval interval17 = interval15.withEndMillis((long) 9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = dateTimeZone21.getName((long) (byte) 10, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone21);
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval25.withPeriodBeforeEnd(readablePeriod27);
        boolean boolean29 = interval28.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTimeZone33.getName((long) (byte) 10, locale35);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone33);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.DateTime dateTime39 = interval37.getStart();
        boolean boolean40 = interval28.overlaps((org.joda.time.ReadableInterval) interval37);
        boolean boolean41 = interval17.equals((java.lang.Object) interval28);
        java.util.Locale.LanguageRange languageRange43 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] { languageRange43 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(11);
        org.joda.time.LocalDate.Property property58 = localDate57.dayOfMonth();
        org.joda.time.Chronology chronology59 = localDate57.getChronology();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((java.lang.Object) str53, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.dayOfWeek();
        org.joda.time.Interval interval62 = interval28.withChronology(chronology59);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology59);
        org.joda.time.Interval interval64 = new org.joda.time.Interval(1644572160225L, 1644572228675L, chronology59);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology59);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(interval62);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = dateTimeZone3.getName((long) (byte) 10, locale5);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone3);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(4);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone17);
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.DateTime dateTime23 = interval21.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfWeek(4);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime23.getZone();
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        int int31 = yearMonthDay30.getMonthOfYear();
        org.joda.time.LocalDate localDate32 = yearMonthDay30.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter37.getZone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withChronology(chronology39);
        int int41 = dateTimeFormatter37.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withDefaultYear((int) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology45);
        org.joda.time.DateTime dateTime47 = yearMonthDay46.toDateTimeAtMidnight();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight52 = yearMonthDay46.toDateMidnight(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeZone56.getName((long) (byte) 10, locale58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone56);
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.DateTime dateTime62 = interval60.getStart();
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfWeek(4);
        org.joda.time.DateTime dateTime65 = dateTime62.toDateTime();
        int int66 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(dateTimeZone49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter43.withZone(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 34546, dateTimeZone49);
        org.joda.time.DateTime dateTime70 = localDate32.toDateTimeAtCurrentTime(dateTimeZone49);
        int int71 = dateTime70.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = dateTimeZone4.getName((long) (byte) 10, locale6);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone4);
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfWeek(4);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (short) -1);
        int int18 = dateTime14.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (byte) 100, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean25 = timeOfDay22.isSupported(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property27 = timeOfDay20.property(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfWeek" + "'", str26, "dayOfWeek");
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(11);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.Chronology chronology6 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology6);
        long long9 = dateTimeField7.roundCeiling((long) 3);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology11);
        int int13 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay12);
        int int14 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeZone17.getName((long) (byte) 10, locale19);
        boolean boolean21 = locale19.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("Property[dayOfYear]");
        java.lang.String str24 = locale19.getDisplayScript(locale23);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale23.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeField7.getAsShortText(269, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 269");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 43200000L + "'", long9 == 43200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        long long3 = property2.remainder();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeZone9.getName((long) (byte) 10, locale11);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone9);
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.DateTime dateTime15 = interval13.getStart();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(4);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = dateTimeZone25.getName((long) (byte) 10, locale27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone25);
        org.joda.time.Interval interval30 = interval29.toInterval();
        org.joda.time.DateTime dateTime31 = interval29.getStart();
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfWeek(4);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, dateTimeZone36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeZone43.getName((long) (byte) 10, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = property39.getAsText(locale45);
        java.lang.String str49 = property2.getAsText(locale45);
        org.joda.time.Interval interval50 = property2.toInterval();
        java.util.Locale.LanguageRange languageRange52 = new java.util.Locale.LanguageRange("fra");
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] { languageRange52 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "France", "+00:00:00.010" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList60);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 13);
        org.joda.time.LocalDate localDate66 = localDate64.withDayOfYear(11);
        org.joda.time.LocalDate.Property property67 = localDate66.dayOfMonth();
        org.joda.time.Chronology chronology68 = localDate66.getChronology();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((java.lang.Object) str62, chronology68);
        long long70 = interval69.getStartMillis();
        boolean boolean71 = interval50.overlaps((org.joda.time.ReadableInterval) interval69);
        boolean boolean73 = interval69.isBefore((long) (-1));
        org.joda.time.DateTime dateTime74 = interval69.getStart();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = dateTimeZone78.getName((long) (byte) 10, locale80);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (byte) 1, (long) (byte) 1, dateTimeZone78);
        org.joda.time.Interval interval83 = interval82.toInterval();
        org.joda.time.DateTime dateTime84 = interval82.getStart();
        org.joda.time.Period period85 = interval82.toPeriod();
        boolean boolean86 = interval69.contains((org.joda.time.ReadableInterval) interval82);
        org.joda.time.DateTime dateTime87 = interval82.getStart();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 110L + "'", long3 == 110L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[monthOfYear]" + "'", str4, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "janvier" + "'", str49, "janvier");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644572384586L + "'", long70 == 1644572384586L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1644572147727L);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime3.withDayOfMonth(48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest33 {

    public static boolean debug = false;

    @Test
    public void test16501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16501");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node9 = null;
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getReturnType();
        java.lang.String str12 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test16502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16502");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("(NUMBER 1.0 37\n)");
        int int4 = stringPosition0.getEndLine();
        int int5 = stringPosition0.getStartLine();
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test16503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16503");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition2.getPositionOnEndLine();
        int int10 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node11 = null;
        typePosition2.setItem(node11);
        boolean boolean13 = typePosition2.hasBrackets();
        int int14 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node15 = typePosition2.getItem();
        boolean boolean16 = typePosition2.hasBrackets();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16504");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.lang.String str26 = jSDocInfo19.toString();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo19.getParameterNames();
        boolean boolean28 = jSDocInfo19.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JSDocInfo" + "'", str26, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16505");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node4.setStaticSourceFile(staticSourceFile7);
        boolean boolean9 = node4.isComma();
        node1.addChildrenToBack(node4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node12.setStaticSourceFile(staticSourceFile15);
        boolean boolean17 = node12.isComma();
        boolean boolean18 = node12.isBlock();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node12.copyInformationFromForTree(node21);
        node4.addChildToBack(node12);
        boolean boolean24 = node4.isReturn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16506");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node31.isWith();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        boolean boolean60 = node54.isFalse();
        boolean boolean61 = node54.isNoSideEffectsCall();
        java.lang.String str62 = node31.checkTreeEquals(node54);
        int int64 = node54.getIntProp(42);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable65 = node54.getAncestors();
        boolean boolean66 = node54.isCatch();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16507");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        boolean boolean61 = node33.isNE();
        boolean boolean62 = node33.isAdd();
        java.lang.String str63 = node33.toStringTree();
        boolean boolean64 = node33.isNew();
        com.google.javascript.rhino.jstype.JSType jSType65 = node33.getJSType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR [directives: []]\n    OR\n" + "'", str63, "OR [directives: []]\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSType65);
    }

    @Test
    public void test16508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16508");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo24.getImplementedInterfaces();
        boolean boolean28 = jSDocInfo24.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo24.getTemplateTypeNames();
        java.lang.String[] strArray36 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object[] objArray39 = strSet37.toArray();
        strSet37.clear();
        boolean boolean41 = strList29.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean56 = strList48.containsAll((java.util.Collection<java.lang.String>) strList55);
        int int57 = strList55.size();
        boolean boolean58 = strSet37.retainAll((java.util.Collection<java.lang.String>) strList55);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean60 = node19.isNew();
        boolean boolean61 = node19.isLabel();
        boolean boolean62 = node19.isTrue();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16509");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        boolean boolean21 = strList16.equals((java.lang.Object) booleanLiteralSet18);
        java.lang.Object obj22 = null;
        boolean boolean23 = strList16.equals(obj22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isInc();
        boolean boolean33 = strList16.contains((java.lang.Object) node25);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node25.getAncestors();
        boolean boolean35 = node25.isEmpty();
        boolean boolean36 = node25.isNE();
        boolean boolean37 = node25.isWhile();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16510");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        boolean boolean14 = node7.isSetterDef();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node16.isComma();
        node16.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node25.children();
        com.google.javascript.rhino.InputId inputId30 = null;
        node25.setInputId(inputId30);
        boolean boolean32 = node25.isName();
        java.lang.String str33 = node16.checkTreeEquals(node25);
        boolean boolean34 = node25.isInc();
        com.google.javascript.rhino.Node node35 = node7.srcrefTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node7.clonePropsFrom(node37);
        com.google.javascript.rhino.Node node40 = node7.removeFirstChild();
        java.lang.Object obj42 = node7.getProp((int) (short) 1);
        boolean boolean43 = node7.isFromExterns();
        boolean boolean44 = node7.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str33, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16511");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isArrayLit();
        boolean boolean22 = node15.isInc();
        boolean boolean23 = node15.isAssign();
        java.lang.String str24 = node15.getSourceFileName();
        boolean boolean25 = node15.isComma();
        int int26 = node11.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node27 = node15.cloneTree();
        boolean boolean28 = node15.isLocalResultCall();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16512");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "unknown");
        int int10 = node1.getChildCount();
        com.google.javascript.rhino.Node node11 = node1.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType12 = node11.getJSType();
        com.google.javascript.rhino.Node node13 = node11.getLastSibling();
        boolean boolean14 = node11.isExprResult();
        com.google.javascript.rhino.Node node15 = node11.cloneTree();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test16513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16513");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.util.Iterator<java.lang.String> strItor39 = strList36.iterator();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strList42.retainAll((java.util.Collection<java.lang.String>) strList47);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>> strCollectionList50 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.String>) strList47);
        int int51 = strList36.indexOf((java.lang.Object) strList47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo52.getParameterNames();
        java.util.Collection<java.lang.String> strCollection54 = jSDocInfo52.getReferences();
        boolean boolean55 = jSDocInfo52.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo52.getParameterType("NUMBER 1.0 37\n");
        java.util.Set<java.lang.String> strSet58 = jSDocInfo52.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo52.getImplementedInterfaces();
        int int60 = strList36.indexOf((java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.hasBaseType();
        jSDocInfo61.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo61.getTypedefType();
        boolean boolean66 = jSDocInfo61.isNoSideEffects();
        com.google.javascript.rhino.Node node67 = jSDocInfo61.getAssociatedNode();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo61.getSuppressions();
        strSet68.clear();
        int int70 = strSet68.size();
        boolean boolean71 = strList36.containsAll((java.util.Collection<java.lang.String>) strSet68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = strList36.add("OR 2 [jsdoc_info: JSDocInfo]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strCollectionList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(strCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test16514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16514");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node1.isNot();
        boolean boolean18 = node1.isReturn();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16515");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node5.children();
        boolean boolean9 = node5.isQualifiedName();
        com.google.javascript.rhino.Node node10 = node5.removeFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test16516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16516");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        boolean boolean21 = node14.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.hasChildren();
        com.google.javascript.rhino.Node node28 = node14.srcrefTree(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.children();
        boolean boolean30 = strSet7.remove((java.lang.Object) node23);
        com.google.javascript.rhino.Node node31 = node23.cloneTree();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isStringKey();
        boolean boolean52 = node42.isLocalResultCall();
        com.google.javascript.rhino.Node node53 = node42.removeChildren();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node55.setStaticSourceFile(staticSourceFile58);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        com.google.javascript.rhino.Node node71 = node61.useSourceInfoFromForTree(node68);
        boolean boolean72 = node55.hasChild(node61);
        boolean boolean73 = node61.isNot();
        boolean boolean74 = node61.isQuotedString();
        boolean boolean75 = node61.isNot();
        node53.addChildToFront(node61);
        com.google.javascript.rhino.Node node77 = node23.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable83 = node79.children();
        com.google.javascript.rhino.InputId inputId84 = null;
        node79.setInputId(inputId84);
        boolean boolean86 = node79.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node87 = node23.copyInformationFromForTree(node79);
        boolean boolean88 = node23.isCatch();
        boolean boolean89 = node23.isDec();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeIterable83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test16517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16517");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNEG\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NEG\n", "true", "OR", "OR\n", "OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n", "((OR 0 [jsdoc_info: JSDocInfo]\n))");
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo7.getParameterNames();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo7.getReferences();
        boolean boolean10 = jSDocInfo7.isConstant();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo7.getAuthors();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo7.getModifies();
        com.google.common.collect.ImmutableList[] immutableListArray14 = new com.google.common.collect.ImmutableList[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray15 = (com.google.common.collect.ImmutableList<java.lang.String>[]) immutableListArray14;
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray16 = strSet12.toArray(strListArray15);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList17 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>[]) strListArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.String>[] strCollectionArray18 = strList6.toArray((java.util.Collection<java.lang.String>[]) strListArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(immutableListArray14);
        org.junit.Assert.assertNotNull(strListArray15);
        org.junit.Assert.assertNotNull(strListArray16);
        org.junit.Assert.assertNotNull(strIterableList17);
    }

    @Test
    public void test16518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16518");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean35 = strList27.containsAll((java.util.Collection<java.lang.String>) strList34);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor36 = strList27.listIterator();
        int int37 = strList27.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList27.asList();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.Node node56 = node46.useSourceInfoFromForTree(node53);
        boolean boolean57 = node40.hasChild(node46);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        java.lang.String str62 = node59.toString();
        int int63 = node59.getChildCount();
        boolean boolean64 = node59.isGetProp();
        boolean boolean65 = node40.isEquivalentTo(node59);
        int int66 = strList27.indexOf((java.lang.Object) node40);
        boolean boolean67 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Iterator<java.lang.String> strItor68 = strList27.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = strList27.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor70 = strList69.listIterator();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str62, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strItor70);
    }

    @Test
    public void test16519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16519");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] { node14 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node[][] nodeArray29 = new com.google.javascript.rhino.Node[][] { nodeArray12, nodeArray20, nodeArray28 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder4.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = nodeArrayBuilder31.add(nodeArray32);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder34 = nodeArrayBuilder30.add(nodeArray32);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, nodeArray32);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(35, nodeArray32, 31, 42);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(15, nodeArray32, 48, 45);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(35, nodeArray32, 3, 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArrayBuilder33);
        org.junit.Assert.assertNotNull(nodeArrayBuilder34);
    }

    @Test
    public void test16520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16520");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test16521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16521");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        boolean boolean33 = node8.isRegExp();
        boolean boolean34 = node8.isVoid();
        boolean boolean35 = node8.isCatch();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16522");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        boolean boolean6 = strList2.add("(Named type with empty name component)");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = com.google.common.collect.ImmutableList.of();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strList7.spliterator();
        boolean boolean9 = strList2.equals((java.lang.Object) strSpliterator8);
        // The following exception was thrown during execution in test generation
        try {
            strList2.add(46, "OR NUMBER 1.0 37\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 46, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16523");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "NUMBER 41.0", 33, 13);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16524");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition1.getPositionOnEndLine();
        int int10 = typePosition1.getEndLine();
        boolean boolean11 = typePosition1.hasBrackets();
        int int12 = typePosition1.getEndLine();
        boolean boolean13 = typePosition1.hasBrackets();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16525");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        java.lang.String str2 = stringPosition0.getItem();
        stringPosition0.setItem("(NUMBER 1.0 37\n)");
        int int5 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(OR\n    OR\n)");
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(OR\n    OR\n)" + "'", str8, "(OR\n    OR\n)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test16526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16526");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.union(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet8.union(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet13.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet16.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet15.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet11.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet6.union(booleanLiteralSet15);
        boolean boolean24 = booleanLiteralSet15.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean28 = booleanLiteralSet26.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet29.intersection(booleanLiteralSet30);
        boolean boolean33 = booleanLiteralSet29.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet34.union(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet39.union(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet43.union(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet39.union(booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet36.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean51 = booleanLiteralSet49.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet46.intersection(booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet53.union(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet49.intersection(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet29.intersection(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet26.union(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = booleanLiteralSet15.union(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet1.intersection(booleanLiteralSet26);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test16527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str21 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = node23.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node38 = node32.getLastSibling();
        jSDocInfo0.setAssociatedNode(node32);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection40 = jSDocInfo0.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList41 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean42 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(markerCollection40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test16528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        boolean boolean4 = jSDocInfo0.isDefine();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test16529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16529");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.xor(ternaryValue1);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue3.xor(ternaryValue4);
        boolean boolean7 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean13 = ternaryValue11.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str15 = ternaryValue14.toString();
        boolean boolean17 = ternaryValue14.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue11.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue8.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue3.or(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.xor(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue19.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue1.xor(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.not();
        boolean boolean28 = ternaryValue24.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "unknown" + "'", str15, "unknown");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        boolean boolean12 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.getSourceFileName();
        boolean boolean23 = node17.isDelProp();
        boolean boolean24 = node17.isCatch();
        boolean boolean25 = strSet13.equals((java.lang.Object) boolean24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16531");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node19 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.hasMoreThanOneChild();
        boolean boolean27 = node21.isFunction();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node node29 = node19.srcrefTree(node21);
        boolean boolean30 = node19.isVar();
        com.google.javascript.rhino.Node node31 = node19.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = node31.isWith();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test16532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16532");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("");
        java.lang.String str11 = stringPosition0.getItem();
        int int12 = stringPosition0.getStartLine();
        stringPosition0.setItem("([OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component])");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test16533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16533");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        boolean boolean6 = node1.isVoid();
        boolean boolean7 = node1.isFor();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int13 = node12.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType26 = node21.getJSType();
        boolean boolean27 = node21.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node28 = node19.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int34 = node33.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = node21.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = node12.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean39 = node38.isVoid();
        boolean boolean40 = node38.isAssign();
        boolean boolean41 = node38.isName();
        com.google.javascript.rhino.Node node42 = node38.getFirstChild();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test16534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16534");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isAdd();
        boolean boolean8 = node1.isQuotedString();
        int int10 = node1.getIntProp((int) (byte) 1);
        boolean boolean11 = node1.isVarArgs();
        node1.setVarArgs(true);
        java.lang.String str14 = node1.getQualifiedName();
        int int15 = node1.getChildCount();
        boolean boolean16 = node1.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16535");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.hasMoreThanOneChild();
        boolean boolean14 = node3.isNumber();
        int int15 = node3.getCharno();
        boolean boolean16 = node3.isGetProp();
        com.google.javascript.rhino.Node node17 = node3.getNext();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test16536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16536");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str4 = node3.toStringTree();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isIf();
        com.google.javascript.rhino.Node node17 = node8.copyInformationFromForTree(node11);
        boolean boolean18 = node8.isEmpty();
        int int19 = node3.getIndexOfChild(node8);
        boolean boolean20 = node8.isNull();
        boolean boolean21 = node8.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 4.0 1\n" + "'", str4, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16537");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) ' ', "[]");
        boolean boolean3 = node2.isOr();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node2.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder4);
    }

    @Test
    public void test16538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16538");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        boolean boolean10 = node3.isParamList();
        boolean boolean11 = node3.isOptionalArg();
        boolean boolean12 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isStringKey();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        int int38 = node36.getType();
        com.google.javascript.rhino.InputId inputId39 = node36.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        node36.setJSDocInfo(jSDocInfo40);
        com.google.javascript.rhino.Node node42 = node23.srcref(node36);
        boolean boolean43 = node3.isEquivalentToTyped(node36);
        boolean boolean45 = node3.getBooleanProp(37);
        boolean boolean46 = node3.isGetProp();
        com.google.javascript.rhino.Node node48 = node3.getAncestor(155648);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node48);
    }

    @Test
    public void test16539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16539");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        int int20 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node10.children();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isComma();
        boolean boolean29 = node23.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node23, "unknown");
        int int32 = node23.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getFileOverview();
        java.lang.String str35 = jSDocInfo33.getFileOverview();
        java.lang.String str36 = jSDocInfo33.getMeaning();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        boolean boolean44 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFrom(node51);
        jSDocInfo33.setAssociatedNode(node38);
        boolean boolean60 = node23.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node61 = node10.copyInformationFrom(node23);
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node61.getJsDocBuilderForNode();
        fileLevelJsDocBuilder63.append("NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
    }

    @Test
    public void test16540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16540");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 37\n");
        com.google.javascript.rhino.Node node2 = node1.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int5 = sideEffectFlags4.valueOf();
        sideEffectFlags4.clearSideEffectFlags();
        sideEffectFlags4.setThrows();
        sideEffectFlags4.setThrows();
        sideEffectFlags4.clearAllFlags();
        sideEffectFlags4.clearSideEffectFlags();
        sideEffectFlags4.setReturnsTainted();
        sideEffectFlags4.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test16541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16541");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [synthetic: 1]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test16542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16542");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node3.getAncestors();
        java.lang.String str14 = node3.toString(true, false, false);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node16.getCharno();
        boolean boolean21 = node16.isName();
        boolean boolean22 = node16.isNE();
        boolean boolean23 = node16.isIn();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        com.google.javascript.rhino.Node node29 = node27.getParent();
        boolean boolean30 = node29.isDefaultCase();
        int int31 = node16.getIndexOfChild(node29);
        boolean boolean32 = node29.isLabelName();
        boolean boolean33 = node29.wasEmptyNode();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        int int39 = node35.getCharno();
        boolean boolean40 = node35.isName();
        boolean boolean41 = node35.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = new com.google.javascript.rhino.JSTypeExpression(node35, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression43);
        boolean boolean46 = jSTypeExpression43.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = node48.isName();
        boolean boolean54 = node48.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node48, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        com.google.javascript.rhino.Node node58 = jSTypeExpression57.getRoot();
        boolean boolean59 = jSTypeExpression57.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList60 = com.google.common.collect.ImmutableList.of(jSTypeExpression43, jSTypeExpression57);
        boolean boolean61 = jSTypeExpression57.isOptionalArg();
        com.google.javascript.rhino.Node node62 = jSTypeExpression57.getRoot();
        node29.addChildToFront(node62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        node65.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder72 = node65.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        boolean boolean78 = node74.isNot();
        boolean boolean79 = node74.isIf();
        boolean boolean80 = node74.isNoSideEffectsCall();
        int int81 = node74.getType();
        boolean boolean82 = node74.isAssign();
        com.google.javascript.rhino.Node node83 = node65.copyInformationFromForTree(node74);
        boolean boolean84 = node62.isEquivalentToTyped(node74);
        com.google.javascript.rhino.Node node85 = node3.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = null;
        node3.setStaticSourceFile(staticSourceFile86);
        boolean boolean88 = node3.isSetterDef();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR" + "'", str14, "OR");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test16543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16543");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node33);
        java.lang.Object obj38 = node36.getProp(38);
        node36.setCharno(2);
        boolean boolean41 = node36.isInstanceOf();
        boolean boolean42 = strList13.equals((java.lang.Object) node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node36.siblings();
        boolean boolean44 = node36.isAssign();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16544");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test16545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16545");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        node14.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node23.children();
        com.google.javascript.rhino.InputId inputId28 = null;
        node23.setInputId(inputId28);
        boolean boolean30 = node23.isName();
        java.lang.String str31 = node14.checkTreeEquals(node23);
        boolean boolean32 = node23.isInc();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = node34.copyInformationFromForTree(node40);
        com.google.javascript.rhino.InputId inputId42 = node34.getInputId();
        node23.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node44 = node3.useSourceInfoFromForTree(node23);
        boolean boolean45 = node23.isSyntheticBlock();
        node23.putIntProp(44, 36);
        boolean boolean49 = node23.isOnlyModifiesThisCall();
        boolean boolean50 = node23.isAnd();
        boolean boolean51 = node23.isName();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16546");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo6.getParameterNames();
        boolean boolean8 = jSDocInfo6.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo6.getThrownTypes();
        boolean boolean10 = jSDocInfo6.isIdGenerator();
        boolean boolean11 = jSDocInfo6.hasEnumParameterType();
        boolean boolean12 = strSet5.remove((java.lang.Object) jSDocInfo6);
        boolean boolean13 = jSDocInfo6.isNoAlias();
        java.lang.String str14 = jSDocInfo6.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test16547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16547");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor23 = strList12.listIterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean38 = strList30.containsAll((java.util.Collection<java.lang.String>) strList37);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList30.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = strList30.asList();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isTypeOf();
        boolean boolean47 = node42.wasEmptyNode();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isTypeOf();
        boolean boolean54 = node49.isDelProp();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node60 = node58.getParent();
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node58.setJSType(jSType61);
        java.lang.String str63 = node58.toString();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        node65.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        node65.setStaticSourceFile(staticSourceFile68);
        boolean boolean70 = node65.isComma();
        node65.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList73 = com.google.common.collect.ImmutableList.of(node42, node49, node58, node65);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        boolean boolean79 = node77.isLabel();
        boolean boolean80 = node77.isContinue();
        com.google.javascript.rhino.Node node81 = node49.copyInformationFrom(node77);
        node77.setCharno(4095);
        int int84 = strList40.indexOf((java.lang.Object) node77);
        java.util.Spliterator<java.lang.String> strSpliterator85 = strList40.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = strList40.reverse();
        boolean boolean87 = strList12.containsAll((java.util.Collection<java.lang.String>) strList86);
        java.lang.Object[] objArray88 = strList86.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor89 = strList86.iterator();
        java.util.Iterator<java.lang.String> strItor90 = strList86.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = strList86.set(35, "TRUE\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "OR" + "'", str63, "OR");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertNotNull(strItor90);
    }

    @Test
    public void test16548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16548");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(47, 38, 409600, 213028);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test16549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16549");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        node15.removeProp(48);
        com.google.javascript.rhino.Node node26 = node15.getAncestor(0);
        boolean boolean27 = node15.isUnscopedQualifiedName();
        java.lang.String str28 = node15.toString();
        com.google.javascript.rhino.Node node29 = node15.removeFirstChild();
        com.google.javascript.rhino.Node node30 = node29.getLastSibling();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test16550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16550");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        java.lang.String str7 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test16551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16551");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 213092, 0, 15);
        boolean boolean4 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16552");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(1, "((OR))", (int) (byte) 1, 10);
        boolean boolean25 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node26 = node14.srcref(node24);
        node26.setIsSyntheticBlock(false);
        boolean boolean29 = node26.isNull();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16553");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test16554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16554");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        boolean boolean61 = node27.isSyntheticBlock();
        node27.setIsSyntheticBlock(true);
        node27.putBooleanProp((int) (short) 100, false);
        boolean boolean67 = node27.isHook();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node27.children();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
    }

    @Test
    public void test16555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16555");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker7.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker7.getName();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(stringPosition28);
    }

    @Test
    public void test16556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16556");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getDescription();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo11.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str14 = jSDocInfo13.getFileOverview();
        java.lang.String str15 = jSDocInfo13.getFileOverview();
        boolean boolean16 = jSDocInfo13.isConstant();
        jSDocInfo13.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo13.setVisibility(visibility19);
        jSDocInfo11.setVisibility(visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isNoShadow();
        java.lang.String str24 = jSDocInfo22.getMeaning();
        com.google.javascript.rhino.Node node25 = jSDocInfo22.getAssociatedNode();
        java.lang.String str26 = jSDocInfo22.getLicense();
        java.lang.String str27 = jSDocInfo22.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isNoShadow();
        boolean boolean30 = jSDocInfo28.isNoShadow();
        boolean boolean31 = jSDocInfo28.hasModifies();
        boolean boolean32 = jSDocInfo28.isExterns();
        boolean boolean33 = jSDocInfo28.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList37 = com.google.common.collect.ImmutableList.of(visibility34, visibility35, visibility36);
        jSDocInfo28.setVisibility(visibility36);
        jSDocInfo22.setVisibility(visibility36);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo41.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str44 = jSDocInfo43.getFileOverview();
        java.lang.String str45 = jSDocInfo43.getFileOverview();
        boolean boolean46 = jSDocInfo43.isConstant();
        jSDocInfo43.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo43.setVisibility(visibility49);
        jSDocInfo41.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasTypedefType();
        java.lang.String str54 = jSDocInfo52.toString();
        boolean boolean56 = jSDocInfo52.hasParameterType("Unknown class name");
        boolean boolean57 = jSDocInfo52.isIdGenerator();
        boolean boolean58 = jSDocInfo52.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.isNoShadow();
        boolean boolean63 = jSDocInfo61.isNoShadow();
        boolean boolean64 = jSDocInfo61.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList68 = com.google.common.collect.ImmutableList.of(visibility65, visibility66, visibility67);
        jSDocInfo61.setVisibility(visibility67);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList70 = com.google.common.collect.ImmutableList.of(visibility19, visibility36, visibility40, visibility49, visibility59, visibility67);
        boolean boolean71 = strList10.contains((java.lang.Object) visibility36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList37);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JSDocInfo" + "'", str54, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + visibility65 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility65.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList68);
        org.junit.Assert.assertNotNull(visibilityList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test16557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16557");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        boolean boolean20 = node10.isLocalResultCall();
        boolean boolean22 = node10.getBooleanProp((int) (byte) 0);
        boolean boolean23 = node10.isFromExterns();
        boolean boolean24 = node10.isTry();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16558");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        java.util.Iterator<java.lang.String> strItor27 = strSet17.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo28.getParameterNames();
        boolean boolean30 = strSet29.isEmpty();
        boolean boolean31 = strSet17.contains((java.lang.Object) strSet29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet29.add("()");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16559");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.isConstant();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16561");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        int int51 = node38.getSourceOffset();
        boolean boolean52 = node38.isCase();
        com.google.javascript.rhino.Node node53 = node38.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node38.getAncestors();
        boolean boolean55 = node38.isBlock();
        com.google.javascript.rhino.Node node56 = node38.getParent();
        com.google.javascript.rhino.jstype.JSType jSType57 = node56.getJSType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(jSType57);
    }

    @Test
    public void test16562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16562");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList6.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList24.containsAll((java.util.Collection<java.lang.String>) strList31);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor33 = strList24.listIterator();
        java.lang.Object[] objArray34 = strList24.toArray();
        boolean boolean35 = strList6.containsAll((java.util.Collection<java.lang.String>) strList24);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        boolean boolean43 = node37.isFalse();
        boolean boolean44 = node37.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node48.isLabel();
        boolean boolean51 = node48.isContinue();
        node48.setVarArgs(false);
        com.google.javascript.rhino.Node node54 = node37.srcrefTree(node48);
        boolean boolean55 = strList6.contains((java.lang.Object) node48);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor57 = strList6.listIterator((int) (short) 0);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int59 = stringPosition58.getEndLine();
        java.lang.String str60 = stringPosition58.getItem();
        stringPosition58.setItem("(NUMBER 1.0 37\n)");
        int int63 = stringPosition58.getPositionOnEndLine();
        stringPosition58.setItem("(OR\n    OR\n)");
        int int66 = strList6.lastIndexOf((java.lang.Object) stringPosition58);
        int int67 = stringPosition58.getStartLine();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test16563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16563");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = jSTypeExpression8.isOptionalArg();
        com.google.javascript.rhino.Node node10 = jSTypeExpression8.getRoot();
        boolean boolean11 = jSTypeExpression8.isVarArgs();
        boolean boolean12 = jSTypeExpression8.isOptionalArg();
        com.google.javascript.rhino.Node node13 = jSTypeExpression8.getRoot();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test16564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16564");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test16565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16565");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str8 = jSDocInfo0.toString();
        jSDocInfo0.setDeprecated(false);
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        boolean boolean12 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test16566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16566");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 0, (int) '4');
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        node3.putIntProp(48, (int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test16567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16567");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        int int7 = node5.getType();
        com.google.javascript.rhino.InputId inputId8 = node5.getInputId();
        com.google.javascript.rhino.Node node9 = node5.getParent();
        boolean boolean10 = node9.isTry();
        boolean boolean11 = node9.isNot();
        boolean boolean12 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, node9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        boolean boolean20 = node17.isVarArgs();
        int int21 = node17.getChildCount();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = node23.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node31 = node17.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node31);
        boolean boolean33 = node31.isSyntheticBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node31.getJSDocInfo();
        boolean boolean35 = node31.hasChildren();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) 'a', node13, node31, (int) (short) 0, 40);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16568");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isSwitch();
        boolean boolean13 = node11.isTrue();
        boolean boolean14 = node11.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16569");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        boolean boolean4 = node1.isVarArgs();
        int int5 = node1.getChildCount();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        boolean boolean7 = node6.isAssign();
        boolean boolean8 = node6.isSwitch();
        boolean boolean10 = node6.getBooleanProp(36);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16570");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((((OR\n    OR\n))))", 30, 40);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        java.util.stream.Stream<java.lang.String> strStream20 = strList2.stream();
        java.util.Spliterator<java.lang.String> strSpliterator21 = strList2.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getParameterNames();
        boolean boolean24 = jSDocInfo22.isOverride();
        int int25 = strList2.lastIndexOf((java.lang.Object) boolean24);
        boolean boolean26 = strList2.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor27 = strList2.listIterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor27);
    }

    @Test
    public void test16572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16572");
        java.lang.String[] strArray14 = new java.lang.String[] { "", "OR [jsdoc_info: JSDocInfo]", "NUMBER 4.0 1\n", "Named type with empty name component", "unknown", "OR\n", "Unknown class name", "Not declared as a type name", "OR [jsdoc_info: JSDocInfo]\n", "OR\n", "OR [jsdoc_info: JSDocInfo]", "unknown", "NUMBER 4.0 1\n", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet15.spliterator();
        int int18 = strSet15.size();
        int int19 = strSet15.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasTypedefType();
        java.lang.String str22 = jSDocInfo20.toString();
        boolean boolean24 = jSDocInfo20.hasParameterType("Unknown class name");
        boolean boolean25 = jSDocInfo20.isConstructor();
        java.lang.String str26 = jSDocInfo20.getOriginalCommentString();
        boolean boolean27 = strSet15.remove((java.lang.Object) jSDocInfo20);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JSDocInfo" + "'", str22, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16573");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getBaseType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo12.getParameterNames();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        int int23 = node19.getCharno();
        boolean boolean24 = node19.isContinue();
        boolean boolean25 = strSet17.equals((java.lang.Object) node19);
        node11.setDirectives(strSet17);
        java.util.Iterator<java.lang.String> strItor27 = strSet17.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo28.getParameterNames();
        boolean boolean30 = strSet29.isEmpty();
        boolean boolean31 = strSet17.contains((java.lang.Object) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo32.getBaseType();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo32.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean52 = strList44.containsAll((java.util.Collection<java.lang.String>) strList51);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor53 = strList44.listIterator();
        boolean boolean54 = strSet37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray68 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        java.lang.String[] strArray74 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray75 = strSet69.toArray((java.lang.Comparable<java.lang.String>[]) strArray74);
        java.lang.CharSequence[] charSequenceArray76 = strList44.toArray((java.lang.CharSequence[]) strArray74);
        boolean boolean78 = strList44.contains((java.lang.Object) (byte) 1);
        boolean boolean79 = strList44.isEmpty();
        boolean boolean80 = strSet17.containsAll((java.util.Collection<java.lang.String>) strList44);
        // The following exception was thrown during execution in test generation
        try {
            strList44.add(9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strComparableArray75);
        org.junit.Assert.assertNotNull(charSequenceArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test16574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16574");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition0.setItem("OR\n");
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getEndLine();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR\n" + "'", str10, "OR\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16575");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        int int25 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList13.asList();
        int int27 = strList13.size();
        // The following exception was thrown during execution in test generation
        try {
            strList13.add((int) (short) 1, "Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nOR [synthetic: 1]\n    OR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n\n\nSubtree2: OR [synthetic: 1]\n    OR [jsdoc_info: JSDocInfo]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
    }

    @Test
    public void test16576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16576");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.isWith();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", 54, 4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(46, node2, node11);
        java.lang.String str13 = node12.getSourceFileName();
        boolean boolean14 = node12.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16577");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 39);
        boolean boolean3 = node2.isVoid();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isReturn();
        com.google.javascript.rhino.InputId inputId11 = node6.getInputId();
        boolean boolean12 = node6.isAdd();
        boolean boolean13 = node6.isQuotedString();
        int int15 = node6.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        node17.setOptionalArg(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        com.google.javascript.rhino.Node node43 = node33.useSourceInfoFromForTree(node40);
        boolean boolean44 = node43.isSetterDef();
        com.google.javascript.rhino.Node node45 = node43.getLastChild();
        boolean boolean46 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(1, node6, node17, node31, node43);
        node31.detachChildren();
        com.google.javascript.rhino.InputId inputId49 = null;
        node31.setInputId(inputId49);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, node2, node31, 40, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16579");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        java.lang.String str11 = node8.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node17 = node15.getParent();
        com.google.javascript.rhino.Node node18 = node8.useSourceInfoFromForTree(node15);
        boolean boolean19 = node2.hasChild(node8);
        boolean boolean20 = node8.isNot();
        node8.addSuppression("Not declared as a type name");
        boolean boolean23 = node8.isNumber();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        boolean boolean30 = node25.isVarArgs();
        boolean boolean31 = node25.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isDefaultCase();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(15, node8, node25, node40);
        boolean boolean44 = node8.isIf();
        com.google.javascript.rhino.Node node46 = node8.getAncestor(1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = node46.getExistingIntProp(213092);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 213092");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str11, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test16580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16580");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = null;
        node3.setJSDocInfo(jSDocInfo7);
        boolean boolean9 = node3.isDo();
        boolean boolean10 = node3.isArrayLit();
        node3.detachChildren();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node3.addChildrenToFront(node13);
        boolean boolean15 = node13.isGetterDef();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node17.setStaticSourceFile(staticSourceFile20);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.Node node33 = node23.useSourceInfoFromForTree(node30);
        boolean boolean34 = node17.hasChild(node23);
        boolean boolean35 = node23.isNot();
        node23.addSuppression("Not declared as a type name");
        boolean boolean38 = node23.isNumber();
        com.google.javascript.rhino.Node node40 = node23.getAncestor(0);
        com.google.javascript.rhino.Node node41 = node13.useSourceInfoFromForTree(node40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test16581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16581");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test16582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16582");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        boolean boolean8 = jSDocInfo0.isConstant();
        jSDocInfo0.addSuppression("(Unknown class name)");
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.isImplicitCast();
        boolean boolean13 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16583");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder3 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node5 };
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node[][] nodeArray28 = new com.google.javascript.rhino.Node[][] { nodeArray11, nodeArray19, nodeArray27 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = nodeArrayBuilder3.add(nodeArray28);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder30.add(nodeArray31);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder33 = nodeArrayBuilder29.add(nodeArray31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, nodeArray31);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(43, nodeArray31, 12, 41);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(131072, nodeArray31, 35, 38);
        boolean boolean41 = node40.isOptionalArg();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str24, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArrayBuilder29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertNotNull(nodeArrayBuilder33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test16584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16584");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        java.lang.String str4 = jSDocInfo0.getVersion();
        boolean boolean5 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test16585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16585");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        int int2 = strSet1.size();
        java.lang.Object[] objArray3 = strSet1.toArray();
        java.lang.Object[] objArray4 = strSet1.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasBaseType();
        java.lang.String str7 = jSDocInfo5.getFileOverview();
        int int8 = jSDocInfo5.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getEnumParameterType();
        boolean boolean10 = jSDocInfo5.isExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo5.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo5.getExtendedInterfaces();
        boolean boolean13 = jSDocInfo5.isInterface();
        java.lang.String str14 = jSDocInfo5.getDescription();
        boolean boolean15 = strSet1.equals((java.lang.Object) str14);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16586");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        boolean boolean17 = node14.isLabelName();
        boolean boolean18 = node14.wasEmptyNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        node14.setType((int) (short) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node14.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder22.append("");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
    }

    @Test
    public void test16587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16587");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setLicense("BITXOR 0");
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test16588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16588");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = node15.getAncestor(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        int int24 = node22.getType();
        com.google.javascript.rhino.InputId inputId25 = node22.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isNot();
        boolean boolean35 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.Node node40 = node30.copyInformationFromForTree(node37);
        java.lang.Object obj42 = node40.getProp(38);
        com.google.javascript.rhino.Node node43 = node22.srcrefTree(node40);
        node17.putProp(6, (java.lang.Object) node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasBaseType();
        jSDocInfo45.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getBaseType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        int int56 = node52.getCharno();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = strSet50.equals((java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        node60.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node64 = node62.getParent();
        node62.setIsSyntheticBlock(true);
        boolean boolean67 = node62.isContinue();
        boolean boolean68 = strSet50.equals((java.lang.Object) node62);
        java.lang.Object[] objArray69 = strSet50.toArray();
        java.lang.Object[] objArray70 = strSet50.toArray();
        node22.setDirectives(strSet50);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet50.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet50.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strSet50.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str76 = jSDocInfo75.getFileOverview();
        java.lang.String str77 = jSDocInfo75.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo75.getThrownTypes();
        boolean boolean79 = jSDocInfo75.isHidden();
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = jSDocInfo75.getTemplateTypeNames();
        boolean boolean81 = strSet50.equals((java.lang.Object) jSDocInfo75);
        java.lang.Object[] objArray82 = strSet50.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strSet50.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
    }

    @Test
    public void test16589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16589");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
    }

    @Test
    public void test16590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16590");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str5 = node4.toStringTree();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isNot();
        boolean boolean17 = node12.isIf();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node12);
        boolean boolean19 = node9.isEmpty();
        int int20 = node4.getIndexOfChild(node9);
        boolean boolean21 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = node9.detachFromParent();
        node22.putBooleanProp(31, false);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node22, 131072, 29);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 4.0 1\n" + "'", str5, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test16591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16591");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40999, "JSDocInfo", 213044, 30);
        boolean boolean6 = node4.getBooleanProp(45);
        boolean boolean7 = node4.isFromExterns();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test16592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16592");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        int int20 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node10.children();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isComma();
        boolean boolean29 = node23.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node23, "unknown");
        int int32 = node23.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getFileOverview();
        java.lang.String str35 = jSDocInfo33.getFileOverview();
        java.lang.String str36 = jSDocInfo33.getMeaning();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        boolean boolean44 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node51.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node46.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node38.useSourceInfoFrom(node51);
        jSDocInfo33.setAssociatedNode(node38);
        boolean boolean60 = node23.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node61 = node10.copyInformationFrom(node23);
        boolean boolean62 = node61.isNew();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node61.getJsDocBuilderForNode();
        boolean boolean64 = node61.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test16593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16593");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        int int68 = node64.getLineno();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        boolean boolean74 = node72.isLabel();
        boolean boolean75 = node72.isContinue();
        com.google.javascript.rhino.Node node76 = node72.removeFirstChild();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        int int82 = node78.getCharno();
        com.google.javascript.rhino.Node node83 = node72.useSourceInfoIfMissingFrom(node78);
        boolean boolean84 = node83.isLocalResultCall();
        java.lang.Object obj86 = node83.getProp(51);
        boolean boolean87 = node83.isWhile();
        boolean boolean88 = node83.isName();
        com.google.javascript.rhino.Node node89 = node64.clonePropsFrom(node83);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test16594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16594");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isExport();
        boolean boolean4 = jSDocInfo0.isDefine();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR");
        java.lang.String str8 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.hasParameter("(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16595");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node7.setStaticSourceFile(staticSourceFile10);
        boolean boolean12 = node7.isComma();
        boolean boolean13 = node7.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node7, "unknown");
        int int16 = node7.getChildCount();
        jSDocInfo0.setAssociatedNode(node7);
        boolean boolean18 = node7.isNE();
        int int19 = node7.getSourcePosition();
        boolean boolean20 = node7.isDec();
        boolean boolean21 = node7.isNot();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.getSourceFileName();
        boolean boolean31 = node25.isDelProp();
        boolean boolean32 = node25.isCatch();
        com.google.javascript.rhino.Node node33 = node7.srcref(node25);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test16596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isExport();
        java.lang.String str4 = jSDocInfo0.getVersion();
        int int5 = jSDocInfo0.getParameterCount();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16597");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int5 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isName();
        boolean boolean13 = node7.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node7, "Unknown class name");
        node4.addChildrenToFront(node7);
        java.lang.String str17 = node7.getSourceFileName();
        boolean boolean18 = node7.isBreak();
        boolean boolean19 = node7.isObjectLit();
        node7.setOptionalArg(false);
        boolean boolean23 = node7.getBooleanProp(43);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16598");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        java.lang.String str6 = node3.toString();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node19.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node[][] nodeArray26 = new com.google.javascript.rhino.Node[][] { nodeArray9, nodeArray17, nodeArray25 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder27 = nodeArrayBuilder1.add(nodeArray26);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder30 = nodeArrayBuilder28.add(nodeArray29);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder27.add(nodeArray29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, nodeArray29);
        int int33 = node32.getType();
        boolean boolean34 = node32.isNoSideEffectsCall();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str6, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str14, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArrayBuilder27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArrayBuilder30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16599");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isOnlyModifiesThisCall();
        node1.setWasEmptyNode(true);
        java.util.Set<java.lang.String> strSet9 = node1.getDirectives();
        boolean boolean10 = node1.isAssignAdd();
        boolean boolean11 = node1.isParamList();
        boolean boolean12 = node1.isNoSideEffectsCall();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(213028);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16600");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        int int17 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean18 = jSDocInfo0.isInterface();
        int int19 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str21 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isNot();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = node23.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node38 = node32.getLastSibling();
        jSDocInfo0.setAssociatedNode(node32);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection40 = jSDocInfo0.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList41 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean42 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(markerCollection40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test16601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16601");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean15 = strList7.containsAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Spliterator<java.lang.String> strSpliterator16 = strList7.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = strList7.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor18 = strList7.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean21 = ternaryValue19.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str26 = ternaryValue25.toString();
        boolean boolean28 = ternaryValue25.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue19.and(ternaryValue25);
        int int31 = strList7.indexOf((java.lang.Object) ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue0.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str34 = ternaryValue33.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean37 = ternaryValue35.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str39 = ternaryValue38.toString();
        boolean boolean41 = ternaryValue38.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue35.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue33.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue32.or(ternaryValue42);
        boolean boolean47 = ternaryValue45.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue45.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue48.not();
        java.lang.String str50 = ternaryValue48.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "unknown" + "'", str26, "unknown");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "unknown" + "'", str34, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "unknown" + "'", str39, "unknown");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "false" + "'", str50, "false");
    }

    @Test
    public void test16602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16602");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isReturn();
        com.google.javascript.rhino.InputId inputId20 = node15.getInputId();
        boolean boolean21 = node15.isAdd();
        node3.addChildrenToFront(node15);
        boolean boolean23 = node3.isNull();
        boolean boolean24 = node3.hasChildren();
        java.lang.String[] strArray31 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.Object[] objArray34 = strSet32.toArray();
        strSet32.clear();
        java.lang.Object[] objArray36 = strSet32.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray37 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray38 = strSet32.toArray(fileLevelJsDocBuilderArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        java.lang.Object[] objArray48 = strSet46.toArray();
        int int49 = strSet46.size();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet46.spliterator();
        boolean boolean52 = strSet46.add("OR [synthetic: 1]");
        boolean boolean53 = strSet32.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Iterator<java.lang.String> strItor54 = strSet46.iterator();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node65 = node61.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node61.getStaticSourceFile();
        com.google.javascript.rhino.Node node67 = node56.copyInformationFromForTree(node61);
        boolean boolean68 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        boolean boolean74 = node70.isTypeOf();
        boolean boolean75 = node70.isVarArgs();
        boolean boolean76 = node70.isIn();
        node61.addChildToFront(node70);
        java.lang.String str78 = node61.toStringTree();
        int int79 = node61.getSourcePosition();
        com.google.javascript.rhino.Node node80 = node61.removeChildren();
        boolean boolean81 = strSet46.contains((java.lang.Object) node61);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strSet46.spliterator();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet46);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = node3.getExistingIntProp(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 16");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray37);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str59, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n" + "'", str78, "OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSpliterator82);
    }

    @Test
    public void test16603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16603");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList62.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strList62.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean85 = jSDocInfo84.hasBaseType();
        jSDocInfo84.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo84.getBaseType();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo84.getParameterNames();
        boolean boolean90 = strList62.remove((java.lang.Object) jSDocInfo84);
        int int91 = jSDocInfo84.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test16604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16604");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isConstructor();
        jSDocInfo0.setLicense("false");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet9.parallelStream();
        java.util.Iterator<java.lang.String> strItor11 = strSet9.iterator();
        boolean boolean12 = strSet9.isEmpty();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean15 = strSet9.equals((java.lang.Object) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16605");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int7 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node6, node9, (int) '4', (int) (byte) 100);
        node23.removeProp(4);
        boolean boolean26 = node23.isLabel();
        boolean boolean27 = node23.isWhile();
        boolean boolean28 = node23.isBreak();
        boolean boolean29 = node23.isNew();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(48, node23);
        boolean boolean31 = node30.isFor();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16606");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        node14.setLength(45);
        boolean boolean17 = node14.isStringKey();
        node14.setVarArgs(false);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.children();
        boolean boolean26 = node21.isVoid();
        boolean boolean27 = node21.isFor();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int33 = node32.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node39 = node37.getParent();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType46 = node41.getJSType();
        boolean boolean47 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node39.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int54 = node53.getSideEffectFlags();
        com.google.javascript.rhino.Node node55 = node41.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder56 = node53.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node57 = node32.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node58 = node21.useSourceInfoIfMissingFromForTree(node53);
        node14.addChildToBack(node53);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        com.google.javascript.rhino.Node node71 = node61.useSourceInfoFromForTree(node68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        int int77 = node73.getCharno();
        boolean boolean78 = node73.isName();
        boolean boolean79 = node73.isNE();
        boolean boolean80 = node73.isLabelName();
        boolean boolean81 = node68.isEquivalentToTyped(node73);
        java.util.Set<java.lang.String> strSet82 = node68.getDirectives();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean87 = node86.isRegExp();
        boolean boolean88 = node86.isName();
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        node86.setJSType(jSType89);
        boolean boolean91 = node86.isBreak();
        boolean boolean92 = node68.isEquivalentTo(node86);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable93 = node86.siblings();
        node53.addChildToBack(node86);
        boolean boolean95 = node53.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeIterable93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test16607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16607");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.Object obj39 = null;
        boolean boolean40 = strSet13.remove(obj39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo41.getImplementedInterfaces();
        boolean boolean45 = jSDocInfo41.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo41.getTemplateTypeNames();
        java.lang.String[] strArray53 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        strSet54.clear();
        boolean boolean58 = strList46.containsAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean73 = strList65.containsAll((java.util.Collection<java.lang.String>) strList72);
        int int74 = strList72.size();
        boolean boolean75 = strSet54.retainAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean76 = strSet13.removeAll((java.util.Collection<java.lang.String>) strList72);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition77.setItem("NUMBER 4.0 1\n");
        stringPosition77.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition77.setPositionInformation((int) '#', 44, 51, 50);
        int int90 = strList72.indexOf((java.lang.Object) '#');
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor91 = strList72.iterator();
        java.util.Iterator<java.lang.String> strItor92 = strList72.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList72.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(strItor91);
        org.junit.Assert.assertNotNull(strItor92);
    }

    @Test
    public void test16608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16608");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        boolean boolean20 = strSet13.add("unknown");
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList21 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo22.getImplementedInterfaces();
        boolean boolean26 = jSDocInfo22.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo22.getTemplateTypeNames();
        java.lang.String[] strArray34 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.lang.Object[] objArray37 = strSet35.toArray();
        strSet35.clear();
        boolean boolean39 = strList27.containsAll((java.util.Collection<java.lang.String>) strSet35);
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = strList27.reverse();
        boolean boolean41 = strSet13.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet13.spliterator();
        java.lang.String[] strArray56 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        java.lang.String[] strArray62 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray63 = strSet57.toArray((java.lang.Comparable<java.lang.String>[]) strArray62);
        strSet57.clear();
        java.lang.Object[] objArray65 = strSet57.toArray();
        boolean boolean66 = strSet13.retainAll((java.util.Collection<java.lang.String>) strSet57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strCollectionList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strComparableArray63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test16609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16609");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType12 = node7.getJSType();
        boolean boolean13 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int20 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = node7.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node19.getJsDocBuilderForNode();
        boolean boolean23 = node19.isBreak();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node19.siblings();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        com.google.javascript.rhino.Node node30 = node28.getParent();
        node28.setIsSyntheticBlock(true);
        boolean boolean33 = node28.isContinue();
        java.lang.String str34 = node28.getQualifiedName();
        boolean boolean35 = node28.isSwitch();
        node28.removeProp((int) '4');
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node41.isLabel();
        boolean boolean44 = node41.isContinue();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        int int51 = node47.getCharno();
        com.google.javascript.rhino.Node node52 = node41.useSourceInfoIfMissingFrom(node47);
        boolean boolean53 = node28.isEquivalentTo(node47);
        com.google.javascript.rhino.InputId inputId54 = null;
        node47.setInputId(inputId54);
        boolean boolean56 = node47.isNumber();
        boolean boolean57 = node47.isStringKey();
        com.google.javascript.rhino.Node node58 = node19.useSourceInfoIfMissingFrom(node47);
        boolean boolean59 = node19.isWhile();
        boolean boolean60 = node19.isName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test16610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16610");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        node2.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        node2.setStaticSourceFile(staticSourceFile5);
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isBlock();
        java.lang.String str9 = node2.toStringTree();
        boolean boolean10 = node2.isVar();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        boolean boolean18 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node20.setStaticSourceFile(staticSourceFile23);
        boolean boolean25 = node20.isComma();
        node20.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node29.children();
        com.google.javascript.rhino.InputId inputId34 = null;
        node29.setInputId(inputId34);
        boolean boolean36 = node29.isName();
        java.lang.String str37 = node20.checkTreeEquals(node29);
        boolean boolean38 = node29.isInc();
        node29.setType((int) (short) -1);
        node12.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node48.addSuppression("");
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node48.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node43.copyInformationFromForTree(node48);
        boolean boolean55 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isTypeOf();
        boolean boolean62 = node57.isVarArgs();
        boolean boolean63 = node57.isIn();
        node48.addChildToFront(node57);
        node57.removeProp(48);
        com.google.javascript.rhino.Node node68 = node57.getAncestor(0);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node71 = node12.useSourceInfoFromForTree(node70);
        boolean boolean72 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node73 = node2.useSourceInfoFromForTree(node12);
        boolean boolean74 = node12.isIn();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(30, node12, node78, 3, 29);
        boolean boolean82 = node81.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str9, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str37, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str46, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str51, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16611");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = null;
        node3.setJSDocInfo(jSDocInfo7);
        boolean boolean9 = node3.isDo();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        boolean boolean16 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.Node node21 = node11.copyInformationFromForTree(node18);
        java.lang.Object obj23 = node21.getProp(38);
        com.google.javascript.rhino.Node node24 = node3.srcrefTree(node21);
        boolean boolean25 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        node27.putIntProp((int) (short) 0, 38);
        boolean boolean34 = node27.isCall();
        int int35 = node27.getCharno();
        boolean boolean37 = node27.getBooleanProp(41);
        node27.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType52 = node47.getJSType();
        boolean boolean53 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node54 = node45.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.jstype.JSType jSType55 = node45.getJSType();
        com.google.javascript.rhino.Node node56 = node45.getLastSibling();
        boolean boolean57 = node27.isEquivalentTo(node45);
        node45.putBooleanProp(12, false);
        com.google.javascript.rhino.Node node61 = node21.srcref(node45);
        com.google.javascript.rhino.Node node62 = node45.cloneNode();
        boolean boolean63 = node45.isRegExp();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test16612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16612");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        boolean boolean14 = node9.isComma();
        node9.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.children();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isName();
        java.lang.String str26 = node9.checkTreeEquals(node18);
        boolean boolean27 = node18.isInc();
        node18.setType((int) (short) -1);
        node1.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        boolean boolean44 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isVarArgs();
        boolean boolean52 = node46.isIn();
        node37.addChildToFront(node46);
        node46.removeProp(48);
        com.google.javascript.rhino.Node node57 = node46.getAncestor(0);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoFromForTree(node59);
        boolean boolean61 = node59.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node59.getJsDocBuilderForNode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str26, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
    }

    @Test
    public void test16613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16613");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = strList13.reverse();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList13.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor26 = strList13.listIterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test16614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16614");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isVoid();
        com.google.javascript.rhino.Node node12 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean13 = node3.isDebugger();
        java.lang.String str17 = node3.toString(true, false, true);
        node3.setCharno(9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 41.0" + "'", str17, "NUMBER 41.0");
    }

    @Test
    public void test16615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16615");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        int int16 = strList6.lastIndexOf((java.lang.Object) 1L);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        int int19 = strList6.lastIndexOf((java.lang.Object) 1.0f);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList6.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo21.getImplementedInterfaces();
        boolean boolean25 = jSDocInfo21.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo21.getTemplateTypeNames();
        java.lang.String[] strArray33 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object[] objArray36 = strSet34.toArray();
        strSet34.clear();
        boolean boolean38 = strList26.containsAll((java.util.Collection<java.lang.String>) strSet34);
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = strList26.reverse();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags41.setReturnsTainted();
        sideEffectFlags41.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags45 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags45.setMutatesArguments();
        sideEffectFlags45.setMutatesArguments();
        sideEffectFlags45.setMutatesGlobalState();
        sideEffectFlags45.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags50 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags50.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags53 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray54 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags41, sideEffectFlags45, sideEffectFlags50, sideEffectFlags53 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray55 = strList26.toArray(sideEffectFlagsArray54);
        java.lang.Object[] objArray56 = strList26.toArray();
        java.lang.Object[] objArray57 = strList26.toArray();
        boolean boolean58 = strList20.containsAll((java.util.Collection<java.lang.String>) strList26);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray54);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test16616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16616");
        java.lang.String[] strArray13 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray19 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray20 = strSet14.toArray((java.lang.Comparable<java.lang.String>[]) strArray19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isNoShadow();
        boolean boolean23 = jSDocInfo21.isNoShadow();
        boolean boolean24 = jSDocInfo21.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo21.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo21.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = jSDocInfo21.getTemplateTypeNames();
        boolean boolean29 = strSet14.removeAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        java.lang.String[] strArray47 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isTypeOf();
        boolean boolean56 = node51.wasEmptyNode();
        int int57 = strList48.indexOf((java.lang.Object) boolean56);
        int int58 = strList43.indexOf((java.lang.Object) boolean56);
        boolean boolean59 = strList43.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean74 = strList66.containsAll((java.util.Collection<java.lang.String>) strList73);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor75 = strList73.iterator();
        boolean boolean76 = strList73.isEmpty();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        int int82 = node78.getCharno();
        boolean boolean83 = strList73.equals((java.lang.Object) node78);
        java.util.Iterator<java.lang.String> strItor84 = strList73.iterator();
        boolean boolean85 = strList43.containsAll((java.util.Collection<java.lang.String>) strList73);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition86 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int87 = stringPosition86.getStartLine();
        stringPosition86.setItem("(NUMBER 1.0 37\n)");
        stringPosition86.setItem("(OR)");
        int int92 = strList43.lastIndexOf((java.lang.Object) "(OR)");
        com.google.common.collect.ImmutableList<java.lang.String> strList93 = strList43.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor95 = strList43.listIterator(2);
        com.google.common.collect.ImmutableList<java.lang.String> strList96 = strList43.reverse();
        java.util.Iterator<java.lang.String> strItor97 = strList43.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = strList28.retainAll((java.util.Collection<java.lang.String>) strList43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strItor95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strItor97);
    }

    @Test
    public void test16617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16617");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node69 = node67.getParent();
        node67.setIsSyntheticBlock(true);
        boolean boolean72 = node67.isContinue();
        java.lang.String str73 = node67.getQualifiedName();
        node67.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node77 = node53.useSourceInfoIfMissingFromForTree(node67);
        boolean boolean78 = node53.isFalse();
        boolean boolean79 = node53.isAssign();
        com.google.javascript.rhino.Node node80 = node53.getParent();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test16618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16618");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR 36\n    OR\n");
        boolean boolean2 = node1.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test16619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16619");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition0.hasBrackets();
        int int10 = typePosition0.getPositionOnStartLine();
        boolean boolean11 = typePosition0.hasBrackets();
        boolean boolean12 = typePosition0.hasBrackets();
        int int13 = typePosition0.getPositionOnEndLine();
        boolean boolean14 = typePosition0.hasBrackets();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16620");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isIf();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        boolean boolean10 = node9.isParamList();
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFrom(node9);
        boolean boolean12 = node9.isComma();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasBaseType();
        jSDocInfo26.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo26.getBaseType();
        node25.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 1, node25, 38, (int) '4');
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isReturn();
        boolean boolean42 = node37.isContinue();
        com.google.javascript.rhino.Node node43 = node34.srcref(node37);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isNot();
        boolean boolean50 = node45.isIf();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        boolean boolean53 = node52.isParamList();
        com.google.javascript.rhino.Node node54 = node45.useSourceInfoIfMissingFrom(node52);
        boolean boolean55 = node52.isComma();
        java.lang.String str56 = node52.getSourceFileName();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node9, node34, node52, 41, 43);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        java.lang.String str64 = node61.toString();
        com.google.javascript.rhino.Node node65 = node61.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node61.getStaticSourceFile();
        boolean boolean67 = node61.isLocalResultCall();
        boolean boolean68 = node61.isArrayLit();
        boolean boolean69 = node61.isAssign();
        boolean boolean70 = node9.isEquivalentTo(node61);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = node9.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str64, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(staticSourceFile71);
    }

    @Test
    public void test16621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test16622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16622");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR NUMBER 1.0 37\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test16623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16623");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.Node node20 = node10.useSourceInfoFromForTree(node17);
        boolean boolean21 = node20.isGetElem();
        int int22 = node20.getCharno();
        node20.addSuppression("GETELEM");
        com.google.javascript.rhino.Node node25 = node1.srcref(node20);
        int int27 = node20.getIntProp(49);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test16624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16624");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int57 = stringPosition56.getStartLine();
        stringPosition56.setItem("(NUMBER 1.0 37\n)");
        stringPosition56.setItem("(OR)");
        int int62 = strList13.lastIndexOf((java.lang.Object) "(OR)");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = strList13.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor65 = strList13.listIterator(2);
        java.util.Iterator<java.lang.String> strItor66 = strList13.iterator();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        int int72 = node70.getType();
        com.google.javascript.rhino.InputId inputId73 = node70.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = null;
        node70.setJSDocInfo(jSDocInfo74);
        boolean boolean76 = node70.isDo();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        boolean boolean82 = node78.isNot();
        boolean boolean83 = node78.isLocalResultCall();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node85.addSuppression("");
        com.google.javascript.rhino.Node node88 = node78.copyInformationFromForTree(node85);
        java.lang.Object obj90 = node88.getProp(38);
        com.google.javascript.rhino.Node node91 = node70.srcrefTree(node88);
        node91.setSourceEncodedPosition(4095);
        boolean boolean94 = node91.isTry();
        com.google.javascript.rhino.Node node95 = node91.cloneTree();
        int int96 = strList13.lastIndexOf((java.lang.Object) node95);
        java.util.Spliterator<java.lang.String> strSpliterator97 = strList13.spliterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator97);
    }

    @Test
    public void test16625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16625");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        boolean boolean61 = node60.isReturn();
        boolean boolean62 = node60.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16626");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int4 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.lang.String str8 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean15 = jSDocInfo0.hasParameter("");
        int int16 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test16627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16627");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        java.lang.String str4 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test16628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16628");
        java.lang.String[] strArray1 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream5 = strList2.parallelStream();
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList8.retainAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean16 = strList2.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray26 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean36 = strList27.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean37 = strList27.isEmpty();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        boolean boolean47 = strList40.retainAll((java.util.Collection<java.lang.String>) strList45);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean62 = strList54.containsAll((java.util.Collection<java.lang.String>) strList61);
        java.lang.String[] strArray64 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        boolean boolean76 = strList69.retainAll((java.util.Collection<java.lang.String>) strList74);
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        boolean boolean86 = strList79.retainAll((java.util.Collection<java.lang.String>) strList84);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList87 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList27, (java.util.List<java.lang.String>) strList45, (java.util.List<java.lang.String>) strList54, (java.util.List<java.lang.String>) strList65, (java.util.List<java.lang.String>) strList69, (java.util.List<java.lang.String>) strList79);
        java.util.stream.Stream<java.lang.String> strStream88 = strList45.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream89 = strList45.parallelStream();
        boolean boolean90 = strList8.retainAll((java.util.Collection<java.lang.String>) strList45);
        java.lang.Object[] objArray91 = strList45.toArray();
        java.lang.Object[] objArray92 = strList45.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = strList45.set(24, "((Unknown class name))");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 24, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strListList87);
        org.junit.Assert.assertNotNull(strStream88);
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[hi!, OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[hi!, OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[hi!, OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[hi!, OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test16629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16629");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16630");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test16631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16631");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = strList25.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList26.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList26.asList();
        java.lang.Object[] objArray29 = strList28.toArray();
        java.util.Iterator<java.lang.String> strItor30 = strList28.iterator();
        int int31 = strList28.size();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test16632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16632");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        boolean boolean21 = node17.isNot();
        boolean boolean22 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.Node node27 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node28 = node7.srcref(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        boolean boolean34 = node30.isTypeOf();
        boolean boolean35 = node30.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node46.setJSType(jSType49);
        java.lang.String str51 = node46.toString();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        boolean boolean58 = node53.isComma();
        node53.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList61 = com.google.common.collect.ImmutableList.of(node30, node37, node46, node53);
        boolean boolean62 = node53.isComma();
        boolean boolean63 = node7.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node69 = node67.getParent();
        node67.setIsSyntheticBlock(true);
        boolean boolean72 = node67.isContinue();
        java.lang.String str73 = node67.getQualifiedName();
        node67.putBooleanProp(1, false);
        com.google.javascript.rhino.Node node77 = node53.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        boolean boolean83 = node79.isTypeOf();
        boolean boolean84 = node79.isWith();
        boolean boolean85 = node53.isEquivalentTo(node79);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder86 = node79.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR" + "'", str51, "OR");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test16633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16633");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        node3.setLineno((int) (short) 100);
        boolean boolean12 = node3.isIn();
        boolean boolean13 = node3.isGetProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node3.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16634");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean21 = node20.isRegExp();
        boolean boolean22 = node20.isName();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node9.getStaticSourceFile();
        boolean boolean25 = node9.isNew();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16635");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean56 = strList13.isEmpty();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node58.setStaticSourceFile(staticSourceFile61);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        com.google.javascript.rhino.Node node73 = node71.getParent();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node71);
        boolean boolean75 = node58.hasChild(node64);
        boolean boolean76 = node58.isStringKey();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node58, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean80 = jSTypeExpression79.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression79);
        boolean boolean82 = strList13.contains((java.lang.Object) jSTypeExpression81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = strList13.set(47, "OR 52");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str67, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16636");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        java.util.Spliterator<java.lang.String> strSpliterator72 = strList71.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor73 = strList71.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList71.asList();
        java.lang.Object[] objArray75 = strList71.toArray();
        boolean boolean76 = strList71.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.hasBaseType();
        jSDocInfo77.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo77.getTypedefType();
        boolean boolean82 = jSDocInfo77.isNoSideEffects();
        com.google.javascript.rhino.Node node83 = jSDocInfo77.getAssociatedNode();
        boolean boolean84 = jSDocInfo77.isConstructor();
        boolean boolean86 = jSDocInfo77.hasParameter("OR [jsdoc_info: JSDocInfo]\n");
        java.lang.String str87 = jSDocInfo77.getLendsName();
        java.lang.String str88 = jSDocInfo77.getLendsName();
        boolean boolean89 = strList71.equals((java.lang.Object) str88);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test16637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16637");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(50, 54, 11);
    }

    @Test
    public void test16638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16638");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        boolean boolean18 = strList13.add("OR\n");
        boolean boolean20 = strList13.add("");
        java.util.Iterator<java.lang.String> strItor21 = strList13.iterator();
        java.lang.String[] strArray28 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.Object[] objArray31 = strSet29.toArray();
        strSet29.clear();
        java.lang.Object[] objArray33 = strSet29.toArray();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray34 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray35 = strSet29.toArray(fileLevelJsDocBuilderArray34);
        java.lang.String[] strArray42 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        java.lang.Object[] objArray45 = strSet43.toArray();
        int int46 = strSet43.size();
        java.util.Spliterator<java.lang.String> strSpliterator47 = strSet43.spliterator();
        boolean boolean49 = strSet43.add("OR [synthetic: 1]");
        boolean boolean50 = strSet29.removeAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Iterator<java.lang.String> strItor51 = strSet43.iterator();
        boolean boolean52 = strList13.contains((java.lang.Object) strItor51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        boolean boolean57 = node54.getBooleanProp(4095);
        com.google.javascript.rhino.Node node58 = node54.cloneNode();
        boolean boolean59 = strList13.equals((java.lang.Object) node54);
        boolean boolean60 = node54.isLocalResultCall();
        boolean boolean61 = node54.isVar();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray34);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(strSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test16639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16639");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node17.isArrayLit();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node20.copyInformationFromForTree(node25);
        java.lang.String str32 = node31.getSourceFileName();
        com.google.javascript.rhino.Node node33 = node17.copyInformationFromForTree(node31);
        boolean boolean34 = node1.hasChild(node33);
        boolean boolean35 = node33.isGetterDef();
        boolean boolean36 = node33.isIn();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test16640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16640");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
    }

    @Test
    public void test16641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16641");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((-1), "RETURN ()\n");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        boolean boolean10 = node9.isDefaultCase();
        boolean boolean11 = node9.isNoSideEffectsCall();
        java.lang.String str15 = node9.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.hasTypedefType();
        java.lang.String str18 = jSDocInfo16.toString();
        node9.setJSDocInfo(jSDocInfo16);
        com.google.javascript.rhino.Node node20 = node9.cloneTree();
        boolean boolean21 = node20.isThis();
        node20.setCharno((int) (short) -1);
        boolean boolean24 = node20.isBlock();
        boolean boolean25 = node3.hasChild(node20);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(36, node20, node27, (int) (byte) -1, 11);
        boolean boolean31 = node20.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR" + "'", str15, "OR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JSDocInfo" + "'", str18, "JSDocInfo");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16642");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        int int16 = node12.getCharno();
        boolean boolean17 = node12.isName();
        boolean boolean18 = node12.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node12, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression20);
        boolean boolean23 = jSTypeExpression20.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean38 = strList30.containsAll((java.util.Collection<java.lang.String>) strList37);
        boolean boolean39 = strList30.isEmpty();
        boolean boolean40 = jSTypeExpression20.equals((java.lang.Object) strList30);
        java.util.Iterator<java.lang.String> strItor41 = strList30.iterator();
        boolean boolean42 = strSet10.containsAll((java.util.Collection<java.lang.String>) strList30);
        java.util.stream.Stream<java.lang.String> strStream43 = strSet10.stream();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strStream43);
    }

    @Test
    public void test16643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16643");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        boolean boolean15 = node14.isDefaultCase();
        int int16 = node1.getIndexOfChild(node14);
        node14.setWasEmptyNode(false);
        boolean boolean19 = node14.isCatch();
        node14.setCharno(6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean25 = jSDocInfo23.isOverride();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isNot();
        boolean boolean37 = node32.isIf();
        com.google.javascript.rhino.Node node38 = node29.copyInformationFromForTree(node32);
        jSDocInfo23.setAssociatedNode(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node32.children();
        boolean boolean41 = node32.isAssign();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(50, node32, 45, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node32.siblings();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node50 = node32.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d);
        com.google.javascript.rhino.Node node53 = node52.removeFirstChild();
        com.google.javascript.rhino.Node node54 = node50.useSourceInfoFrom(node52);
        boolean boolean55 = node54.hasChildren();
        com.google.javascript.rhino.Node node56 = node14.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.InputId inputId57 = null;
        node54.setInputId(inputId57);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test16644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16644");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node31.isWith();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node54.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node54.isComma();
        boolean boolean60 = node54.isFalse();
        boolean boolean61 = node54.isNoSideEffectsCall();
        java.lang.String str62 = node31.checkTreeEquals(node54);
        int int64 = node54.getIntProp(42);
        int int66 = node54.getIntProp((int) (byte) 1);
        boolean boolean67 = node54.isGetterDef();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test16645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = strSet7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test16646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16646");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList21.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strList21.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = strList21.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor32 = strList21.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean35 = ternaryValue33.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean38 = ternaryValue36.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str40 = ternaryValue39.toString();
        boolean boolean42 = ternaryValue39.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue36.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue33.and(ternaryValue39);
        int int45 = strList21.indexOf((java.lang.Object) ternaryValue44);
        java.lang.String str46 = strList21.toString();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor47 = strList21.listIterator();
        boolean boolean48 = strSet7.addAll((java.util.Collection<java.lang.String>) strList21);
        java.lang.String str49 = strList21.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = strList21.add("NUMBER 10.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "unknown" + "'", str40, "unknown");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str46, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str49, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test16647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16647");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getReturnType();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NUMBER -1.0\n");
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getSuppressions();
        java.lang.Object obj15 = null;
        boolean boolean16 = strSet14.remove(obj15);
        java.lang.Object[] objArray17 = strSet14.toArray();
        java.util.Iterator<java.lang.String> strItor18 = strSet14.iterator();
        boolean boolean19 = strSet14.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test16648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16648");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet58.spliterator();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node63.setStaticSourceFile(staticSourceFile66);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node78 = node76.getParent();
        com.google.javascript.rhino.Node node79 = node69.useSourceInfoFromForTree(node76);
        boolean boolean80 = node63.hasChild(node69);
        boolean boolean81 = node69.isNot();
        boolean boolean82 = strSet58.equals((java.lang.Object) node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = node69.getJSDocInfo();
        int int84 = node69.getChildCount();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags85 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int86 = sideEffectFlags85.valueOf();
        sideEffectFlags85.setMutatesThis();
        sideEffectFlags85.clearSideEffectFlags();
        sideEffectFlags85.setThrows();
        sideEffectFlags85.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node69.setSideEffectFlags(sideEffectFlags85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test16649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16649");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(Named type with empty name component)");
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(35, 36, 4095, 4);
        java.lang.String str13 = stringPosition0.getItem();
        stringPosition0.setItem("OR");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Named type with empty name component)" + "'", str13, "(Named type with empty name component)");
    }

    @Test
    public void test16650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16650");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        boolean boolean7 = node1.isLabelName();
        node1.removeProp(49);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = node11.copyInformationFromForTree(node17);
        com.google.javascript.rhino.InputId inputId19 = node11.getInputId();
        boolean boolean20 = node11.isIn();
        boolean boolean21 = node11.isContinue();
        com.google.javascript.rhino.Node node22 = node1.copyInformationFromForTree(node11);
        int int23 = node22.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node25.setStaticSourceFile(staticSourceFile28);
        boolean boolean30 = node25.isComma();
        boolean boolean31 = node25.isBlock();
        com.google.javascript.rhino.Node node32 = node25.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("OR 52\n    OR\n", 1, 45);
        boolean boolean37 = node36.isParamList();
        com.google.javascript.rhino.Node node38 = node25.copyInformationFromForTree(node36);
        boolean boolean39 = node22.isEquivalentTo(node36);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16651");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node3.children();
        boolean boolean16 = node3.isAdd();
        com.google.javascript.rhino.InputId inputId17 = node3.getInputId();
        boolean boolean18 = node3.isFromExterns();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16652");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16653");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue1.not();
        java.lang.String str3 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean6 = ternaryValue4.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str8 = ternaryValue7.toString();
        boolean boolean10 = ternaryValue7.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue4.and(ternaryValue7);
        boolean boolean13 = ternaryValue4.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue4.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue1.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "false" + "'", str3, "false");
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "unknown" + "'", str8, "unknown");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
    }

    @Test
    public void test16654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16654");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isNoShadow();
        java.lang.String str10 = jSDocInfo8.getMeaning();
        boolean boolean11 = jSDocInfo8.hasReturnType();
        boolean boolean12 = jSDocInfo8.isDeprecated();
        boolean boolean13 = jSDocInfo8.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo8.getThisType();
        jSDocInfo8.setDeprecated(false);
        boolean boolean17 = jSDocInfo8.isNoAlias();
        boolean boolean18 = strSet7.remove((java.lang.Object) jSDocInfo8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        jSDocInfo19.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getTypedefType();
        boolean boolean24 = jSDocInfo19.isNoSideEffects();
        boolean boolean26 = jSDocInfo19.hasDescriptionForParameter("JSDocInfo");
        jSDocInfo19.setDeprecated(true);
        boolean boolean29 = jSDocInfo19.isNoCompile();
        int int30 = jSDocInfo19.getParameterCount();
        boolean boolean31 = strSet7.contains((java.lang.Object) int30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16655");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.addSuppression("(STRING OR)");
        boolean boolean13 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16656");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        stringPosition12.setPositionInformation((int) (byte) 10, 52, 35, 0);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition12.setPositionInformation(409600, 4095, 0, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 409600?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
    }

    @Test
    public void test16657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16657");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.isExterns();
        jSDocInfo0.addSuppression("OR [jsdoc_info: JSDocInfo]\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16658");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 1, "Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8, typePosition9, typePosition10);
        int int12 = typePosition5.getPositionOnEndLine();
        int int13 = typePosition5.getPositionOnStartLine();
        com.google.javascript.rhino.Node node14 = null;
        typePosition5.setItem(node14);
        boolean boolean16 = typePosition5.hasBrackets();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isTypeOf();
        boolean boolean23 = node18.wasEmptyNode();
        boolean boolean24 = node18.isLabelName();
        typePosition5.setItem(node18);
        com.google.javascript.rhino.Node node26 = node2.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int31 = node30.getLength();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isNoShadow();
        java.lang.String str35 = jSDocInfo33.getMeaning();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo33.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags38 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags38.setReturnsTainted();
        int int40 = sideEffectFlags38.valueOf();
        boolean boolean41 = strSet36.remove((java.lang.Object) sideEffectFlags38);
        node32.setDirectives(strSet36);
        boolean boolean43 = node32.isIn();
        boolean boolean44 = node32.isName();
        node26.addChildToFront(node32);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16659");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", 51, 51);
        namePosition25.setItem(node57);
        int int60 = node57.getIntProp(213044);
        boolean boolean61 = node57.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str63 = jSDocInfo62.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = jSDocInfo62.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = strList64.reverse();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isReturn();
        com.google.javascript.rhino.InputId inputId72 = node67.getInputId();
        boolean boolean73 = node67.isArrayLit();
        boolean boolean74 = node67.isInc();
        boolean boolean75 = node67.isAssign();
        java.lang.String str76 = node67.getSourceFileName();
        int int77 = strList65.lastIndexOf((java.lang.Object) node67);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        boolean boolean83 = node79.isReturn();
        com.google.javascript.rhino.InputId inputId84 = node79.getInputId();
        boolean boolean85 = node79.isAdd();
        boolean boolean86 = node79.isQuotedString();
        node67.addChildToFront(node79);
        com.google.javascript.rhino.Node node88 = node79.getParent();
        boolean boolean89 = node88.isNE();
        node57.addChildrenToFront(node88);
        boolean boolean91 = node88.isCatch();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder92 = node88.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(inputId72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(inputId84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder92);
    }

    @Test
    public void test16660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16660");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        node1.putIntProp((int) (short) 0, 38);
        boolean boolean8 = node1.isCall();
        int int9 = node1.getCharno();
        boolean boolean11 = node1.getBooleanProp(41);
        node1.setSourceEncodedPositionForTree((int) (byte) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node1.getJsDocBuilderForNode();
        boolean boolean15 = node1.isOr();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test16661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16661");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isVarArgs();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        int int15 = node12.getLength();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        node12.addChildrenToFront(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node12.getJSDocInfo();
        boolean boolean22 = node12.isName();
        node1.putProp(100, (java.lang.Object) node12);
        boolean boolean24 = node12.isStringKey();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node12.getJsDocBuilderForNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node12.siblings();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertNotNull(nodeIterable26);
    }

    @Test
    public void test16662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16662");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        int int12 = strList3.indexOf((java.lang.Object) boolean11);
        boolean boolean13 = strList3.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node15.setStaticSourceFile(staticSourceFile18);
        boolean boolean20 = node15.isComma();
        node15.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node24.children();
        com.google.javascript.rhino.InputId inputId29 = null;
        node24.setInputId(inputId29);
        boolean boolean31 = node24.isName();
        java.lang.String str32 = node15.checkTreeEquals(node24);
        com.google.javascript.rhino.InputId inputId33 = null;
        node24.setInputId(inputId33);
        boolean boolean35 = node24.isBlock();
        int int36 = strList3.lastIndexOf((java.lang.Object) node24);
        java.lang.String str37 = node24.getQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node24.setJSType(jSType38);
        node24.detachChildren();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str32, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test16663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16663");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isDo();
        boolean boolean6 = node3.isArrayLit();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isNull();
        com.google.javascript.rhino.Node node10 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test16664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16664");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isDelProp();
        boolean boolean17 = node7.isDebugger();
        boolean boolean18 = node7.isIf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node7, "OR");
        boolean boolean21 = jSTypeExpression20.isVarArgs();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        int int27 = node23.getCharno();
        boolean boolean28 = node23.isName();
        boolean boolean29 = node23.isNE();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        boolean boolean36 = node33.isContinue();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node node44 = node33.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        node48.setIsSyntheticBlock(true);
        boolean boolean53 = node48.isContinue();
        java.lang.String str54 = node48.getQualifiedName();
        boolean boolean55 = node48.isSwitch();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isTypeOf();
        boolean boolean62 = node57.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node64.addChildrenToFront(node66);
        boolean boolean68 = node64.isTypeOf();
        boolean boolean69 = node64.isDelProp();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        com.google.javascript.rhino.Node node75 = node73.getParent();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node73.setJSType(jSType76);
        java.lang.String str78 = node73.toString();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = null;
        node80.setStaticSourceFile(staticSourceFile83);
        boolean boolean85 = node80.isComma();
        node80.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList88 = com.google.common.collect.ImmutableList.of(node57, node64, node73, node80);
        boolean boolean89 = node48.hasChild(node57);
        com.google.javascript.rhino.Node node90 = node39.useSourceInfoIfMissingFrom(node57);
        boolean boolean91 = node57.isDo();
        boolean boolean92 = node23.hasChild(node57);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder93 = node57.getJsDocBuilderForNode();
        node57.setSourceEncodedPositionForTree((int) (byte) 100);
        boolean boolean96 = jSTypeExpression20.equals((java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR" + "'", str78, "OR");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(nodeList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test16665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16665");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        int int73 = strList6.indexOf((java.lang.Object) (short) 0);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor74 = strList6.iterator();
        java.lang.Object[] objArray75 = strList6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList6.add(37, "((Node tree inequality:\nTree1:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test16666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16666");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node8.isExprResult();
        boolean boolean10 = node8.isNE();
        node8.setSourceEncodedPosition((int) (short) -1);
        node8.setWasEmptyNode(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16667");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.InputId inputId29 = null;
        node22.setInputId(inputId29);
        boolean boolean31 = node22.isReturn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = node35.isParamList();
        boolean boolean42 = node35.isParamList();
        com.google.javascript.rhino.Node node43 = node35.cloneTree();
        boolean boolean44 = node43.isIf();
        boolean boolean45 = node22.hasChild(node43);
        com.google.javascript.rhino.Node node46 = node22.getFirstChild();
        boolean boolean47 = node46.isSwitch();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16668");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean20 = ternaryValue18.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str25 = ternaryValue24.toString();
        boolean boolean27 = ternaryValue24.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue21.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue18.and(ternaryValue24);
        int int30 = strList6.indexOf((java.lang.Object) ternaryValue29);
        java.lang.String str31 = strList6.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = strList6.asList();
        java.util.ListIterator<java.lang.String> strItor34 = strList32.listIterator(1);
        boolean boolean35 = strList32.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strList32.spliterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "unknown" + "'", str25, "unknown");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str31, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSpliterator36);
    }

    @Test
    public void test16669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16669");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isArrayLit();
        node11.setSourceEncodedPosition(30);
        boolean boolean15 = node11.isSwitch();
        boolean boolean16 = node11.isTypeOf();
        java.lang.String str17 = node11.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR 0 [jsdoc_info: JSDocInfo]" + "'", str17, "OR 0 [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test16670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16670");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        boolean boolean20 = node17.isVarArgs();
        int int21 = node17.getChildCount();
        int int22 = strList6.lastIndexOf((java.lang.Object) int21);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor24 = strList23.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor26 = strList23.listIterator(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (41) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strItor24);
    }

    @Test
    public void test16671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16671");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16672");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node2.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node2.siblings();
        java.lang.String str8 = node2.getSourceFileName();
        boolean boolean9 = node2.isGetElem();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(31, node2, 0, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasBaseType();
        jSDocInfo13.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int17 = jSDocInfo13.getParameterCount();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        node12.setJSDocInfo(jSDocInfo13);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node12, "OR [length: 45]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression21);
        boolean boolean23 = jSTypeExpression22.isVarArgs();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16673");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        boolean boolean16 = jSDocInfo0.hasType();
        boolean boolean17 = jSDocInfo0.hasReturnType();
        boolean boolean18 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16674");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isGetProp();
        com.google.javascript.rhino.Node node14 = node11.removeChildren();
        boolean boolean15 = node14.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16675");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isLabelName();
        boolean boolean9 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        boolean boolean18 = node11.isEmpty();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.hasChildren();
        com.google.javascript.rhino.Node node25 = node11.srcrefTree(node20);
        com.google.javascript.rhino.Node node26 = node1.srcref(node25);
        com.google.javascript.rhino.Node node27 = node1.removeFirstChild();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test16676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16676");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4096, (int) (byte) 1, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16677");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 39, (int) '4');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node7.children();
        int int13 = node7.getLineno();
        boolean boolean14 = node7.isWith();
        int int15 = node7.getSourceOffset();
        java.lang.String str16 = node3.checkTreeEquals(node7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node18.setStaticSourceFile(staticSourceFile21);
        boolean boolean23 = node18.isComma();
        node18.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        com.google.javascript.rhino.InputId inputId32 = null;
        node27.setInputId(inputId32);
        boolean boolean34 = node27.isName();
        java.lang.String str35 = node18.checkTreeEquals(node27);
        com.google.javascript.rhino.InputId inputId36 = node18.getInputId();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int43 = node42.getSideEffectFlags();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node45.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(30, node42, node45, (int) '4', (int) (byte) 100);
        boolean boolean60 = node18.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node61 = node7.useSourceInfoFrom(node18);
        boolean boolean62 = node61.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getFileOverview();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        java.lang.String str66 = jSDocInfo63.getMeaning();
        com.google.javascript.rhino.Node node67 = jSDocInfo63.getAssociatedNode();
        node61.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node61.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node70 = node61.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n" + "'", str16, "Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str35, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test16678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16678");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        boolean boolean14 = jSDocInfo0.isNoSideEffects();
        boolean boolean15 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = jSDocInfo0.getVisibility();
        boolean boolean17 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node10.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node10.getStaticSourceFile();
        boolean boolean16 = node10.isLocalResultCall();
        boolean boolean17 = node10.isArrayLit();
        boolean boolean18 = node10.isUnscopedQualifiedName();
        jSDocInfo0.setAssociatedNode(node10);
        boolean boolean20 = node10.isOr();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test16680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16680");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        boolean boolean9 = node5.isTypeOf();
        boolean boolean10 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        boolean boolean16 = node12.isTypeOf();
        boolean boolean17 = node12.isDelProp();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node21.setJSType(jSType24);
        java.lang.String str26 = node21.toString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node28.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node28.isComma();
        node28.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList36 = com.google.common.collect.ImmutableList.of(node5, node12, node21, node28);
        com.google.javascript.rhino.Node node37 = node3.copyInformationFrom(node28);
        boolean boolean38 = node3.isIn();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(35, node3);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node41.setStaticSourceFile(staticSourceFile44);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        com.google.javascript.rhino.Node node56 = node54.getParent();
        com.google.javascript.rhino.Node node57 = node47.useSourceInfoFromForTree(node54);
        boolean boolean58 = node41.hasChild(node47);
        node41.removeProp(44);
        boolean boolean61 = node41.isDo();
        node3.addChildToBack(node41);
        boolean boolean63 = node3.isCatch();
        boolean boolean64 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR" + "'", str26, "OR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test16681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16681");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node3.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        com.google.javascript.rhino.Node node19 = node9.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.isComma();
        node21.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.InputId inputId35 = null;
        node30.setInputId(inputId35);
        boolean boolean37 = node30.isName();
        java.lang.String str38 = node21.checkTreeEquals(node30);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node3, node9, node30 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(nodeArray39);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray39);
        java.lang.String str42 = node41.getQualifiedName();
        boolean boolean43 = node41.hasOneChild();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node45.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node45.getStaticSourceFile();
        boolean boolean51 = node45.isRegExp();
        com.google.javascript.rhino.jstype.JSType jSType52 = node45.getJSType();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(0, node41, node45);
        boolean boolean54 = node45.isTypeOf();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str38, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test16682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16682");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strList36.spliterator();
        java.lang.String[] strArray46 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        strSet47.clear();
        java.lang.Object[] objArray51 = strSet47.toArray();
        boolean boolean52 = strList36.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.lang.Object[] objArray53 = strSet47.toArray();
        boolean boolean55 = strSet47.add("(Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n)");
        java.util.Iterator<java.lang.String> strItor56 = strSet47.iterator();
        int int57 = strSet47.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test16683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16683");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int26 = strList17.size();
        boolean boolean27 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList17);
        int int28 = strList17.size();
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList17.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor30 = strList17.listIterator();
        java.lang.Object[] objArray31 = strList17.toArray();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = node35.isParamList();
        node35.setSourceEncodedPositionForTree(54);
        boolean boolean44 = node35.isCall();
        boolean boolean45 = node35.isVarArgs();
        boolean boolean46 = node35.isNull();
        boolean boolean47 = node35.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = strList17.remove((java.lang.Object) node35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16684");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isNoSideEffectsCall();
        java.lang.String str11 = node5.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasTypedefType();
        java.lang.String str14 = jSDocInfo12.toString();
        node5.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node16 = node5.cloneTree();
        int int17 = node5.getSourcePosition();
        boolean boolean18 = node5.isNumber();
        com.google.javascript.rhino.Node node19 = node5.cloneNode();
        boolean boolean20 = node19.isLabel();
        boolean boolean21 = node19.isNull();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OR" + "'", str11, "OR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16685");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "NUMBER 1.0 37\n");
        boolean boolean3 = node2.isContinue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.isNoShadow();
        java.lang.String str6 = jSDocInfo4.getMeaning();
        boolean boolean7 = jSDocInfo4.hasReturnType();
        java.lang.String str8 = jSDocInfo4.getVersion();
        java.lang.String str9 = jSDocInfo4.toString();
        java.lang.String str10 = jSDocInfo4.getDeprecationReason();
        boolean boolean11 = jSDocInfo4.isExpose();
        boolean boolean12 = jSDocInfo4.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo4.getParameterNames();
        java.lang.String[] strArray20 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.Object[] objArray23 = strSet21.toArray();
        strSet21.clear();
        java.util.Iterator<java.lang.String> strItor25 = strSet21.iterator();
        int int26 = strSet21.size();
        boolean boolean28 = strSet21.equals((java.lang.Object) 1.0d);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasBaseType();
        jSDocInfo29.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo29.getBaseType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo29.getParameterNames();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        boolean boolean41 = node36.isContinue();
        boolean boolean42 = strSet34.equals((java.lang.Object) node36);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node46.getParent();
        node46.setIsSyntheticBlock(true);
        boolean boolean51 = node46.isContinue();
        boolean boolean52 = strSet34.equals((java.lang.Object) node46);
        int int53 = strSet34.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList62 = com.google.common.collect.ImmutableList.of(typePosition54, typePosition55, typePosition56, typePosition57, typePosition58, typePosition59, typePosition60, typePosition61);
        typePosition61.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        java.lang.String str72 = node69.toString();
        boolean boolean73 = node69.hasChildren();
        typePosition61.setItem(node69);
        int int75 = typePosition61.getStartLine();
        boolean boolean76 = strSet34.equals((java.lang.Object) typePosition61);
        boolean boolean77 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strSet21.spliterator();
        boolean boolean79 = strSet13.containsAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Iterator<java.lang.String> strItor80 = strSet13.iterator();
        node2.setDirectives(strSet13);
        boolean boolean82 = node2.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(typePositionList62);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str72, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        int int8 = strSet7.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean23 = strList15.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.Iterator<java.lang.String> strItor24 = strList15.iterator();
        java.util.Iterator<java.lang.String> strItor25 = strList15.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo26.getParameterNames();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo26.getVisibility();
        java.lang.String str31 = jSDocInfo26.getDescriptionForParameter("Not declared as a type name");
        boolean boolean32 = jSDocInfo26.isOverride();
        java.lang.String str34 = jSDocInfo26.getDescriptionForParameter("(NUMBER 1.0 37\n)");
        java.lang.String str35 = jSDocInfo26.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = jSDocInfo26.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList36.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor38 = strList37.listIterator();
        boolean boolean39 = strList15.containsAll((java.util.Collection<java.lang.String>) strList37);
        java.lang.Object[] objArray40 = strList15.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        int int42 = jSDocInfo41.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo41.getExtendedInterfaces();
        java.lang.String str44 = jSDocInfo41.getOriginalCommentString();
        java.lang.String str45 = jSDocInfo41.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo41.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection47 = jSDocInfo41.getTypeNodes();
        boolean boolean48 = strList15.equals((java.lang.Object) jSDocInfo41);
        boolean boolean49 = strSet7.equals((java.lang.Object) boolean48);
        java.lang.String[] strArray63 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray70 = strSet64.toArray((java.lang.Comparable<java.lang.String>[]) strArray69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.isNoShadow();
        boolean boolean73 = jSDocInfo71.isNoShadow();
        boolean boolean74 = jSDocInfo71.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo71.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo71.getTemplateTypeNames();
        boolean boolean79 = strSet64.removeAll((java.util.Collection<java.lang.String>) strList78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNotNull(nodeCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strComparableArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test16687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16687");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        node44.setSourceEncodedPosition((int) '#');
        java.lang.Object obj60 = node44.getProp(46);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test16688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isConstant();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.lang.String str6 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test16689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16689");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("(OR [jsdoc_info: JSDocInfo])");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test16690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16690");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setItem("unknown");
        stringPosition0.setItem("(OR)");
        stringPosition0.setPositionInformation((int) (short) 10, 8, 30, (int) (byte) 1);
        stringPosition0.setItem("STRING  32\n");
        int int14 = stringPosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(100, 33, (int) (short) -1, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test16691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16691");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = null;
        node9.setStaticSourceFile(staticSourceFile12);
        boolean boolean14 = node9.isComma();
        node9.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.children();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isName();
        java.lang.String str26 = node9.checkTreeEquals(node18);
        boolean boolean27 = node18.isInc();
        node18.setType((int) (short) -1);
        node1.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node37.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node32.copyInformationFromForTree(node37);
        boolean boolean44 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        boolean boolean50 = node46.isTypeOf();
        boolean boolean51 = node46.isVarArgs();
        boolean boolean52 = node46.isIn();
        node37.addChildToFront(node46);
        node46.removeProp(48);
        com.google.javascript.rhino.Node node57 = node46.getAncestor(0);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((-1));
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoFromForTree(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node59.children();
        boolean boolean62 = node59.isEmpty();
        boolean boolean64 = node59.getBooleanProp(213044);
        boolean boolean65 = node59.isParamList();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node59.getJsDocBuilderForNode();
        fileLevelJsDocBuilder66.append("OR [empty_block: 1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str26, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str35, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str40, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder66);
    }

    @Test
    public void test16692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16692");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("OR [opt_arg: 1]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16693");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int7 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node6, node9, (int) '4', (int) (byte) 100);
        node23.removeProp(4);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n", 29, 37);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node33.isLabel();
        boolean boolean36 = node33.isContinue();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node node44 = node33.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node49.setLength(1);
        com.google.javascript.rhino.Node node52 = node33.useSourceInfoFrom(node49);
        node49.setSourceEncodedPosition((int) (short) 1);
        boolean boolean55 = node49.isObjectLit();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(48, node23, node29, node49);
        boolean boolean57 = node29.isFalse();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test16694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16694");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        boolean boolean61 = node60.isGetterDef();
        boolean boolean62 = node60.isWhile();
        boolean boolean63 = node60.isLabel();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder66 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder68 = nodeArrayBuilder66.add(nodeArray67);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray67, 2, (int) '4');
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '4', nodeArray67, 50, 15);
        java.lang.String str75 = node60.checkTreeEquals(node74);
        com.google.javascript.rhino.InputId inputId76 = node60.getInputId();
        node60.setOptionalArg(false);
        boolean boolean79 = node60.isGetProp();
        boolean boolean80 = node60.isLabelName();
        boolean boolean81 = node60.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArrayBuilder68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nINSTANCEOF 50\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: INSTANCEOF 50\n" + "'", str75, "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nINSTANCEOF 50\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: INSTANCEOF 50\n");
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16695");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition6.getPositionOnEndLine();
        int int10 = typePosition6.getPositionOnEndLine();
        int int11 = typePosition6.getEndLine();
        com.google.javascript.rhino.Node node12 = typePosition6.getItem();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test16696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16696");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        boolean boolean7 = node1.isInstanceOf();
        boolean boolean8 = node1.isParamList();
        boolean boolean9 = node1.isContinue();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node13.getType();
        com.google.javascript.rhino.InputId inputId16 = node13.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node13, "");
        boolean boolean19 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = node1.clonePropsFrom(node13);
        com.google.javascript.rhino.InputId inputId21 = node20.getInputId();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isComma();
        node23.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node32.children();
        com.google.javascript.rhino.InputId inputId37 = null;
        node32.setInputId(inputId37);
        boolean boolean39 = node32.isName();
        java.lang.String str40 = node23.checkTreeEquals(node32);
        boolean boolean41 = node32.isStringKey();
        boolean boolean42 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node43 = node32.removeChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str48 = node47.toStringTree();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        boolean boolean59 = node55.isNot();
        boolean boolean60 = node55.isIf();
        com.google.javascript.rhino.Node node61 = node52.copyInformationFromForTree(node55);
        boolean boolean62 = node52.isEmpty();
        int int63 = node47.getIndexOfChild(node52);
        boolean boolean64 = node32.isEquivalentTo(node52);
        boolean boolean65 = node20.hasChild(node32);
        boolean boolean66 = node20.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str40, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 4.0 1\n" + "'", str48, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16697");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList71 = com.google.common.collect.ImmutableList.of();
        int int72 = strList37.lastIndexOf((java.lang.Object) strCollectionList71);
        java.util.stream.Stream<java.lang.String> strStream73 = strList37.stream();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList37.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasBaseType();
        jSDocInfo75.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo75.setLicense("Not declared as a type name");
        boolean boolean82 = jSDocInfo75.hasDescriptionForParameter("OR 0 [jsdoc_info: JSDocInfo]\n");
        boolean boolean83 = jSDocInfo75.isIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = jSDocInfo75.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = strList37.removeAll((java.util.Collection<java.lang.String>) strList84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strCollectionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test16698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16698");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        java.lang.Class<?> wildcardClass35 = node21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test16699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        java.lang.String[] strArray36 = new java.lang.String[] { "Named type with empty name component", "unknown", "hi!", "Unknown class name", "JSDocInfo", "Unknown class name", "hi!", "", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", "Not declared as a type name", "OR", "unknown", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.String[] strArray42 = new java.lang.String[] { "(Unknown class name)", "OR [jsdoc_info: JSDocInfo]\n", "OR [jsdoc_info: JSDocInfo]\n" };
        java.lang.Comparable<java.lang.String>[] strComparableArray43 = strSet37.toArray((java.lang.Comparable<java.lang.String>[]) strArray42);
        java.lang.CharSequence[] charSequenceArray44 = strList12.toArray((java.lang.CharSequence[]) strArray42);
        boolean boolean46 = strList12.contains((java.lang.Object) (byte) 1);
        java.lang.Object obj47 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = strList12.remove(obj47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strComparableArray43);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str3 = jSDocInfo0.getVersion();
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        boolean boolean6 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16701");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue27.xor(ternaryValue28);
        boolean boolean31 = ternaryValue27.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean34 = ternaryValue32.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean37 = ternaryValue35.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str39 = ternaryValue38.toString();
        boolean boolean41 = ternaryValue38.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue35.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue45.xor(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue44.xor(ternaryValue45);
        boolean boolean49 = jSTypeExpression23.equals((java.lang.Object) ternaryValue45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isNoShadow();
        java.lang.String str52 = jSDocInfo50.getMeaning();
        com.google.javascript.rhino.Node node53 = jSDocInfo50.getAssociatedNode();
        java.lang.String str54 = jSDocInfo50.getLicense();
        boolean boolean55 = jSDocInfo50.isInterface();
        boolean boolean56 = jSDocInfo50.isExport();
        boolean boolean57 = jSDocInfo50.hasEnumParameterType();
        boolean boolean58 = jSTypeExpression23.equals((java.lang.Object) jSDocInfo50);
        com.google.javascript.rhino.Node node59 = jSTypeExpression23.getRoot();
        boolean boolean60 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.isNoShadow();
        int int63 = jSDocInfo61.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node64 = jSDocInfo61.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList65 = jSDocInfo61.getThrownTypes();
        boolean boolean66 = jSDocInfo61.isImplicitCast();
        boolean boolean67 = jSTypeExpression23.equals((java.lang.Object) boolean66);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "unknown" + "'", str39, "unknown");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(jSTypeExpressionList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test16702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16702");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isFalse();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "unknown");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean11 = jSTypeExpression9.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16703");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        int int77 = node75.getType();
        com.google.javascript.rhino.InputId inputId78 = node75.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node75, "");
        boolean boolean81 = strList71.contains((java.lang.Object) node75);
        com.google.javascript.rhino.jstype.JSType jSType82 = node75.getJSType();
        boolean boolean84 = node75.getBooleanProp(36);
        node75.putBooleanProp(51, true);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test16704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility6);
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        int int15 = node11.getCharno();
        boolean boolean16 = node11.isName();
        boolean boolean17 = node11.isNE();
        boolean boolean18 = node11.isEmpty();
        com.google.javascript.rhino.Node node19 = node11.removeFirstChild();
        boolean boolean20 = node19.isParamList();
        boolean boolean21 = strSet9.equals((java.lang.Object) boolean20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test16705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16705");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test16706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16706");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasBaseType();
        jSDocInfo14.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo14.getTypeNodes();
        node3.setJSDocInfo(jSDocInfo14);
        com.google.javascript.rhino.Node node21 = node3.getLastSibling();
        boolean boolean22 = node21.isThrow();
        boolean boolean23 = node21.isQuotedString();
        boolean boolean24 = node21.isGetProp();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(nodeCollection19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16707");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        node27.setSourceEncodedPositionForTree(12);
        boolean boolean65 = node27.hasOneChild();
        int int66 = node27.getSourcePosition();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
    }

    @Test
    public void test16708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16708");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node10.isNew();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isReturn();
        com.google.javascript.rhino.InputId inputId24 = node19.getInputId();
        boolean boolean25 = node19.isArrayLit();
        boolean boolean26 = node19.isInc();
        boolean boolean27 = node19.isAssign();
        java.lang.String str28 = node19.getSourceFileName();
        boolean boolean29 = node19.isSetterDef();
        boolean boolean30 = node19.isGetProp();
        com.google.javascript.rhino.Node node31 = node10.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        node33.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node42.children();
        com.google.javascript.rhino.InputId inputId47 = null;
        node42.setInputId(inputId47);
        boolean boolean49 = node42.isName();
        java.lang.String str50 = node33.checkTreeEquals(node42);
        boolean boolean51 = node42.isInc();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node53.isNot();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = node53.copyInformationFromForTree(node59);
        com.google.javascript.rhino.InputId inputId61 = node53.getInputId();
        node42.addChildrenToFront(node53);
        node53.putBooleanProp(43, true);
        boolean boolean66 = node53.isParamList();
        boolean boolean67 = node53.isInc();
        com.google.javascript.rhino.Node node68 = node19.srcrefTree(node53);
        com.google.javascript.rhino.Node node69 = node53.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = node53.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [is_constant_name: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str50, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test16709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16709");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        boolean boolean71 = strList37.isEmpty();
        java.lang.Object[] objArray72 = strList37.toArray();
        java.lang.Object[] objArray73 = strList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList37.reverse();
        java.util.stream.Stream<java.lang.String> strStream75 = strList37.stream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strStream75);
    }

    @Test
    public void test16710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16710");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("[OR, [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]], [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "([OR, [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]], [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]])" + "'", str1, "([OR, [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]], [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]])");
    }

    @Test
    public void test16711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test16712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16712");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList11 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList10);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList3.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.lang.Object[] objArray14 = strList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList15 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strList3);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList3.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo17.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo17.getTemplateTypeNames();
        java.lang.String[] strArray29 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        strSet30.clear();
        boolean boolean34 = strList22.containsAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.stream.Stream<java.lang.String> strStream35 = strSet30.stream();
        boolean boolean37 = strSet30.add("unknown");
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        boolean boolean47 = strList40.retainAll((java.util.Collection<java.lang.String>) strList45);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>> strCollectionList48 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.String>) strList45);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList49 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList45);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet30.spliterator();
        boolean boolean51 = strSet30.isEmpty();
        int int52 = strSet30.size();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        boolean boolean62 = strList55.retainAll((java.util.Collection<java.lang.String>) strList60);
        int int63 = strList55.size();
        java.lang.Object[] objArray64 = strList55.toArray();
        int int65 = strList55.size();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        int int71 = node67.getCharno();
        boolean boolean72 = node67.isName();
        boolean boolean73 = node67.isNE();
        boolean boolean74 = node67.isIn();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        com.google.javascript.rhino.Node node80 = node78.getParent();
        boolean boolean81 = node80.isDefaultCase();
        int int82 = node67.getIndexOfChild(node80);
        boolean boolean83 = node80.isLabelName();
        boolean boolean84 = node80.wasEmptyNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = node80.getStaticSourceFile();
        node80.setType((int) (short) 10);
        boolean boolean88 = strList55.remove((java.lang.Object) (short) 10);
        java.util.stream.Stream<java.lang.String> strStream89 = strList55.stream();
        boolean boolean90 = strSet30.containsAll((java.util.Collection<java.lang.String>) strList55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = strList3.retainAll((java.util.Collection<java.lang.String>) strSet30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(charSequenceList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strCollectionList48);
        org.junit.Assert.assertNotNull(strCollectionList49);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test16713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16713");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition0.setPositionInformation((int) '#', 44, 51, 50);
        int int13 = stringPosition0.getEndLine();
        int int14 = stringPosition0.getEndLine();
        int int15 = stringPosition0.getEndLine();
        stringPosition0.setItem("FALSE OR [jsdoc_info: JSDocInfo] 39\n");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test16714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16714");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean10 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16715");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.stream.BaseStream[][] baseStreamArray8 = new java.util.stream.BaseStream[0][];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray9 = (java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][]) baseStreamArray8;
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray10 = strSet6.toArray(strBaseStreamArray9);
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet6.spliterator();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isNot();
        boolean boolean23 = node18.isIf();
        com.google.javascript.rhino.Node node24 = node15.copyInformationFromForTree(node18);
        boolean boolean25 = node15.hasMoreThanOneChild();
        boolean boolean26 = node15.isNew();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        int int32 = node30.getType();
        com.google.javascript.rhino.InputId inputId33 = node30.getInputId();
        com.google.javascript.rhino.Node node34 = node15.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node15.isCall();
        int int36 = node15.getSideEffectFlags();
        boolean boolean37 = strSet6.equals((java.lang.Object) node15);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(baseStreamArray8);
        org.junit.Assert.assertNotNull(strBaseStreamArray9);
        org.junit.Assert.assertNotNull(strBaseStreamArray10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test16716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16716");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo27.getThrownTypes();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo27.getSuppressions();
        boolean boolean36 = jSDocInfo27.isConsistentIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo27.getTemplateTypeNames();
        jSDocInfo27.setLicense("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 2 [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo27.getReturnType();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNull(jSTypeExpression40);
    }

    @Test
    public void test16717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16717");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        boolean boolean8 = node4.isTypeOf();
        boolean boolean9 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isTypeOf();
        boolean boolean16 = node11.isDelProp();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node20.setJSType(jSType23);
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        node27.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList35 = com.google.common.collect.ImmutableList.of(node4, node11, node20, node27);
        com.google.javascript.rhino.Node node36 = node2.copyInformationFrom(node27);
        node36.putIntProp((int) ' ', 45);
        boolean boolean40 = node36.isInstanceOf();
        int int41 = node36.getSideEffectFlags();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = jSDocInfo42.getTemplateTypeNames();
        boolean boolean45 = jSDocInfo42.isNoTypeCheck();
        java.lang.String str47 = jSDocInfo42.getDescriptionForParameter("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n");
        java.util.Set<java.lang.String> strSet48 = jSDocInfo42.getParameterNames();
        node36.setDirectives(strSet48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        int int51 = strSet48.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR" + "'", str25, "OR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test16718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16718");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = strList6.reverse();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        int int77 = node75.getType();
        com.google.javascript.rhino.InputId inputId78 = node75.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node75, "");
        boolean boolean81 = strList71.contains((java.lang.Object) node75);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList71.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        int int84 = jSDocInfo83.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo83.getExtendedInterfaces();
        boolean boolean86 = strList71.equals((java.lang.Object) jSTypeExpressionList85);
        java.util.Iterator<java.lang.String> strItor87 = strList71.iterator();
        java.util.ListIterator<java.lang.String> strItor89 = strList71.listIterator((int) (byte) 1);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertNotNull(strItor89);
    }

    @Test
    public void test16719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16719");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "false", 35, 38);
        boolean boolean5 = node4.isGetElem();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node4.getStaticSourceFile();
        boolean boolean7 = node4.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test16720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16720");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        boolean boolean3 = node2.isFor();
        node2.setCharno(409600);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test16721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16721");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        boolean boolean23 = node19.isTypeOf();
        boolean boolean24 = node19.wasEmptyNode();
        java.lang.Class<?> wildcardClass25 = node19.getClass();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        java.lang.Class<?> wildcardClass33 = node27.getClass();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isTypeOf();
        boolean boolean40 = node35.wasEmptyNode();
        java.lang.Class<?> wildcardClass41 = node35.getClass();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        boolean boolean47 = node43.isTypeOf();
        boolean boolean48 = node43.wasEmptyNode();
        java.lang.Class<?> wildcardClass49 = node43.getClass();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node51.isTypeOf();
        boolean boolean56 = node51.wasEmptyNode();
        java.lang.Class<?> wildcardClass57 = node51.getClass();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        boolean boolean63 = node59.isTypeOf();
        boolean boolean64 = node59.wasEmptyNode();
        java.lang.Class<?> wildcardClass65 = node59.getClass();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.wasEmptyNode();
        java.lang.Class<?> wildcardClass73 = node67.getClass();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        boolean boolean79 = node75.isTypeOf();
        boolean boolean80 = node75.wasEmptyNode();
        java.lang.Class<?> wildcardClass81 = node75.getClass();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        boolean boolean87 = node83.isTypeOf();
        boolean boolean88 = node83.wasEmptyNode();
        java.lang.Class<?> wildcardClass89 = node83.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration> genericDeclarationList90 = com.google.common.collect.ImmutableList.of((java.lang.reflect.GenericDeclaration) wildcardClass25, (java.lang.reflect.GenericDeclaration) wildcardClass33, (java.lang.reflect.GenericDeclaration) wildcardClass41, (java.lang.reflect.GenericDeclaration) wildcardClass49, (java.lang.reflect.GenericDeclaration) wildcardClass57, (java.lang.reflect.GenericDeclaration) wildcardClass65, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.lang.reflect.GenericDeclaration) wildcardClass81, (java.lang.reflect.GenericDeclaration) wildcardClass89);
        int int91 = strList13.indexOf((java.lang.Object) wildcardClass41);
        int int92 = strList13.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor94 = strList13.listIterator(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (41) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(genericDeclarationList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
    }

    @Test
    public void test16722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16722");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList23.containsAll((java.util.Collection<java.lang.String>) strList30);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor32 = strList23.listIterator();
        int int33 = strList23.size();
        boolean boolean34 = strList23.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int36 = strList23.lastIndexOf((java.lang.Object) visibility35);
        boolean boolean37 = strList2.addAll((java.util.Collection<java.lang.String>) strList23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isNoShadow();
        java.lang.String str40 = jSDocInfo38.getMeaning();
        boolean boolean41 = jSDocInfo38.hasReturnType();
        java.lang.String str42 = jSDocInfo38.getVersion();
        java.lang.String str43 = jSDocInfo38.toString();
        java.lang.String str44 = jSDocInfo38.getDeprecationReason();
        boolean boolean45 = jSDocInfo38.isExpose();
        jSDocInfo38.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo38.getReturnType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo38.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream50 = strSet49.parallelStream();
        int int51 = strList2.indexOf((java.lang.Object) strStream50);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JSDocInfo" + "'", str43, "JSDocInfo");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test16723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16723");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node14, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression22);
        com.google.javascript.rhino.Node node24 = jSTypeExpression23.getRoot();
        boolean boolean25 = jSTypeExpression23.isVarArgs();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = com.google.common.collect.ImmutableList.of(jSTypeExpression9, jSTypeExpression23);
        boolean boolean27 = jSTypeExpression23.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        com.google.javascript.rhino.Node node29 = jSTypeExpression23.getRoot();
        boolean boolean30 = jSTypeExpression23.isVarArgs();
        boolean boolean31 = jSTypeExpression23.isOptionalArg();
        boolean boolean32 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean48 = strList40.containsAll((java.util.Collection<java.lang.String>) strList47);
        int int49 = strList47.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor50 = strList47.iterator();
        boolean boolean51 = jSTypeExpression23.equals((java.lang.Object) strList47);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16724");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.lang.Object obj18 = null;
        boolean boolean19 = strList5.equals(obj18);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = strList5.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor22 = strList20.listIterator((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (1) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test16725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16725");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean4 = node3.isName();
        node3.setWasEmptyNode(true);
        node3.addSuppression("unknown");
        int int10 = node3.getIntProp(8);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test16726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16726");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node23.getType();
        com.google.javascript.rhino.InputId inputId26 = node23.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node29 = node10.srcref(node23);
        boolean boolean30 = node10.isNoSideEffectsCall();
        boolean boolean31 = node10.isFalse();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16727");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        boolean boolean15 = node10.isIf();
        com.google.javascript.rhino.Node node16 = node7.copyInformationFromForTree(node10);
        jSDocInfo1.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node10.children();
        boolean boolean19 = node10.isAssign();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, node10, 45, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node10.siblings();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 41, 36, 30);
        com.google.javascript.rhino.Node node28 = node10.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d);
        com.google.javascript.rhino.Node node31 = node30.removeFirstChild();
        com.google.javascript.rhino.Node node32 = node28.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node35.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node35.setStaticSourceFile(staticSourceFile38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        com.google.javascript.rhino.Node node51 = node41.useSourceInfoFromForTree(node48);
        boolean boolean52 = node35.hasChild(node41);
        boolean boolean53 = node35.isStringKey();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node35, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression55);
        com.google.javascript.rhino.Node node57 = jSTypeExpression56.getRoot();
        node30.putProp(7, (java.lang.Object) node57);
        boolean boolean59 = node30.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = node30.getExistingIntProp(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16728");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        node72.addChildrenToFront(node74);
        int int76 = node72.getCharno();
        boolean boolean77 = node72.isName();
        boolean boolean78 = node72.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        int int81 = strList62.lastIndexOf((java.lang.Object) "Unknown class name");
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList62.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strList62.spliterator();
        java.util.Iterator<java.lang.String> strItor84 = strList62.iterator();
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        com.google.javascript.rhino.jstype.JSType jSType86 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair87 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType85, jSType86);
        boolean boolean88 = strList62.equals((java.lang.Object) jSType85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet90 = jSDocInfo89.getParameterNames();
        java.util.Collection<java.lang.String> strCollection91 = jSDocInfo89.getReferences();
        boolean boolean92 = jSDocInfo89.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = jSDocInfo89.getParameterType("NUMBER 1.0 37\n");
        boolean boolean95 = jSDocInfo89.isImplicitCast();
        com.google.javascript.rhino.Node node96 = jSDocInfo89.getAssociatedNode();
        boolean boolean97 = strList62.remove((java.lang.Object) jSDocInfo89);
        strList62.clear();
        java.util.stream.Stream<java.lang.String> strStream99 = strList62.stream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNull(strCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strStream99);
    }

    @Test
    public void test16729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16729");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int5 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        com.google.javascript.rhino.Node node11 = node9.getParent();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType18 = node13.getJSType();
        boolean boolean19 = node13.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node20 = node11.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int26 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node27 = node13.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node25.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node29 = node4.copyInformationFrom(node25);
        boolean boolean30 = node4.isDebugger();
        boolean boolean31 = node4.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16730");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.InputId inputId19 = node1.getInputId();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int26 = node25.getSideEffectFlags();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node28.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(30, node25, node28, (int) '4', (int) (byte) 100);
        boolean boolean43 = node1.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags44 = null;
        // The following exception was thrown during execution in test generation
        try {
            node25.setSideEffectFlags(sideEffectFlags44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test16731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16731");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getReturnType();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        jSDocInfo0.setLicense("unknown");
        java.lang.String str9 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test16732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16732");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.isHidden();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR 0");
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean11 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str7, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test16733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16733");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "", (int) (byte) 10, 10);
        boolean boolean5 = node4.isDo();
        com.google.javascript.rhino.Node node7 = node4.getAncestor(0);
        com.google.javascript.rhino.Node node8 = node4.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test16734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16734");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList5 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "(())", (java.lang.CharSequence) "INSTANCEOF", (java.lang.CharSequence) "ASSIGN_MOD  [jsdoc_info: JSDocInfo]", (java.lang.CharSequence) "(STRING (OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n))", (java.lang.CharSequence) "GT RETURN ()\n\n");
        org.junit.Assert.assertNotNull(charSequenceList5);
    }

    @Test
    public void test16735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16735");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str14 = ternaryValue13.toString();
        boolean boolean16 = ternaryValue13.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue10.and(ternaryValue13);
        boolean boolean19 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str21 = ternaryValue20.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str26 = ternaryValue25.toString();
        boolean boolean28 = ternaryValue25.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue29.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue20.or(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue9, ternaryValue10, ternaryValue31, ternaryValue32);
        boolean boolean35 = ternaryValue31.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue39.xor(ternaryValue40);
        boolean boolean43 = ternaryValue39.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean46 = ternaryValue44.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean49 = ternaryValue47.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str51 = ternaryValue50.toString();
        boolean boolean53 = ternaryValue50.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue47.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue44.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue39.or(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue57.xor(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue55.xor(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue37.xor(ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue31.xor(ternaryValue60);
        boolean boolean64 = ternaryValue60.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "unknown" + "'", str14, "unknown");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "unknown" + "'", str21, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "unknown" + "'", str26, "unknown");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "unknown" + "'", str51, "unknown");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test16736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16736");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node4.setStaticSourceFile(staticSourceFile7);
        boolean boolean9 = node4.isComma();
        node1.addChildrenToBack(node4);
        boolean boolean11 = node1.isVoid();
        boolean boolean12 = node1.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test16737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16737");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        boolean boolean20 = strList2.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = strList2.asList();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test16738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16738");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isHook();
        boolean boolean9 = node1.isBlock();
        boolean boolean10 = node1.isQuotedString();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("JSDocInfo", 43, (int) (byte) 0);
        node14.addSuppression("INSTANCEOF");
        boolean boolean17 = node14.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChild(node14, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16739");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isTypeOf();
        boolean boolean23 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        boolean boolean30 = node25.isDelProp();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node34.getParent();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node34.setJSType(jSType37);
        java.lang.String str39 = node34.toString();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node41.setStaticSourceFile(staticSourceFile44);
        boolean boolean46 = node41.isComma();
        node41.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList49 = com.google.common.collect.ImmutableList.of(node18, node25, node34, node41);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node53.isLabel();
        boolean boolean56 = node53.isContinue();
        com.google.javascript.rhino.Node node57 = node25.copyInformationFrom(node53);
        node53.setCharno(4095);
        int int60 = strList16.indexOf((java.lang.Object) node53);
        boolean boolean61 = node53.isAssignAdd();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR" + "'", str39, "OR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test16740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16740");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16741");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isDefaultCase();
        boolean boolean8 = node1.isLocalResultCall();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        boolean boolean10 = node1.hasChildren();
        boolean boolean11 = node1.isExprResult();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16742");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "STRING Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: NUMBER -1.0\n 10");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16743");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker4.getName();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(stringPosition24);
    }

    @Test
    public void test16744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16744");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.hasChildren();
        com.google.javascript.rhino.Node node15 = node1.srcrefTree(node10);
        boolean boolean16 = node15.isLabel();
        java.util.Set<java.lang.String> strSet17 = node15.getDirectives();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str13, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test16745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16745");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        boolean boolean11 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("NUMBER ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test16746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16746");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        boolean boolean9 = typePosition2.hasBrackets();
        int int10 = typePosition2.getPositionOnEndLine();
        int int11 = typePosition2.getPositionOnEndLine();
        int int12 = typePosition2.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test16747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16747");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "");
        java.lang.String str4 = node3.toStringTree();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        boolean boolean11 = node8.isHook();
        boolean boolean12 = node8.isString();
        node8.setOptionalArg(false);
        boolean boolean15 = node8.isRegExp();
        boolean boolean16 = node8.isRegExp();
        boolean boolean17 = node8.isThis();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node19.addSuppression("");
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node19.copyInformationFromForTree(node24);
        boolean boolean31 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isTypeOf();
        boolean boolean38 = node33.isVarArgs();
        boolean boolean39 = node33.isIn();
        node24.addChildToFront(node33);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        node42.addSuppression("");
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node47.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node42.copyInformationFromForTree(node47);
        boolean boolean54 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node56.addChildrenToFront(node58);
        boolean boolean60 = node56.isTypeOf();
        boolean boolean61 = node56.isVarArgs();
        boolean boolean62 = node56.isIn();
        node47.addChildToFront(node56);
        node56.removeProp(48);
        boolean boolean66 = node56.isAssign();
        boolean boolean67 = node56.isTrue();
        boolean boolean68 = node24.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node69 = node24.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(48, node3, node8, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR \n" + "'", str4, "OR \n");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str22, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str45, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node69);
    }

    @Test
    public void test16748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16748");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        boolean boolean8 = node1.isName();
        boolean boolean9 = node1.isDo();
        boolean boolean10 = node1.isDec();
        boolean boolean11 = node1.isNot();
        com.google.javascript.rhino.Node node12 = node1.getFirstChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isNot();
        boolean boolean20 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        com.google.javascript.rhino.Node node25 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node27.setStaticSourceFile(staticSourceFile30);
        boolean boolean32 = node27.isComma();
        boolean boolean33 = node27.isBlock();
        java.lang.String str34 = node27.toStringTree();
        boolean boolean35 = node27.isDec();
        node27.setWasEmptyNode(false);
        boolean boolean38 = node27.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node40.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node40.getStaticSourceFile();
        boolean boolean46 = node40.isVarArgs();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(40, node25, node27, node40);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        boolean boolean53 = node49.isNot();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node55);
        com.google.javascript.rhino.InputId inputId57 = node49.getInputId();
        boolean boolean58 = node49.isFromExterns();
        boolean boolean59 = node27.hasChild(node49);
        java.util.Set<java.lang.String> strSet60 = node49.getDirectives();
        node1.addChildrenToFront(node49);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str34, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str43, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strSet60);
    }

    @Test
    public void test16749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16749");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(51);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27 + "'", int4 == 27);
    }

    @Test
    public void test16750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16750");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test16751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16751");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        int int13 = node12.getSideEffectFlags();
        boolean boolean14 = node12.isBlock();
        com.google.javascript.rhino.Node node15 = node12.cloneTree();
        boolean boolean16 = node12.isVarArgs();
        node12.setWasEmptyNode(false);
        int int19 = node12.getChildCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test16752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16752");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList11 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList10);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList3.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.lang.Object[] objArray14 = strList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList15 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strList3);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor16 = strList3.listIterator();
        java.util.stream.Stream<java.lang.String> strStream17 = strList3.parallelStream();
        java.lang.Object[] objArray18 = strList3.toArray();
        java.util.Iterator<java.lang.String> strItor19 = strList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strList3.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(charSequenceList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceList15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strItor19);
    }

    @Test
    public void test16753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16753");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        node6.setSourceEncodedPositionForTree((int) (short) -1);
        boolean boolean17 = node6.isExprResult();
        boolean boolean18 = node6.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node6.getAncestors();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isIf();
        com.google.javascript.rhino.Node node32 = node23.copyInformationFromForTree(node26);
        boolean boolean33 = node23.isEmpty();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isReturn();
        com.google.javascript.rhino.InputId inputId40 = node35.getInputId();
        boolean boolean41 = node35.isAdd();
        node23.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node43 = node23.removeFirstChild();
        com.google.javascript.rhino.Node node44 = node6.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean45 = node23.isFromExterns();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node47.addSuppression("");
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node47.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node47.getStaticSourceFile();
        boolean boolean53 = node47.isLocalResultCall();
        boolean boolean54 = node47.isArrayLit();
        boolean boolean55 = node47.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = node47.getLastSibling();
        boolean boolean57 = node23.isEquivalentTo(node56);
        node23.setLength(40999);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputId40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str50, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test16754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16754");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        boolean boolean21 = node14.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.hasChildren();
        com.google.javascript.rhino.Node node28 = node14.srcrefTree(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.children();
        boolean boolean30 = strSet7.remove((java.lang.Object) node23);
        int int31 = strSet7.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo32.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo32.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo32.getTemplateTypeNames();
        java.lang.String[] strArray44 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.lang.Object[] objArray47 = strSet45.toArray();
        strSet45.clear();
        boolean boolean49 = strList37.containsAll((java.util.Collection<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = strList37.reverse();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags52 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags52.setReturnsTainted();
        sideEffectFlags52.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setMutatesArguments();
        sideEffectFlags56.setMutatesGlobalState();
        sideEffectFlags56.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags61 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags61.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags64 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray65 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags52, sideEffectFlags56, sideEffectFlags61, sideEffectFlags64 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray66 = strList37.toArray(sideEffectFlagsArray65);
        java.util.ListIterator<java.lang.String> strItor67 = strList37.listIterator();
        java.util.Iterator<java.lang.String> strItor68 = strList37.iterator();
        java.util.stream.Stream<java.lang.String> strStream69 = strList37.stream();
        boolean boolean70 = strSet7.equals((java.lang.Object) strList37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo71.getImplementedInterfaces();
        java.lang.String str74 = jSDocInfo71.getMeaning();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node77.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node77.setStaticSourceFile(staticSourceFile80);
        boolean boolean82 = node77.isComma();
        boolean boolean83 = node77.isFalse();
        boolean boolean84 = node77.isNoSideEffectsCall();
        boolean boolean85 = node77.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder86 = node77.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(35, node77);
        java.util.Set<java.lang.String> strSet88 = node77.getDirectives();
        jSDocInfo71.setAssociatedNode(node77);
        boolean boolean90 = strSet7.remove((java.lang.Object) node77);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray65);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray66);
        org.junit.Assert.assertNotNull(strItor67);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test16755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16755");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        java.lang.Object obj13 = node11.getProp(38);
        node11.setCharno(2);
        boolean boolean16 = node11.isInstanceOf();
        boolean boolean17 = node11.isDefaultCase();
        java.lang.Object obj19 = node11.getProp(131072);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test16756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16756");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node23.getType();
        com.google.javascript.rhino.InputId inputId26 = node23.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node29 = node10.srcref(node23);
        boolean boolean30 = node23.isReturn();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(12, "OR [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        boolean boolean35 = node23.isEquivalentTo(node34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getFileOverview();
        java.lang.String str38 = jSDocInfo36.getFileOverview();
        java.lang.String str39 = jSDocInfo36.getMeaning();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node41.getStaticSourceFile();
        boolean boolean47 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node54.addSuppression("");
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node54.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node49.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node61 = node41.useSourceInfoFrom(node54);
        jSDocInfo36.setAssociatedNode(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node41.children();
        boolean boolean64 = node41.isReturn();
        com.google.javascript.rhino.Node node65 = node41.cloneTree();
        node23.addChildrenToFront(node65);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str52, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str57, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test16757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16757");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        com.google.javascript.rhino.Node node68 = node27.cloneTree();
        boolean boolean69 = node27.isQuotedString();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node71.addChildrenToFront(node73);
        com.google.javascript.rhino.Node node75 = node73.getParent();
        node73.setIsSyntheticBlock(true);
        boolean boolean78 = node73.isContinue();
        com.google.javascript.rhino.Node node79 = node27.srcrefTree(node73);
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node73.setJSType(jSType80);
        boolean boolean82 = node73.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16758");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList9 = com.google.common.collect.ImmutableList.of(visibility6, visibility7, visibility8);
        jSDocInfo0.setVisibility(visibility8);
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16759");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.hasBaseType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("(Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n    ERROR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: ERROR\n    OR\n)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test16760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16760");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isVoid();
        node5.removeProp(0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        com.google.javascript.rhino.Node node15 = node13.getParent();
        boolean boolean16 = node15.isDefaultCase();
        boolean boolean17 = node15.isVoid();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node15.getJsDocBuilderForNode();
        boolean boolean19 = node15.isBlock();
        com.google.javascript.rhino.Node node20 = node5.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean21 = node20.isDefaultCase();
        boolean boolean22 = node20.isIf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test16761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16761");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "GETELEM");
        boolean boolean3 = node2.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test16762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16762");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("GETELEM", (int) '4', 4095);
        node3.putBooleanProp(53, false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16763");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(32, "(OR 0\n)");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16764");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoFrom(node10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        node23.putIntProp((int) (short) 0, 38);
        node19.addChildToBack(node23);
        boolean boolean31 = node23.isEmpty();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        boolean boolean38 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.Node node43 = node33.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node44 = node23.srcref(node40);
        boolean boolean45 = node23.hasChildren();
        boolean boolean46 = node23.isQualifiedName();
        boolean boolean47 = node23.isContinue();
        boolean boolean48 = node23.isVoid();
        com.google.javascript.rhino.Node node49 = node15.useSourceInfoFromForTree(node23);
        node15.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test16765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16765");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        int int3 = strList2.size();
        boolean boolean4 = strList2.isEmpty();
        java.util.Collection<java.lang.String> strCollection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strList2.addAll(strCollection5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test16766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        com.google.javascript.rhino.Node node24 = node14.useSourceInfoFromForTree(node21);
        boolean boolean25 = node8.hasChild(node14);
        boolean boolean26 = node14.isNot();
        node14.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node14);
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean31 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16767");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        int int30 = strList13.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = strList13.reverse();
        java.lang.String str32 = strList31.toString();
        boolean boolean33 = strList31.isEmpty();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]" + "'", str32, "[OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo], hi!, , ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16768");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        com.google.javascript.rhino.Node node7 = node5.getParent();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        node9.putIntProp((int) (short) 0, 38);
        node5.addChildToBack(node9);
        boolean boolean17 = node9.isNE();
        boolean boolean18 = node9.isFalse();
        boolean boolean19 = node9.isSwitch();
        boolean boolean20 = node9.isBlock();
        com.google.javascript.rhino.Node node21 = node1.clonePropsFrom(node9);
        boolean boolean22 = node21.isDec();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test16769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16769");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue3.xor(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue1.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue6.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str12 = ternaryValue11.toString();
        boolean boolean14 = ternaryValue11.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue8.and(ternaryValue11);
        boolean boolean17 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str19 = ternaryValue18.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean22 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str24 = ternaryValue23.toString();
        boolean boolean26 = ternaryValue23.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue20.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue18.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue18.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue8.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue6.xor(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "unknown" + "'", str12, "unknown");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "unknown" + "'", str19, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "unknown" + "'", str24, "unknown");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
    }

    @Test
    public void test16770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16770");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        boolean boolean35 = jSDocInfo27.hasDescriptionForParameter("hi!");
        boolean boolean36 = jSDocInfo27.isConsistentIdGenerator();
        boolean boolean37 = jSDocInfo27.hasType();
        boolean boolean38 = jSDocInfo27.isExpose();
        int int39 = jSDocInfo27.getParameterCount();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test16771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16771");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test16772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList24.containsAll((java.util.Collection<java.lang.String>) strList31);
        int int33 = strList31.size();
        boolean boolean34 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.isNoShadow();
        java.lang.String str37 = jSDocInfo35.getMeaning();
        com.google.javascript.rhino.Node node38 = jSDocInfo35.getAssociatedNode();
        java.lang.String str39 = jSDocInfo35.getLicense();
        java.lang.String str40 = jSDocInfo35.getSourceName();
        jSDocInfo35.setLicense("((OR))");
        boolean boolean44 = jSDocInfo35.hasParameter("");
        boolean boolean45 = jSDocInfo35.isImplicitCast();
        boolean boolean47 = jSDocInfo35.hasParameterType("Unknown class name");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        int int53 = node49.getCharno();
        boolean boolean54 = node49.isName();
        boolean boolean55 = node49.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node49, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression57);
        com.google.javascript.rhino.Node node59 = jSTypeExpression58.getRoot();
        boolean boolean60 = jSTypeExpression58.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean62 = jSTypeExpression58.equals((java.lang.Object) visibility61);
        jSDocInfo35.setVisibility(visibility61);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo35.getReturnType();
        boolean boolean65 = jSDocInfo35.hasModifies();
        java.lang.String str66 = jSDocInfo35.getLicense();
        boolean boolean67 = strSet13.remove((java.lang.Object) str66);
        int int68 = strSet13.size();
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet13.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "((OR))" + "'", str66, "((OR))");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strSpliterator69);
    }

    @Test
    public void test16773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16773");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isOnlyModifiesThisCall();
        boolean boolean10 = node3.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16774");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.union(booleanLiteralSet19);
        boolean boolean21 = strList16.equals((java.lang.Object) booleanLiteralSet18);
        java.lang.Object obj22 = null;
        boolean boolean23 = strList16.equals(obj22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isReturn();
        com.google.javascript.rhino.InputId inputId30 = node25.getInputId();
        boolean boolean31 = node25.isArrayLit();
        boolean boolean32 = node25.isInc();
        boolean boolean33 = strList16.contains((java.lang.Object) node25);
        boolean boolean34 = node25.isRegExp();
        boolean boolean35 = node25.isVar();
        boolean boolean36 = node25.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node25.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator38 = nodeIterable37.spliterator();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
    }

    @Test
    public void test16775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16775");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node33.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasBaseType();
        jSDocInfo53.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getBaseType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet58.spliterator();
        node33.setDirectives(strSet58);
        int int61 = node33.getSourcePosition();
        java.lang.String str62 = node33.toStringTree();
        boolean boolean63 = node33.isDefaultCase();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "OR [directives: []]\n    OR\n" + "'", str62, "OR [directives: []]\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test16776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16776");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4096, "Unknown class name");
        node2.setLineno(409600);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(10.0d, 39, 4);
        boolean boolean9 = node8.isFunction();
        java.lang.Object obj11 = null;
        node8.putProp(54, obj11);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node14.children();
        node14.putIntProp(8, (int) '4');
        boolean boolean22 = node14.isInstanceOf();
        int int23 = node14.getSourcePosition();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node14.getAncestors();
        boolean boolean25 = node14.isExprResult();
        node14.setWasEmptyNode(true);
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node8, node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16777");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = strSet3.add("(((NUMBER 1.0 37\n)))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test16778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16778");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        boolean boolean8 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = node1.getFirstChild();
        boolean boolean10 = node9.isUnscopedQualifiedName();
        boolean boolean11 = node9.hasOneChild();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16779");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.isDelProp();
        boolean boolean10 = node3.isNE();
        boolean boolean11 = node3.isGetElem();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16780");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.lang.String str26 = jSDocInfo19.toString();
        java.lang.String str27 = jSDocInfo19.getFileOverview();
        java.lang.String str28 = jSDocInfo19.getBlockDescription();
        jSDocInfo19.addSuppression("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR NUMBER 1.0 37\n 29\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR NUMBER 1.0 37\n 29\n");
        boolean boolean31 = jSDocInfo19.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JSDocInfo" + "'", str26, "JSDocInfo");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16781");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean33 = strList25.containsAll((java.util.Collection<java.lang.String>) strList32);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor34 = strList25.listIterator();
        int int35 = strList25.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList25.asList();
        java.lang.Object[] objArray37 = strList36.toArray();
        boolean boolean38 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean40 = strSet13.add("NUMBER 4.0 1\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasBaseType();
        java.lang.String str43 = jSDocInfo41.getFileOverview();
        int int44 = jSDocInfo41.getParameterCount();
        boolean boolean45 = jSDocInfo41.isConstant();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.hasBaseType();
        jSDocInfo47.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo47.getTypedefType();
        boolean boolean52 = jSDocInfo47.isNoSideEffects();
        com.google.javascript.rhino.Node node53 = jSDocInfo47.getAssociatedNode();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo47.getSuppressions();
        strSet54.clear();
        int int56 = strSet54.size();
        boolean boolean57 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean72 = strList64.containsAll((java.util.Collection<java.lang.String>) strList71);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList64.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = strList64.asList();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet76.union(booleanLiteralSet77);
        boolean boolean79 = strList74.equals((java.lang.Object) booleanLiteralSet76);
        java.lang.Object obj80 = null;
        boolean boolean81 = strList74.equals(obj80);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        node83.addChildrenToFront(node85);
        boolean boolean87 = node83.isReturn();
        com.google.javascript.rhino.InputId inputId88 = node83.getInputId();
        boolean boolean89 = node83.isArrayLit();
        boolean boolean90 = node83.isInc();
        boolean boolean91 = strList74.contains((java.lang.Object) node83);
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = strList74.reverse();
        boolean boolean93 = strSet54.remove((java.lang.Object) strList74);
        boolean boolean94 = strSet13.removeAll((java.util.Collection<java.lang.String>) strList74);
        boolean boolean96 = strSet13.add("unknown");
        java.lang.Object[] objArray97 = strSet13.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(inputId88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[NUMBER 4.0 1\n, unknown]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[NUMBER 4.0 1\n, unknown]");
    }

    @Test
    public void test16782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16782");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(221184);
    }

    @Test
    public void test16783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16783");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node3.addChildrenToFront(node5);
        boolean boolean7 = node3.isNot();
        boolean boolean8 = node3.isIf();
        boolean boolean9 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node11.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node11.setStaticSourceFile(staticSourceFile14);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        com.google.javascript.rhino.Node node26 = node24.getParent();
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoFromForTree(node24);
        boolean boolean28 = node11.hasChild(node17);
        node3.addChildToBack(node17);
        boolean boolean30 = node3.isTrue();
        boolean boolean31 = node3.isInc();
        com.google.javascript.rhino.Node node32 = node3.getLastSibling();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        boolean boolean44 = node39.isIf();
        com.google.javascript.rhino.Node node45 = node36.copyInformationFromForTree(node39);
        boolean boolean46 = node36.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isReturn();
        com.google.javascript.rhino.InputId inputId53 = node48.getInputId();
        boolean boolean54 = node48.isAdd();
        node36.addChildrenToFront(node48);
        boolean boolean56 = node48.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        java.lang.String str61 = node58.toString();
        com.google.javascript.rhino.Node node62 = node58.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node58.getStaticSourceFile();
        boolean boolean64 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        node66.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node66.setStaticSourceFile(staticSourceFile69);
        boolean boolean71 = node66.isComma();
        node66.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node75.addChildrenToFront(node77);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node75.children();
        com.google.javascript.rhino.InputId inputId80 = null;
        node75.setInputId(inputId80);
        boolean boolean82 = node75.isName();
        java.lang.String str83 = node66.checkTreeEquals(node75);
        boolean boolean84 = node75.isInc();
        node75.setType((int) (short) -1);
        node58.addChildrenToFront(node75);
        java.lang.String str88 = node58.getSourceFileName();
        node48.addChildToBack(node58);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable90 = node48.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(0, node1, node3, node48, 1, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str61, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str83, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(ancestorIterable90);
    }

    @Test
    public void test16784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16784");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = node11.cloneNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        com.google.javascript.rhino.Node node46 = node12.copyInformationFrom(node37);
        boolean boolean47 = node12.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(35, node12);
        com.google.javascript.rhino.Node node49 = node12.getLastSibling();
        boolean boolean50 = node12.isTrue();
        com.google.javascript.rhino.Node node51 = node1.srcref(node12);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        node55.setIsSyntheticBlock(true);
        boolean boolean60 = node55.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node55.getJsDocBuilderForNode();
        boolean boolean62 = node55.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            node12.removeChild(node55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16785");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNew();
        int int6 = node1.getSourcePosition();
        boolean boolean7 = node1.isBreak();
        com.google.javascript.rhino.Node node8 = node1.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test16786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16786");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("((OR))");
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        int int8 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test16787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16787");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int19 = strList6.lastIndexOf((java.lang.Object) visibility18);
        java.util.stream.Stream<java.lang.String> strStream20 = strList6.parallelStream();
        java.util.Iterator<java.lang.String> strItor21 = strList6.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strList6.spliterator();
        java.util.ListIterator<java.lang.String> strItor23 = strList6.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = strList6.set(221184, "OR [jsdoc_info: JSDocInfo] [length: 46]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strItor23);
    }

    @Test
    public void test16788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16788");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker0.getName();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
    }

    @Test
    public void test16789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16789");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        com.google.javascript.rhino.Node node22 = node21.getFirstChild();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean25 = sideEffectFlags24.areAllFlagsSet();
        sideEffectFlags24.setAllFlags();
        sideEffectFlags24.setMutatesThis();
        sideEffectFlags24.setThrows();
        sideEffectFlags24.setMutatesGlobalState();
        sideEffectFlags24.clearSideEffectFlags();
        int int31 = sideEffectFlags24.valueOf();
        sideEffectFlags24.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node21.setSideEffectFlags(sideEffectFlags24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
    }

    @Test
    public void test16790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16790");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        int int16 = strList13.size();
        boolean boolean17 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasBaseType();
        jSDocInfo18.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo18.getBaseType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        int int29 = node25.getCharno();
        boolean boolean30 = node25.isContinue();
        boolean boolean31 = strSet23.equals((java.lang.Object) node25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.setIsSyntheticBlock(true);
        boolean boolean40 = node35.isContinue();
        boolean boolean41 = strSet23.equals((java.lang.Object) node35);
        java.lang.Object[] objArray42 = strSet23.toArray();
        int int43 = strList13.indexOf((java.lang.Object) objArray42);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList13.spliterator();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        boolean boolean49 = node46.isVarArgs();
        int int50 = node46.getChildCount();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isNot();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node60 = node46.useSourceInfoFromForTree(node58);
        int int61 = strList13.lastIndexOf((java.lang.Object) node46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor63 = strList13.listIterator((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test16791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16791");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(1.0d);
        boolean boolean2 = node1.hasOneChild();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = new com.google.javascript.rhino.JSTypeExpression(node1, "[OR, [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]], [, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]]");
        boolean boolean5 = node1.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16792");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setIsSyntheticBlock(true);
        int int24 = node19.getType();
        boolean boolean25 = node19.isObjectLit();
        boolean boolean26 = node19.isCase();
        boolean boolean27 = strSet7.equals((java.lang.Object) boolean26);
        boolean boolean28 = strSet7.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet7.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str31 = jSDocInfo30.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = jSDocInfo30.getTemplateTypeNames();
        int int33 = strList32.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = strList32.reverse();
        boolean boolean35 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList34);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16793");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = com.google.common.collect.ImmutableList.of(visibility4, visibility5, visibility6);
        jSDocInfo0.setVisibility(visibility6);
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        jSDocInfo0.setLicense("OR [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        boolean boolean14 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo0.getModifies();
        boolean boolean17 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
    }

    @Test
    public void test16794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16794");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo27.getThrownTypes();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo27.getSuppressions();
        boolean boolean36 = jSDocInfo27.isConsistentIdGenerator();
        int int37 = jSDocInfo27.getExtendedInterfacesCount();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test16795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16795");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo2.getParameterNames();
        boolean boolean4 = jSDocInfo2.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo2.getThrownTypes();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.isDelProp();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node25 = node23.getParent();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node23.setJSType(jSType26);
        java.lang.String str28 = node23.toString();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node30.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node30.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node30.isComma();
        node30.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList38 = com.google.common.collect.ImmutableList.of(node7, node14, node23, node30);
        boolean boolean39 = node30.isComma();
        boolean boolean40 = node30.isCase();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int46 = node45.getSideEffectFlags();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        com.google.javascript.rhino.Node node52 = node50.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str54 = jSDocInfo53.getFileOverview();
        java.lang.String str55 = jSDocInfo53.getFileOverview();
        boolean boolean56 = jSDocInfo53.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList57 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo2, (java.lang.Object) node30, (java.lang.Object) node45, (java.lang.Object) node50, (java.lang.Object) jSDocInfo53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("OR");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node59.siblings();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node62.children();
        boolean boolean67 = node62.isVoid();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node69.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        node69.setStaticSourceFile(staticSourceFile72);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node75.addSuppression("");
        java.lang.String str78 = node75.toString();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100);
        node80.addChildrenToFront(node82);
        com.google.javascript.rhino.Node node84 = node82.getParent();
        com.google.javascript.rhino.Node node85 = node75.useSourceInfoFromForTree(node82);
        boolean boolean86 = node69.hasChild(node75);
        boolean boolean87 = node75.hasMoreThanOneChild();
        boolean boolean89 = node75.getBooleanProp(51);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(12, node30, node59, node62, node75, 44, 0);
        int int93 = node62.getCharno();
        boolean boolean94 = node62.isLabel();
        node62.setLength(30);
        boolean boolean97 = node62.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR" + "'", str28, "OR");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str78, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16796");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        int int22 = jSDocInfo19.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        node10.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.lang.String str26 = jSDocInfo19.toString();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo19.getParameterNames();
        boolean boolean28 = jSDocInfo19.isNoSideEffects();
        boolean boolean29 = jSDocInfo19.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JSDocInfo" + "'", str26, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16797");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isReturn();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        boolean boolean16 = node10.isArrayLit();
        boolean boolean17 = node10.isInc();
        com.google.javascript.rhino.Node node18 = node1.srcrefTree(node10);
        node18.setIsSyntheticBlock(false);
        boolean boolean21 = node18.isHook();
        boolean boolean22 = node18.isVar();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node33 = node31.getParent();
        com.google.javascript.rhino.Node node34 = node24.useSourceInfoFromForTree(node31);
        boolean boolean35 = node34.isSetterDef();
        com.google.javascript.rhino.Node node36 = node34.getLastChild();
        boolean boolean37 = node34.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(6, (int) (short) 0, 0);
        com.google.javascript.rhino.Node node42 = node34.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node43 = node18.srcrefTree(node34);
        boolean boolean44 = node18.isNull();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test16798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16798");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.removeFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.setIsSyntheticBlock(true);
        boolean boolean23 = node18.isContinue();
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isTypeOf();
        boolean boolean39 = node34.isDelProp();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node43.setJSType(jSType46);
        java.lang.String str48 = node43.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        node50.setStaticSourceFile(staticSourceFile53);
        boolean boolean55 = node50.isComma();
        node50.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList58 = com.google.common.collect.ImmutableList.of(node27, node34, node43, node50);
        boolean boolean59 = node18.hasChild(node27);
        com.google.javascript.rhino.Node node60 = node9.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node27.setJSType(jSType61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("OR");
        node64.addSuppression("NUMBER 4.0 1\n");
        node27.addChildrenToFront(node64);
        com.google.javascript.rhino.Node node68 = node27.cloneTree();
        boolean boolean69 = node27.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR" + "'", str48, "OR");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test16799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16799");
        java.lang.String[] strArray3 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        boolean boolean6 = strList4.isEmpty();
        strList4.clear();
        boolean boolean9 = strList4.add("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.getFileOverview();
        java.lang.String str12 = jSDocInfo10.getFileOverview();
        boolean boolean13 = jSDocInfo10.isNoAlias();
        int int14 = strList4.lastIndexOf((java.lang.Object) boolean13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList4.spliterator();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder16 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node26.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node[][] nodeArray41 = new com.google.javascript.rhino.Node[][] { nodeArray24, nodeArray32, nodeArray40 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder42 = nodeArrayBuilder16.add(nodeArray41);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node46.isLabel();
        boolean boolean49 = node46.isObjectLit();
        int int50 = node46.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node46 };
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        boolean boolean57 = node55.isLabel();
        boolean boolean58 = node55.isObjectLit();
        int int59 = node55.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] { node55 };
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node64.isLabel();
        boolean boolean67 = node64.isObjectLit();
        int int68 = node64.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] { node64 };
        com.google.javascript.rhino.Node[][] nodeArray70 = new com.google.javascript.rhino.Node[][] { nodeArray51, nodeArray60, nodeArray69 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder71 = nodeArrayBuilder42.add(nodeArray70);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        boolean boolean78 = node74.isTypeOf();
        boolean boolean79 = node74.isDelProp();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100);
        node81.addChildrenToFront(node83);
        int int85 = node81.getCharno();
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] { node74, node81 };
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray86);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder88 = nodeArrayBuilder42.add(nodeArray86);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder89 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray90 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder91 = nodeArrayBuilder89.add(nodeArray90);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder92 = nodeArrayBuilder42.add(nodeArray90);
        boolean boolean93 = strList4.contains((java.lang.Object) nodeArray90);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(36, nodeArray90);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) '4', nodeArray90);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str37, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArrayBuilder42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArrayBuilder71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(nodeArrayBuilder88);
        org.junit.Assert.assertNotNull(nodeArray90);
        org.junit.Assert.assertNotNull(nodeArrayBuilder91);
        org.junit.Assert.assertNotNull(nodeArrayBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test16800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16800");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition7.getStartLine();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isReturn();
        com.google.javascript.rhino.InputId inputId16 = node11.getInputId();
        typePosition7.setItem(node11);
        int int18 = typePosition7.getEndLine();
        int int19 = typePosition7.getEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test16801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16801");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isTypeOf();
        boolean boolean7 = node2.isOnlyModifiesThisCall();
        boolean boolean8 = node2.isDelProp();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node10.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node10.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node10.isComma();
        boolean boolean16 = node10.isBlock();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = node18.cloneNode();
        com.google.javascript.rhino.Node node20 = node10.copyInformationFromForTree(node19);
        node10.setType((int) '4');
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        int int28 = node26.getType();
        boolean boolean29 = node26.isOptionalArg();
        com.google.javascript.rhino.Node node30 = node10.useSourceInfoFrom(node26);
        boolean boolean31 = node10.isSwitch();
        com.google.javascript.rhino.Node node32 = node10.getNext();
        boolean boolean33 = node10.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasBaseType();
        jSDocInfo34.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getBaseType();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo34.getParameterNames();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        int int45 = node41.getCharno();
        boolean boolean46 = node41.isContinue();
        boolean boolean47 = strSet39.equals((java.lang.Object) node41);
        boolean boolean48 = node41.isSetterDef();
        node41.setSourceFileForTesting("NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        boolean boolean55 = node52.isVarArgs();
        int int56 = node52.getChildCount();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isNot();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node65 = node58.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node66 = node52.useSourceInfoFromForTree(node64);
        node66.setCharno(16);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(29, node2, node10, node41, node66, 51, 16);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        boolean boolean77 = node73.isNot();
        boolean boolean78 = node73.isLocalResultCall();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        com.google.javascript.rhino.Node node83 = node73.copyInformationFromForTree(node80);
        node2.addChildrenToBack(node80);
        boolean boolean85 = node80.isString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test16802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16802");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16803");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean28 = strList20.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList20.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList20.asList();
        boolean boolean31 = strSet5.contains((java.lang.Object) strList30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isReturn();
        com.google.javascript.rhino.InputId inputId38 = node33.getInputId();
        boolean boolean39 = node33.isAdd();
        boolean boolean40 = node33.isQuotedString();
        int int42 = node33.getIntProp((int) (byte) 1);
        boolean boolean43 = node33.isVarArgs();
        boolean boolean44 = strList30.contains((java.lang.Object) boolean43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str46 = jSDocInfo45.getFileOverview();
        java.lang.String str47 = jSDocInfo45.getFileOverview();
        java.lang.String str48 = jSDocInfo45.getMeaning();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        boolean boolean56 = node50.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        java.lang.String str61 = node58.toString();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node63.addSuppression("");
        java.lang.String str66 = node63.toString();
        com.google.javascript.rhino.Node node67 = node63.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node63.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node58.copyInformationFromForTree(node63);
        com.google.javascript.rhino.Node node70 = node50.useSourceInfoFrom(node63);
        jSDocInfo45.setAssociatedNode(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node50.children();
        boolean boolean73 = node50.isAnd();
        boolean boolean74 = node50.isBlock();
        boolean boolean75 = node50.isDefaultCase();
        boolean boolean76 = node50.isRegExp();
        boolean boolean77 = strList30.contains((java.lang.Object) node50);
        java.util.Iterator<java.lang.String> strItor78 = strList30.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = strList30.subList((int) (short) 0, (int) (byte) 0);
        java.lang.Object[] objArray82 = strList81.toArray();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor84 = strList81.listIterator(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (4095) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(inputId38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str61, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str66, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
    }

    @Test
    public void test16804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16804");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue3.xor(ternaryValue4);
        boolean boolean7 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean13 = ternaryValue11.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str15 = ternaryValue14.toString();
        boolean boolean17 = ternaryValue14.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue11.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue8.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue3.or(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str22 = ternaryValue21.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean25 = ternaryValue23.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str27 = ternaryValue26.toString();
        boolean boolean29 = ternaryValue26.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue23.and(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str35 = ternaryValue34.toString();
        boolean boolean37 = ternaryValue34.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue31.and(ternaryValue34);
        boolean boolean40 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean45 = ternaryValue43.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str47 = ternaryValue46.toString();
        boolean boolean49 = ternaryValue46.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue43.and(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue41.or(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList54 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue30, ternaryValue31, ternaryValue52, ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue19.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue0.xor(ternaryValue19);
        boolean boolean58 = ternaryValue0.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "unknown" + "'", str15, "unknown");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "unknown" + "'", str22, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "unknown" + "'", str27, "unknown");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "unknown" + "'", str35, "unknown");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "unknown" + "'", str42, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "unknown" + "'", str47, "unknown");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValueList54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16805");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isAssign();
        boolean boolean10 = node1.isUnscopedQualifiedName();
        node1.putBooleanProp(36, true);
        boolean boolean14 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node16.getStaticSourceFile();
        boolean boolean22 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = node16.useSourceInfoFrom(node29);
        boolean boolean37 = node29.isWhile();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node41.isLabel();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = node45.cloneNode();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node48.isNot();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node48.copyInformationFromForTree(node54);
        com.google.javascript.rhino.InputId inputId56 = node48.getInputId();
        com.google.javascript.rhino.Node node57 = node48.getNext();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node59.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node59.isComma();
        boolean boolean65 = node59.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList66 = com.google.common.collect.ImmutableList.of(node29, node41, node46, node48, node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node48.getJsDocBuilderForNode();
        boolean boolean68 = node48.hasOneChild();
        com.google.javascript.rhino.Node node69 = node48.cloneTree();
        boolean boolean70 = node69.isUnscopedQualifiedName();
        boolean boolean71 = node69.isTry();
        node1.addChildToFront(node69);
        boolean boolean73 = node69.isGetProp();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str19, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(inputId56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test16806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16806");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        boolean boolean7 = node4.isVarArgs();
        int int8 = node4.getChildCount();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        boolean boolean14 = node10.isNot();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = node10.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node18 = node4.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoFromForTree(node18);
        boolean boolean20 = node18.isSyntheticBlock();
        boolean boolean22 = node18.getBooleanProp((int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node18.siblings();
        boolean boolean24 = node18.isAdd();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node28.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo32.getParameterNames();
        boolean boolean34 = jSDocInfo32.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo32.getThrownTypes();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isTypeOf();
        boolean boolean49 = node44.isDelProp();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        com.google.javascript.rhino.Node node55 = node53.getParent();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node53.setJSType(jSType56);
        java.lang.String str58 = node53.toString();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node60.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node60.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node60.isComma();
        node60.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList68 = com.google.common.collect.ImmutableList.of(node37, node44, node53, node60);
        boolean boolean69 = node60.isComma();
        boolean boolean70 = node60.isCase();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int76 = node75.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node78.addChildrenToFront(node80);
        com.google.javascript.rhino.Node node82 = node80.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str84 = jSDocInfo83.getFileOverview();
        java.lang.String str85 = jSDocInfo83.getFileOverview();
        boolean boolean86 = jSDocInfo83.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList87 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo32, (java.lang.Object) node60, (java.lang.Object) node75, (java.lang.Object) node80, (java.lang.Object) jSDocInfo83);
        node28.addChildrenToBack(node75);
        int int90 = node28.getIntProp(45);
        com.google.javascript.rhino.Node node91 = node28.removeChildren();
        boolean boolean92 = node91.isQualifiedName();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(47, node18, node91);
        boolean boolean94 = node93.isFunction();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR" + "'", str58, "OR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test16807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16807");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        jSDocInfo0.setAssociatedNode(node5);
        java.lang.String str27 = jSDocInfo0.getFileOverview();
        boolean boolean28 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        boolean boolean35 = node31.isNot();
        boolean boolean36 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        com.google.javascript.rhino.Node node41 = node31.copyInformationFromForTree(node38);
        boolean boolean42 = node41.isAssignAdd();
        boolean boolean43 = node41.hasOneChild();
        node41.setIsSyntheticBlock(true);
        boolean boolean46 = strSet29.equals((java.lang.Object) node41);
        boolean boolean47 = node41.wasEmptyNode();
        java.lang.Object obj49 = node41.getProp(213092);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder50 = node41.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder50.append("NUMBER -1.0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test16808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16808");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        java.lang.String str7 = node4.toString();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node4.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node12.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] { node12 };
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node20 };
        com.google.javascript.rhino.Node[][] nodeArray27 = new com.google.javascript.rhino.Node[][] { nodeArray10, nodeArray18, nodeArray26 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = nodeArrayBuilder2.add(nodeArray27);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder29 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder31 = nodeArrayBuilder29.add(nodeArray30);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder32 = nodeArrayBuilder28.add(nodeArray30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, nodeArray30);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(40, nodeArray30);
        node34.setLineno(54);
        int int37 = node34.getSourcePosition();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = node39.copyInformationFromForTree(node45);
        com.google.javascript.rhino.InputId inputId47 = node39.getInputId();
        com.google.javascript.rhino.Node node48 = node39.getNext();
        com.google.javascript.rhino.Node node49 = node39.cloneTree();
        boolean boolean50 = node49.isContinue();
        boolean boolean51 = node34.isEquivalentToTyped(node49);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str7, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str15, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArrayBuilder28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArrayBuilder31);
        org.junit.Assert.assertNotNull(nodeArrayBuilder32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 221184 + "'", int37 == 221184);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16809");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.isWith();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean22 = strList14.containsAll((java.util.Collection<java.lang.String>) strList21);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor23 = strList21.iterator();
        boolean boolean24 = strList21.isEmpty();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        int int30 = node26.getCharno();
        boolean boolean31 = strList21.equals((java.lang.Object) node26);
        java.util.Iterator<java.lang.String> strItor32 = strList21.iterator();
        node1.putProp((int) '4', (java.lang.Object) strItor32);
        boolean boolean34 = node1.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16810");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 213028);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test16811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16811");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isAdd();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node17.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFrom(node22);
        boolean boolean30 = node22.isWhile();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = node41.copyInformationFromForTree(node47);
        com.google.javascript.rhino.InputId inputId49 = node41.getInputId();
        com.google.javascript.rhino.Node node50 = node41.getNext();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList59 = com.google.common.collect.ImmutableList.of(node22, node34, node39, node41, node52);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node41.getJsDocBuilderForNode();
        boolean boolean61 = node41.hasOneChild();
        com.google.javascript.rhino.Node node62 = node2.copyInformationFrom(node41);
        boolean boolean64 = node2.getBooleanProp(50);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        boolean boolean72 = node70.isNoSideEffectsCall();
        java.lang.String str76 = node70.toString(false, false, false);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean81 = node80.isBreak();
        boolean boolean82 = node80.isCase();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, node2, node70, node80);
        com.google.javascript.rhino.Node node84 = node70.removeFirstChild();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test16812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16812");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        int int24 = node21.getIntProp((int) (short) 0);
        node21.putIntProp((int) (short) 100, 24613);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.hasBaseType();
        jSDocInfo28.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getTypedefType();
        boolean boolean33 = jSDocInfo28.isNoSideEffects();
        boolean boolean35 = jSDocInfo28.hasDescriptionForParameter("JSDocInfo");
        jSDocInfo28.setLicense("Unknown class name");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        boolean boolean43 = node39.isNot();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = node39.copyInformationFromForTree(node45);
        boolean boolean47 = node39.isNew();
        boolean boolean48 = node39.isLabel();
        jSDocInfo28.setAssociatedNode(node39);
        boolean boolean50 = node39.isFalse();
        com.google.javascript.rhino.Node node51 = node21.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean52 = node39.isHook();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16813");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getParameterNames();
        java.lang.String str29 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getFileOverview();
        java.lang.String str33 = jSDocInfo31.getFileOverview();
        boolean boolean34 = jSDocInfo31.isConstant();
        jSDocInfo31.setDeprecated(true);
        boolean boolean37 = jSDocInfo31.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo31.getTemplateTypeNames();
        java.lang.String str39 = jSDocInfo31.getFileOverview();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo31.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = strList30.retainAll((java.util.Collection<java.lang.String>) strSet40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test16814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16814");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = strSet5.isEmpty();
        int int7 = strSet5.size();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test16815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16815");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str13 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean16 = ternaryValue14.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str18 = ternaryValue17.toString();
        boolean boolean20 = ternaryValue17.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue14.and(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue9.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue24.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str27 = ternaryValue26.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean30 = ternaryValue28.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str32 = ternaryValue31.toString();
        boolean boolean34 = ternaryValue31.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue28.and(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue35.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue26.or(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str39 = ternaryValue38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean42 = ternaryValue40.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str44 = ternaryValue43.toString();
        boolean boolean46 = ternaryValue43.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue40.and(ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue47.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue38.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue35.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue51.xor(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue38.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue55.xor(ternaryValue56);
        boolean boolean59 = ternaryValue55.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue55.not();
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean75 = strList67.containsAll((java.util.Collection<java.lang.String>) strList74);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strList67.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = strList67.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor78 = strList67.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean81 = ternaryValue79.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean84 = ternaryValue82.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str86 = ternaryValue85.toString();
        boolean boolean88 = ternaryValue85.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = ternaryValue82.and(ternaryValue85);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = ternaryValue79.and(ternaryValue85);
        int int91 = strList67.indexOf((java.lang.Object) ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = ternaryValue90.xor(ternaryValue92);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = ternaryValue90.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue95 = ternaryValue55.and(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue96 = ternaryValue53.or(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue97 = ternaryValue24.or(ternaryValue96);
        java.lang.String str98 = ternaryValue96.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "unknown" + "'", str13, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "unknown" + "'", str18, "unknown");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "unknown" + "'", str27, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "unknown" + "'", str32, "unknown");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "unknown" + "'", str39, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "unknown" + "'", str44, "unknown");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "unknown" + "'", str86, "unknown");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValue94);
        org.junit.Assert.assertNotNull(ternaryValue95);
        org.junit.Assert.assertNotNull(ternaryValue96);
        org.junit.Assert.assertNotNull(ternaryValue97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "true" + "'", str98, "true");
    }

    @Test
    public void test16816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16816");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        node7.putIntProp((int) (short) 0, 38);
        node3.addChildToBack(node7);
        boolean boolean15 = node7.isNE();
        boolean boolean16 = node7.isIf();
        com.google.javascript.rhino.Node node18 = node7.getChildAtIndex(0);
        boolean boolean19 = node7.isGetElem();
        com.google.javascript.rhino.Node node21 = node7.getAncestor((int) (byte) 1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test16817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16817");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isSetterDef();
        com.google.javascript.rhino.Node node13 = node11.getLastChild();
        boolean boolean14 = node11.isLocalResultCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node11.children();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test16818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16818");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isAdd();
        boolean boolean8 = node1.isQuotedString();
        int int10 = node1.getIntProp((int) (byte) 1);
        boolean boolean11 = node1.isVarArgs();
        node1.setVarArgs(true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor15 = ancestorIterable14.iterator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable14);
        org.junit.Assert.assertNotNull(nodeItor15);
    }

    @Test
    public void test16819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16819");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        com.google.javascript.rhino.Node node14 = node12.getParent();
        node12.setIsSyntheticBlock(true);
        boolean boolean17 = node12.isContinue();
        java.lang.String str18 = node12.getQualifiedName();
        boolean boolean19 = node12.isSetterDef();
        typePosition3.setItem(node12);
        boolean boolean21 = typePosition3.hasBrackets();
        typePosition3.setPositionInformation(8, 16, 50, (int) (byte) -1);
        boolean boolean27 = typePosition3.hasBrackets();
        int int28 = typePosition3.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
    }

    @Test
    public void test16820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16820");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        node3.setWasEmptyNode(false);
        boolean boolean16 = node3.isRegExp();
        com.google.javascript.rhino.Node node17 = node3.getParent();
        boolean boolean18 = node17.isExprResult();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16821");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasBaseType();
        jSDocInfo4.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getTypedefType();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo4.getReturnType();
        boolean boolean11 = jSDocInfo4.isJavaDispatch();
        boolean boolean12 = jSDocInfo4.isNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str14 = jSDocInfo13.getFileOverview();
        java.lang.String str15 = jSDocInfo13.getFileOverview();
        boolean boolean16 = jSDocInfo13.isConstant();
        jSDocInfo13.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasBaseType();
        jSDocInfo19.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getTypedefType();
        boolean boolean24 = jSDocInfo19.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        boolean boolean26 = jSDocInfo19.isJavaDispatch();
        boolean boolean27 = jSDocInfo19.isDeprecated();
        boolean boolean28 = jSDocInfo19.isDeprecated();
        boolean boolean29 = jSDocInfo19.isInterface();
        boolean boolean30 = jSDocInfo19.isNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.hasTypedefType();
        java.lang.String str33 = jSDocInfo31.toString();
        boolean boolean35 = jSDocInfo31.hasParameterType("Unknown class name");
        boolean boolean36 = jSDocInfo31.isIdGenerator();
        java.lang.String str37 = jSDocInfo31.getReturnDescription();
        java.lang.String str38 = jSDocInfo31.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo31.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.hasBaseType();
        java.lang.String str42 = jSDocInfo40.getFileOverview();
        int int43 = jSDocInfo40.getParameterCount();
        int int44 = jSDocInfo40.getParameterCount();
        java.lang.String str45 = jSDocInfo40.getDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasBaseType();
        jSDocInfo46.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo46.getTypedefType();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        boolean boolean52 = jSDocInfo46.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getThisType();
        boolean boolean54 = jSDocInfo46.isNoAlias();
        java.util.Collection<java.lang.String> strCollection55 = jSDocInfo46.getReferences();
        java.lang.String str56 = jSDocInfo46.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList57 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo13, jSDocInfo19, jSDocInfo31, jSDocInfo40, jSDocInfo46);
        boolean boolean58 = jSDocInfo4.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strCollection55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JSDocInfo" + "'", str56, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSDocInfoList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16822");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("NUMBER 1.0 37\n");
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16823");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition10 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition11 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(nodeSourcePosition10);
        org.junit.Assert.assertNull(nodeSourcePosition11);
    }

    @Test
    public void test16824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16824");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 213092, (int) (byte) -1);
        com.google.javascript.rhino.Node node4 = node3.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = node4.isNot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test16825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16825");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.isOverride();
        java.lang.String str9 = jSDocInfo0.getDescription();
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean11 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16826");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeExpression8.evaluate(jSTypeStaticScope9, jSTypeRegistry10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
    }

    @Test
    public void test16827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16827");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "JSDocInfo", "JSDocInfo", "Unknown class name", "unknown", "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]", "false", "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        int int14 = node10.getCharno();
        boolean boolean15 = node10.isName();
        boolean boolean16 = node10.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node10, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression18);
        com.google.javascript.rhino.Node node20 = jSTypeExpression19.getRoot();
        int int21 = strList8.indexOf((java.lang.Object) node20);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strList8.spliterator();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = node24.cloneNode();
        boolean boolean27 = node24.getBooleanProp(4095);
        java.lang.String str28 = node24.toStringTree();
        node24.setType(42);
        boolean boolean31 = node24.isName();
        boolean boolean32 = strList8.equals((java.lang.Object) boolean31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = strList8.remove(52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR\n" + "'", str28, "OR\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16828");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "((OR))", (int) (byte) 1, 10);
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList11.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.lang.String[] strArray22 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isTypeOf();
        boolean boolean31 = node26.wasEmptyNode();
        int int32 = strList23.indexOf((java.lang.Object) boolean31);
        int int33 = strList18.indexOf((java.lang.Object) boolean31);
        boolean boolean34 = strList18.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        boolean boolean41 = node37.isTypeOf();
        boolean boolean42 = node37.isDelProp();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        int int48 = node44.getCharno();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node37, node44 };
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray49);
        int int51 = strList18.indexOf((java.lang.Object) node50);
        java.lang.String str52 = node50.toString();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node58 = node56.getParent();
        node56.setIsSyntheticBlock(true);
        boolean boolean61 = node56.isContinue();
        java.lang.String str62 = node56.getQualifiedName();
        boolean boolean63 = node56.isSwitch();
        java.util.Set<java.lang.String> strSet64 = node56.getDirectives();
        boolean boolean65 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node50.srcrefTree(node56);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        java.lang.String str71 = node68.toString();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node73.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node73.getStaticSourceFile();
        com.google.javascript.rhino.Node node79 = node68.copyInformationFromForTree(node73);
        node73.setOptionalArg(false);
        boolean boolean82 = node73.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("OR 0\n    OR\n");
        boolean boolean85 = node84.isLocalResultCall();
        boolean boolean86 = node73.isEquivalentToTyped(node84);
        com.google.javascript.rhino.Node node87 = node66.useSourceInfoFrom(node73);
        com.google.javascript.rhino.Node node88 = node4.clonePropsFrom(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        int int90 = jSDocInfo89.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList91 = jSDocInfo89.getExtendedInterfaces();
        java.lang.String str92 = jSDocInfo89.getOriginalCommentString();
        java.lang.String str93 = jSDocInfo89.getMeaning();
        java.lang.String str94 = jSDocInfo89.getLicense();
        node88.setJSDocInfo(jSDocInfo89);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BITXOR 0" + "'", str52, "BITXOR 0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str71, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test16829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16829");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray9 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean19 = strList10.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList10.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strList23.retainAll((java.util.Collection<java.lang.String>) strList28);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean45 = strList37.containsAll((java.util.Collection<java.lang.String>) strList44);
        java.lang.String[] strArray47 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = strList52.retainAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList70 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList6, (java.util.List<java.lang.String>) strList10, (java.util.List<java.lang.String>) strList28, (java.util.List<java.lang.String>) strList37, (java.util.List<java.lang.String>) strList48, (java.util.List<java.lang.String>) strList52, (java.util.List<java.lang.String>) strList62);
        boolean boolean71 = strList37.isEmpty();
        java.lang.Object[] objArray72 = strList37.toArray();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        boolean boolean78 = node74.isTypeOf();
        boolean boolean79 = node74.wasEmptyNode();
        boolean boolean80 = node74.isLabelName();
        boolean boolean81 = strList37.equals((java.lang.Object) boolean80);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor82 = strList37.listIterator();
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        boolean boolean92 = strList85.retainAll((java.util.Collection<java.lang.String>) strList90);
        int int93 = strList85.size();
        boolean boolean94 = strList37.equals((java.lang.Object) int93);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags96 = new com.google.javascript.rhino.Node.SideEffectFlags(16);
        boolean boolean97 = strList37.contains((java.lang.Object) 16);
        com.google.common.collect.ImmutableList<java.lang.String> strList98 = strList37.reverse();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strListList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strList98);
    }

    @Test
    public void test16830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16830");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isAdd();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node13 = node9.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node17.addSuppression("");
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node22.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node17.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFrom(node22);
        boolean boolean30 = node22.isWhile();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node34.isLabel();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        boolean boolean45 = node41.isNot();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = node41.copyInformationFromForTree(node47);
        com.google.javascript.rhino.InputId inputId49 = node41.getInputId();
        com.google.javascript.rhino.Node node50 = node41.getNext();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node52.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList59 = com.google.common.collect.ImmutableList.of(node22, node34, node39, node41, node52);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node41.getJsDocBuilderForNode();
        boolean boolean61 = node41.hasOneChild();
        com.google.javascript.rhino.Node node62 = node2.copyInformationFrom(node41);
        boolean boolean64 = node2.getBooleanProp(50);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        boolean boolean72 = node70.isNoSideEffectsCall();
        java.lang.String str76 = node70.toString(false, false, false);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, 52, 36);
        boolean boolean81 = node80.isBreak();
        boolean boolean82 = node80.isCase();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, node2, node70, node80);
        boolean boolean84 = node70.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str20, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test16831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16831");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test16832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16833");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR [jsdoc_info: JSDocInfo]", 4, (int) (byte) 10);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isGetProp();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isTypeOf();
        boolean boolean23 = node9.isWhile();
        node9.setOptionalArg(false);
        com.google.javascript.rhino.Node node26 = node3.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        boolean boolean32 = node30.isLabel();
        boolean boolean33 = node30.isContinue();
        com.google.javascript.rhino.Node node34 = node30.removeFirstChild();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        int int40 = node36.getCharno();
        com.google.javascript.rhino.Node node41 = node30.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node43.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node47 = node45.getParent();
        node45.setIsSyntheticBlock(true);
        boolean boolean50 = node45.isContinue();
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isSwitch();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isTypeOf();
        boolean boolean59 = node54.wasEmptyNode();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        node61.addChildrenToFront(node63);
        boolean boolean65 = node61.isTypeOf();
        boolean boolean66 = node61.isDelProp();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        com.google.javascript.rhino.Node node72 = node70.getParent();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node70.setJSType(jSType73);
        java.lang.String str75 = node70.toString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100);
        node77.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node77.setStaticSourceFile(staticSourceFile80);
        boolean boolean82 = node77.isComma();
        node77.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList85 = com.google.common.collect.ImmutableList.of(node54, node61, node70, node77);
        boolean boolean86 = node45.hasChild(node54);
        com.google.javascript.rhino.Node node87 = node36.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.jstype.JSType jSType88 = null;
        node54.setJSType(jSType88);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString("OR");
        node91.addSuppression("NUMBER 4.0 1\n");
        node54.addChildrenToFront(node91);
        com.google.javascript.rhino.Node node95 = node54.cloneTree();
        java.lang.String str96 = node9.checkTreeEquals(node95);
        boolean boolean97 = node95.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR" + "'", str75, "OR");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    STRING OR [jsdoc_info: JSDocInfo]\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    STRING OR [jsdoc_info: JSDocInfo]\n    OR\n" + "'", str96, "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    STRING OR [jsdoc_info: JSDocInfo]\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    STRING OR [jsdoc_info: JSDocInfo]\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test16834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16834");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING OR [jsdoc_info: JSDocInfo] 4\n\n\nTree2:\nBITXOR 0\n    OR\n        OR\n    OR\n        OR\n\n\nSubtree1: STRING OR [jsdoc_info: JSDocInfo] 4\n\n\nSubtree2: BITXOR 0\n    OR\n        OR\n    OR\n        OR\n", 47, 13);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test16835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16835");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setLineno(37);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node25.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node19.srcref(node25);
        int int34 = strList13.indexOf((java.lang.Object) node33);
        boolean boolean35 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo36.getParameterNames();
        java.util.Collection<java.lang.String> strCollection38 = jSDocInfo36.getReferences();
        boolean boolean39 = jSDocInfo36.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo36.getParameterType("NUMBER 1.0 37\n");
        java.util.Set<java.lang.String> strSet42 = jSDocInfo36.getParameterNames();
        boolean boolean43 = strList13.containsAll((java.util.Collection<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean58 = strList50.containsAll((java.util.Collection<java.lang.String>) strList57);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor59 = strList57.iterator();
        boolean boolean60 = strList57.isEmpty();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        int int66 = node62.getCharno();
        boolean boolean67 = strList57.equals((java.lang.Object) node62);
        java.util.Iterator<java.lang.String> strItor68 = strList57.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags69 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int70 = sideEffectFlags69.valueOf();
        sideEffectFlags69.clearSideEffectFlags();
        sideEffectFlags69.setThrows();
        sideEffectFlags69.setMutatesThis();
        boolean boolean74 = strList57.contains((java.lang.Object) sideEffectFlags69);
        boolean boolean75 = strList13.containsAll((java.util.Collection<java.lang.String>) strList57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        int int77 = jSDocInfo76.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo76.getExtendedInterfaces();
        java.lang.String str79 = jSDocInfo76.getOriginalCommentString();
        java.lang.String str80 = jSDocInfo76.getMeaning();
        int int81 = jSDocInfo76.getImplementedInterfaceCount();
        java.lang.String str82 = jSDocInfo76.getBlockDescription();
        java.lang.String str83 = jSDocInfo76.getFileOverview();
        boolean boolean84 = jSDocInfo76.hasType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo76.getParameterNames();
        int int86 = strList57.indexOf((java.lang.Object) jSDocInfo76);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(strCollection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test16836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16836");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker3.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList6 = com.google.common.collect.ImmutableList.of(marker0, marker3);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker0.getType();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNotNull(markerList6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(typePosition10);
        org.junit.Assert.assertNull(typePosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition13);
        org.junit.Assert.assertNull(typePosition14);
    }

    @Test
    public void test16837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16837");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.InputId inputId17 = node9.getInputId();
        boolean boolean18 = node9.isIn();
        boolean boolean19 = node1.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node21.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node21.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node21.isComma();
        node21.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.InputId inputId35 = null;
        node30.setInputId(inputId35);
        boolean boolean37 = node30.isName();
        java.lang.String str38 = node21.checkTreeEquals(node30);
        boolean boolean39 = node30.isStringKey();
        boolean boolean40 = node30.isLocalResultCall();
        boolean boolean41 = node30.isParamList();
        java.lang.String str42 = node1.checkTreeEquals(node30);
        boolean boolean43 = node1.isFalse();
        boolean boolean44 = node1.isFunction();
        boolean boolean45 = node1.isGetterDef();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        node53.putIntProp((int) (short) 0, 38);
        node49.addChildToBack(node53);
        boolean boolean61 = node53.isNE();
        boolean boolean62 = node53.isFalse();
        boolean boolean63 = node53.isSwitch();
        com.google.javascript.rhino.Node node64 = node53.getLastChild();
        com.google.javascript.rhino.Node node65 = node1.copyInformationFrom(node64);
        boolean boolean66 = node64.isThis();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str38, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str42, "Node tree inequality:\nTree1:\nOR [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16838");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16839");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node16.isLabel();
        boolean boolean19 = node16.isContinue();
        com.google.javascript.rhino.Node node20 = node16.removeFirstChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        com.google.javascript.rhino.Node node27 = node16.useSourceInfoIfMissingFrom(node22);
        boolean boolean28 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.InputId inputId29 = null;
        node22.setInputId(inputId29);
        boolean boolean31 = node22.isReturn();
        com.google.javascript.rhino.Node node33 = node22.getAncestor(6);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test16840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16840");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        node6.addSuppression("Unknown class name");
        boolean boolean53 = node6.isUnscopedQualifiedName();
        boolean boolean54 = node6.isQuotedString();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(48, "Unknown class name", (-1), 42);
        boolean boolean60 = node59.isQuotedString();
        boolean boolean61 = node59.isObjectLit();
        boolean boolean62 = node6.hasChild(node59);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16841");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.InputId inputId9 = node1.getInputId();
        com.google.javascript.rhino.Node node10 = node1.getNext();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = new com.google.javascript.rhino.JSTypeExpression(node1, "");
        boolean boolean13 = node1.isDo();
        com.google.javascript.rhino.Node node15 = node1.getAncestor(48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node1.siblings();
        node1.setType(46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(nodeIterable16);
    }

    @Test
    public void test16842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16842");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean32 = strList24.containsAll((java.util.Collection<java.lang.String>) strList31);
        int int33 = strList31.size();
        boolean boolean34 = strSet13.retainAll((java.util.Collection<java.lang.String>) strList31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str36 = jSDocInfo35.getFileOverview();
        java.lang.String str37 = jSDocInfo35.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo35.getThrownTypes();
        boolean boolean39 = jSDocInfo35.isHidden();
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = jSDocInfo35.getTemplateTypeNames();
        boolean boolean41 = strList31.containsAll((java.util.Collection<java.lang.String>) strList40);
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = strList40.asList();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        int int48 = node46.getType();
        com.google.javascript.rhino.InputId inputId49 = node46.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = null;
        node46.setJSDocInfo(jSDocInfo50);
        boolean boolean52 = node46.isDo();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isNot();
        boolean boolean59 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.Node node64 = node54.copyInformationFromForTree(node61);
        java.lang.Object obj66 = node64.getProp(38);
        com.google.javascript.rhino.Node node67 = node46.srcrefTree(node64);
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isThis();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node72.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        node72.setStaticSourceFile(staticSourceFile75);
        boolean boolean77 = node72.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        boolean boolean83 = node79.isNot();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node86 = node79.copyInformationFromForTree(node85);
        boolean boolean87 = node86.isExprResult();
        boolean boolean88 = node86.isDefaultCase();
        node72.addChildrenToBack(node86);
        node72.setSourceEncodedPositionForTree(42);
        boolean boolean92 = node72.isSetterDef();
        com.google.javascript.rhino.Node node93 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean94 = strList42.contains((java.lang.Object) node72);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList97 = strList42.subList(35, 155648);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (35) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test16843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16843");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100, (int) ' ', 213028);
        boolean boolean4 = node3.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
    }

    @Test
    public void test16844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16844");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.hasParameterType("unknown");
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList10 = com.google.common.collect.ImmutableList.of(visibility7, visibility8, visibility9);
        jSDocInfo0.setVisibility(visibility8);
        boolean boolean12 = jSDocInfo0.hasBaseType();
        boolean boolean13 = jSDocInfo0.isExterns();
        java.lang.String str14 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test16845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16845");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        java.lang.Object obj13 = node11.getProp(38);
        node11.setCharno(2);
        boolean boolean16 = node11.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node17 = node11.removeFirstChild();
        boolean boolean18 = node17.isNull();
        node17.setSourceFileForTesting("((Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n))");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16846");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isWith();
        boolean boolean7 = node1.isLabelName();
        boolean boolean8 = node1.isCatch();
        boolean boolean9 = node1.isQuotedString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16847");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        boolean boolean7 = node1.isLabelName();
        node1.removeProp(49);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node11.addChildrenToFront(node13);
        boolean boolean15 = node11.isNot();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = node11.copyInformationFromForTree(node17);
        com.google.javascript.rhino.InputId inputId19 = node11.getInputId();
        boolean boolean20 = node11.isIn();
        boolean boolean21 = node11.isContinue();
        com.google.javascript.rhino.Node node22 = node1.copyInformationFromForTree(node11);
        int int23 = node22.getSideEffectFlags();
        com.google.javascript.rhino.Node node24 = node22.getLastChild();
        boolean boolean25 = node22.isWith();
        com.google.javascript.rhino.Node node26 = node22.cloneNode();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test16848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16848");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, 0, 31);
        boolean boolean5 = node3.getBooleanProp(40999);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16849");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        boolean boolean62 = node58.isTypeOf();
        boolean boolean63 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        node64.setStaticSourceFile(staticSourceFile66);
        boolean boolean68 = node64.isQuotedString();
        boolean boolean69 = node64.isLabel();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test16850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16850");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        int int3 = namePosition0.getPositionOnEndLine();
        int int4 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList7 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6);
        int int8 = namePosition5.getPositionOnEndLine();
        int int9 = namePosition5.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition10, namePosition11);
        namePosition10.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList20 = com.google.common.collect.ImmutableList.of(namePosition18, namePosition19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList23 = com.google.common.collect.ImmutableList.of(namePosition21, namePosition22);
        int int24 = namePosition21.getPositionOnEndLine();
        int int25 = namePosition21.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList28 = com.google.common.collect.ImmutableList.of(namePosition26, namePosition27);
        int int29 = namePosition26.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList32 = com.google.common.collect.ImmutableList.of(namePosition30, namePosition31);
        int int33 = namePosition30.getPositionOnEndLine();
        int int34 = namePosition30.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition35 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition36 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList37 = com.google.common.collect.ImmutableList.of(namePosition35, namePosition36);
        namePosition35.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList45 = com.google.common.collect.ImmutableList.of(namePosition43, namePosition44);
        int int46 = namePosition43.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList49 = com.google.common.collect.ImmutableList.of(namePosition47, namePosition48);
        namePosition47.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition55 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition56 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList57 = com.google.common.collect.ImmutableList.of(namePosition55, namePosition56);
        namePosition55.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList63 = com.google.common.collect.ImmutableList.of(namePosition10, namePosition19, namePosition21, namePosition26, namePosition30, namePosition35, namePosition43, namePosition47, namePosition55);
        namePosition35.setPositionInformation((int) (byte) 0, (int) (byte) -1, 0, 51);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition5, namePosition35);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList20);
        org.junit.Assert.assertNotNull(namePositionList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(namePositionList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(namePositionList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(namePositionList37);
        org.junit.Assert.assertNotNull(namePositionList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(namePositionList49);
        org.junit.Assert.assertNotNull(namePositionList57);
        org.junit.Assert.assertNotNull(namePositionList63);
        org.junit.Assert.assertNotNull(namePositionList69);
    }

    @Test
    public void test16851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16851");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker1.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker4.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker7.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker7.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker10.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker19.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList23 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker4, marker7, marker10, marker13, marker16, marker19);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker1.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition25 = marker1.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNotNull(markerList23);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(nodeSourcePosition25);
    }

    @Test
    public void test16852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16852");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        int int25 = node23.getType();
        com.google.javascript.rhino.InputId inputId26 = node23.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = null;
        node23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node node29 = node10.srcref(node23);
        boolean boolean30 = node23.isTry();
        boolean boolean31 = node23.isIn();
        node23.setSourceFileForTesting("NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = node7.removeChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node7);
        jSDocInfo0.setAssociatedNode(node7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.wasEmptyNode();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isTypeOf();
        boolean boolean32 = node27.isDelProp();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node36.setJSType(jSType39);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        node43.setStaticSourceFile(staticSourceFile46);
        boolean boolean48 = node43.isComma();
        node43.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node20, node27, node36, node43);
        com.google.javascript.rhino.Node node52 = node18.copyInformationFrom(node43);
        java.util.Set<java.lang.String> strSet53 = node52.getDirectives();
        jSDocInfo0.setAssociatedNode(node52);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node52.getAncestors();
        boolean boolean56 = node52.isVoid();
        com.google.javascript.rhino.Node node57 = node52.cloneTree();
        boolean boolean58 = node57.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = node49.hasOneChild();
        boolean boolean58 = node49.isIn();
        boolean boolean59 = node49.isDo();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16855");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        boolean boolean30 = strList13.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getFileOverview();
        java.lang.String str33 = jSDocInfo31.getFileOverview();
        boolean boolean34 = jSDocInfo31.isConstant();
        jSDocInfo31.setDeprecated(true);
        boolean boolean37 = jSDocInfo31.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo31.getTemplateTypeNames();
        boolean boolean40 = jSDocInfo31.hasParameterType("OR");
        java.util.Set<java.lang.String> strSet41 = jSDocInfo31.getParameterNames();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo31.getSuppressions();
        boolean boolean43 = strList13.equals((java.lang.Object) strSet42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        boolean boolean49 = node45.isTypeOf();
        boolean boolean50 = node45.wasEmptyNode();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        node52.addChildrenToFront(node54);
        boolean boolean56 = node52.isTypeOf();
        boolean boolean57 = node52.isDelProp();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node59.addChildrenToFront(node61);
        com.google.javascript.rhino.Node node63 = node61.getParent();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node61.setJSType(jSType64);
        java.lang.String str66 = node61.toString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node68.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node68.isComma();
        node68.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList76 = com.google.common.collect.ImmutableList.of(node45, node52, node61, node68);
        boolean boolean77 = node61.wasEmptyNode();
        boolean boolean78 = strSet42.remove((java.lang.Object) node61);
        boolean boolean79 = strSet42.isEmpty();
        java.lang.Object[] objArray80 = strSet42.toArray();
        int int81 = strSet42.size();
        java.lang.Object[] objArray82 = strSet42.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = strSet42.add("(RETURN ()\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR" + "'", str66, "OR");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
    }

    @Test
    public void test16856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16856");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
    }

    @Test
    public void test16857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16857");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        java.util.Set<java.lang.String> strSet6 = node1.getDirectives();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isFalse();
        boolean boolean13 = node8.isParamList();
        com.google.javascript.rhino.Node node14 = node1.useSourceInfoIfMissingFrom(node8);
        boolean boolean15 = node1.hasOneChild();
        com.google.javascript.rhino.Node node16 = node1.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node1.getStaticSourceFile();
        boolean boolean18 = node1.isSwitch();
        boolean boolean19 = node1.isAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node1.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
    }

    @Test
    public void test16858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16858");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean21 = node20.isRegExp();
        boolean boolean22 = node20.isName();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        boolean boolean31 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node38.addSuppression("");
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node38.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node45 = node25.useSourceInfoFrom(node38);
        boolean boolean46 = node38.isWhile();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        boolean boolean52 = node50.isLabel();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        boolean boolean61 = node57.isNot();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = node57.copyInformationFromForTree(node63);
        com.google.javascript.rhino.InputId inputId65 = node57.getInputId();
        com.google.javascript.rhino.Node node66 = node57.getNext();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node68.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node68.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node68.isComma();
        boolean boolean74 = node68.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList75 = com.google.common.collect.ImmutableList.of(node38, node50, node55, node57, node68);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node57.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.hasBaseType();
        jSDocInfo77.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo77.getBaseType();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo77.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strSet82.spliterator();
        node57.setDirectives(strSet82);
        boolean boolean85 = node57.isNE();
        boolean boolean86 = node57.isAdd();
        java.lang.String str87 = node57.toStringTree();
        boolean boolean88 = node57.isNew();
        boolean boolean89 = node57.isContinue();
        com.google.javascript.rhino.Node node90 = node20.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean91 = node90.isFalse();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str41, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "OR [directives: []]\n    OR\n" + "'", str87, "OR [directives: []]\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test16859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16859");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isIf();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        boolean boolean9 = node8.isParamList();
        com.google.javascript.rhino.Node node10 = node1.useSourceInfoIfMissingFrom(node8);
        com.google.javascript.rhino.Node node12 = node8.getAncestor(53);
        boolean boolean13 = node8.isFromExterns();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
    }

    @Test
    public void test16860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16860");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("");
        int int11 = stringPosition0.getStartLine();
        java.lang.String str12 = stringPosition0.getItem();
        stringPosition0.setItem("[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        stringPosition0.setPositionInformation(8, 50, (int) (byte) 10, 46);
        java.lang.String str20 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(6, 38, 24613, 3);
        int int26 = stringPosition0.getEndLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]" + "'", str20, "[OR 0 [jsdoc_info: JSDocInfo]\n, OR 0 [jsdoc_info: JSDocInfo]\n, ((OR)), false, (OR), Not declared as a type name, (Unknown class name), NUMBER 4.0 1\n, , Named type with empty name component]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 24613 + "'", int26 == 24613);
    }

    @Test
    public void test16861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16861");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean12 = jSTypeExpression9.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean28 = strList19.isEmpty();
        boolean boolean29 = jSTypeExpression9.equals((java.lang.Object) strList19);
        boolean boolean30 = strList19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream31 = strList19.stream();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags33 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags33.setReturnsTainted();
        sideEffectFlags33.setMutatesGlobalState();
        int int36 = sideEffectFlags33.valueOf();
        sideEffectFlags33.setMutatesThis();
        boolean boolean38 = sideEffectFlags33.areAllFlagsSet();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setMutatesThis();
        int int41 = strList19.indexOf((java.lang.Object) sideEffectFlags33);
        sideEffectFlags33.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test16862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("OR [jsdoc_info: JSDocInfo]\n    OR\n        OR\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test16863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16863");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        boolean boolean59 = node55.isTypeOf();
        boolean boolean60 = node55.isOnlyModifiesThisCall();
        boolean boolean61 = node55.isDelProp();
        boolean boolean62 = node55.isNull();
        boolean boolean63 = node55.isSyntheticBlock();
        namePosition9.setItem(node55);
        java.lang.String str68 = node55.toString(false, true, true);
        node55.setVarArgs(true);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "OR" + "'", str68, "OR");
    }

    @Test
    public void test16864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16864");
        java.lang.String[] strArray4 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray9 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray14 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray19 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray4, strArray9, strArray14, strArray19 };
        java.lang.String[] strArray25 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray30 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray35 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray40 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[][] strArray41 = new java.lang.String[][] { strArray25, strArray30, strArray35, strArray40 };
        java.lang.String[][][] strArray42 = new java.lang.String[][][] { strArray20, strArray41 };
        java.lang.String[] strArray47 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray52 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray57 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray62 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[][] strArray63 = new java.lang.String[][] { strArray47, strArray52, strArray57, strArray62 };
        java.lang.String[] strArray68 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray73 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray78 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[] strArray83 = new java.lang.String[] { "(Node tree inequality:\nTree1:\nOR\n\n\nTree2:\nEQUALS\n    OR\n        OR\n\n\nSubtree1: OR\n\n\nSubtree2: EQUALS\n    OR\n        OR\n)", "(Named type with empty name component)", "(Node tree inequality:\nTree1:\nOR 0 [synthetic: 1]\n\n\nTree2:\nOR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR 0 [synthetic: 1]\n\n\nSubtree2: OR 0 [jsdoc_info: JSDocInfo]\n    OR 0 [jsdoc_info: JSDocInfo]\n)", "(Node tree inequality:\nTree1:\nSTRING  3\n\n\nTree2:\nSTRING OR\n\n\nSubtree1: STRING  3\n\n\nSubtree2: STRING OR\n)" };
        java.lang.String[][] strArray84 = new java.lang.String[][] { strArray68, strArray73, strArray78, strArray83 };
        java.lang.String[][][] strArray85 = new java.lang.String[][][] { strArray63, strArray84 };
        java.lang.String[][][][] strArray86 = new java.lang.String[][][][] { strArray42, strArray85 };
        com.google.common.collect.ImmutableList<java.lang.String[][][]> strArrayList87 = com.google.common.collect.ImmutableList.of(strArray86);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArrayList87);
    }

    @Test
    public void test16865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16865");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        int int18 = node14.getCharno();
        boolean boolean19 = node14.isName();
        boolean boolean20 = node14.isNE();
        boolean boolean21 = node14.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.hasChildren();
        com.google.javascript.rhino.Node node28 = node14.srcrefTree(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.children();
        boolean boolean30 = strSet7.remove((java.lang.Object) node23);
        boolean boolean31 = strSet7.isEmpty();
        java.util.Iterator<java.lang.String> strItor32 = strSet7.iterator();
        int int33 = strSet7.size();
        int int34 = strSet7.size();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test16866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16866");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setLineno(37);
        node3.addSuppression("hi!");
        boolean boolean10 = node3.isFor();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16867");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = strList2.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList11 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.String>) strList10);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList3.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.lang.Object[] objArray14 = strList3.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = strList3.add("(Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(charSequenceList11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test16868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16868");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isNE();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        com.google.javascript.rhino.Node node22 = node20.getParent();
        boolean boolean23 = node22.isDefaultCase();
        int int24 = node9.getIndexOfChild(node22);
        boolean boolean25 = node22.isLabelName();
        boolean boolean26 = node1.isEquivalentTo(node22);
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(36, 52, (int) '4');
        boolean boolean32 = node31.isName();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFrom(node31);
        boolean boolean36 = node22.isDefaultCase();
        boolean boolean37 = node22.isBreak();
        boolean boolean38 = node22.isAssign();
        boolean boolean39 = node22.isExprResult();
        boolean boolean40 = node22.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node22.getJsDocBuilderForNode();
        boolean boolean42 = node22.isTry();
        node22.removeProp(6);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test16869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16869");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test16870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16870");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isNot();
        boolean boolean11 = node6.isIf();
        com.google.javascript.rhino.Node node12 = node3.copyInformationFromForTree(node6);
        boolean boolean13 = node12.isInc();
        boolean boolean14 = node12.isHook();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node12.children();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
    }

    @Test
    public void test16871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16871");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        boolean boolean22 = node18.isTypeOf();
        boolean boolean23 = node18.wasEmptyNode();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isTypeOf();
        boolean boolean30 = node25.isDelProp();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        com.google.javascript.rhino.Node node36 = node34.getParent();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node34.setJSType(jSType37);
        java.lang.String str39 = node34.toString();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node41.setStaticSourceFile(staticSourceFile44);
        boolean boolean46 = node41.isComma();
        node41.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList49 = com.google.common.collect.ImmutableList.of(node18, node25, node34, node41);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node51.addChildrenToFront(node53);
        boolean boolean55 = node53.isLabel();
        boolean boolean56 = node53.isContinue();
        com.google.javascript.rhino.Node node57 = node25.copyInformationFrom(node53);
        node53.setCharno(4095);
        int int60 = strList16.indexOf((java.lang.Object) node53);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strList16.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = strList16.reverse();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor63 = strList16.iterator();
        java.util.ListIterator<java.lang.String> strItor64 = strList16.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = strList16.remove(49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR" + "'", str39, "OR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test16872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16872");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        node21.detachChildren();
        boolean boolean23 = node21.isParamList();
        boolean boolean24 = node21.isBlock();
        boolean boolean25 = node21.isDefaultCase();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16873");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isNot();
        boolean boolean7 = node2.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node14.setStaticSourceFile(staticSourceFile17);
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isBlock();
        java.lang.String str21 = node14.toStringTree();
        boolean boolean22 = node14.isDec();
        node14.setWasEmptyNode(false);
        boolean boolean25 = node14.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node27.addSuppression("");
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node27.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node27.getStaticSourceFile();
        boolean boolean33 = node27.isVarArgs();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(40, node12, node14, node27);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        node36.addChildrenToFront(node38);
        boolean boolean40 = node36.isNot();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = node36.copyInformationFromForTree(node42);
        com.google.javascript.rhino.InputId inputId44 = node36.getInputId();
        boolean boolean45 = node36.isFromExterns();
        boolean boolean46 = node14.hasChild(node36);
        java.util.Set<java.lang.String> strSet47 = node36.getDirectives();
        boolean boolean48 = node36.isFunction();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str21, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str30, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(inputId44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test16874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16874");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.hasOneChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(29);
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        boolean boolean24 = node18.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node26.addSuppression("");
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node31.addSuppression("");
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node31.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node26.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node38 = node18.useSourceInfoFrom(node31);
        boolean boolean39 = node31.hasMoreThanOneChild();
        boolean boolean40 = node31.isFunction();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFrom(node31);
        boolean boolean42 = node31.isOptionalArg();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node46.isLabel();
        boolean boolean49 = node46.isRegExp();
        boolean boolean50 = node46.isIf();
        boolean boolean51 = node46.hasOneChild();
        boolean boolean52 = node46.isParamList();
        com.google.javascript.rhino.Node node53 = node46.getLastSibling();
        int int54 = node31.getIndexOfChild(node53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str29, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str34, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test16875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16875");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16876");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        boolean boolean57 = node49.isDec();
        boolean boolean58 = node49.isSetterDef();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16877");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean2 = booleanLiteralSet0.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.intersection(booleanLiteralSet4);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet0.intersection(booleanLiteralSet5);
        boolean boolean10 = booleanLiteralSet0.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean14 = booleanLiteralSet12.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet15.intersection(booleanLiteralSet16);
        boolean boolean19 = booleanLiteralSet15.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet20.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet25.union(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet29.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet25.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet22.union(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean37 = booleanLiteralSet35.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet32.intersection(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet39.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet35.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet15.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet12.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet0.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = booleanLiteralSet48.union(booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean53 = booleanLiteralSet51.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet54.intersection(booleanLiteralSet55);
        boolean boolean58 = booleanLiteralSet56.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet51.intersection(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet60.intersection(booleanLiteralSet61);
        boolean boolean64 = booleanLiteralSet60.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet65.union(booleanLiteralSet67);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet70.union(booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet74.union(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet70.union(booleanLiteralSet74);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet67.union(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean82 = booleanLiteralSet80.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet77.intersection(booleanLiteralSet80);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = booleanLiteralSet84.union(booleanLiteralSet86);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet80.intersection(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = booleanLiteralSet60.intersection(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet90 = booleanLiteralSet51.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet48.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = booleanLiteralSet46.union(booleanLiteralSet48);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet90 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet90.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test16878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16878");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isParamList();
        node3.setSourceEncodedPositionForTree(54);
        int int12 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasBaseType();
        jSDocInfo14.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo14.getTypeNodes();
        node3.setJSDocInfo(jSDocInfo14);
        com.google.javascript.rhino.Node node21 = node3.getLastSibling();
        boolean boolean22 = node21.isThrow();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        node29.setOptionalArg(false);
        node29.setSourceEncodedPositionForTree((int) (short) -1);
        node29.setVarArgs(false);
        int int42 = node29.getCharno();
        boolean boolean43 = node29.isString();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoFromForTree(node29);
        node29.setOptionalArg(false);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node51.setStaticSourceFile(staticSourceFile54);
        boolean boolean56 = node51.isComma();
        node48.addChildrenToBack(node51);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node59.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node59.setStaticSourceFile(staticSourceFile62);
        boolean boolean64 = node59.isComma();
        boolean boolean65 = node59.isBlock();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = node67.cloneNode();
        com.google.javascript.rhino.Node node69 = node59.copyInformationFromForTree(node68);
        node51.addChildToBack(node59);
        java.lang.String str71 = node59.getQualifiedName();
        com.google.javascript.rhino.Node node72 = node29.copyInformationFrom(node59);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(nodeCollection19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test16879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16879");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        typePosition7.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node15.addSuppression("");
        java.lang.String str18 = node15.toString();
        boolean boolean19 = node15.hasChildren();
        typePosition7.setItem(node15);
        int int21 = typePosition7.getPositionOnStartLine();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder23 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node25.addSuppression("");
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node25.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node25 };
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] { node33 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node41.addSuppression("");
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node41.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] { node41 };
        com.google.javascript.rhino.Node[][] nodeArray48 = new com.google.javascript.rhino.Node[][] { nodeArray31, nodeArray39, nodeArray47 };
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder49 = nodeArrayBuilder23.add(nodeArray48);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder50 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder52 = nodeArrayBuilder50.add(nodeArray51);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder53 = nodeArrayBuilder49.add(nodeArray51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(0, nodeArray51);
        boolean boolean55 = node54.isNE();
        typePosition7.setItem(node54);
        int int57 = typePosition7.getEndLine();
        int int58 = typePosition7.getStartLine();
        int int59 = typePosition7.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str18, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str28, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str44, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArrayBuilder49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArrayBuilder52);
        org.junit.Assert.assertNotNull(nodeArrayBuilder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 43 + "'", int57 == 43);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 51 + "'", int59 == 51);
    }

    @Test
    public void test16880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16880");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor9 = strList7.listIterator((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (100) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test16881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16881");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node35 = node21.getLastChild();
        boolean boolean36 = node21.isTry();
        boolean boolean37 = node21.isQuotedString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node21.new FileLevelJsDocBuilder();
        boolean boolean39 = node21.isAnd();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16882");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("OR");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        boolean boolean11 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        boolean boolean13 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = strList5.reverse();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags20.setReturnsTainted();
        sideEffectFlags20.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags24.setMutatesArguments();
        sideEffectFlags24.setMutatesArguments();
        sideEffectFlags24.setMutatesGlobalState();
        sideEffectFlags24.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags29.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray33 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags20, sideEffectFlags24, sideEffectFlags29, sideEffectFlags32 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray34 = strList5.toArray(sideEffectFlagsArray33);
        java.util.ListIterator<java.lang.String> strItor35 = strList5.listIterator();
        java.util.Iterator<java.lang.String> strItor36 = strList5.iterator();
        java.util.stream.Stream<java.lang.String> strStream37 = strList5.stream();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList40 = strList5.subList(50, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (50) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray33);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray34);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strStream37);
    }

    @Test
    public void test16884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16884");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setLineno(37);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node17 = node3.srcref(node9);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        node19.addChildrenToFront(node21);
        com.google.javascript.rhino.Node node23 = node21.getParent();
        boolean boolean24 = node23.isDefaultCase();
        boolean boolean25 = node23.isNoSideEffectsCall();
        java.lang.String str29 = node23.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasTypedefType();
        java.lang.String str32 = jSDocInfo30.toString();
        node23.setJSDocInfo(jSDocInfo30);
        com.google.javascript.rhino.Node node34 = node23.cloneTree();
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node37.addChildrenToFront(node39);
        int int41 = node39.getType();
        com.google.javascript.rhino.InputId inputId42 = node39.getInputId();
        com.google.javascript.rhino.Node node43 = node39.getParent();
        boolean boolean44 = node43.isGetterDef();
        java.lang.String str45 = node34.checkTreeEquals(node43);
        int int46 = node43.getType();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        node43.removeProp(16);
        boolean boolean50 = node43.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node51 = node9.clonePropsFrom(node43);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "OR" + "'", str29, "OR");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test16885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet13.stream();
        boolean boolean20 = strSet13.add("unknown");
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList21 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet13);
        java.util.Iterator<java.lang.String> strItor22 = strSet13.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet13.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strCollectionList21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strSpliterator23);
    }

    @Test
    public void test16886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16886");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder2 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder4 = nodeArrayBuilder2.add(nodeArray3);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) '4');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '4', nodeArray3, 50, 15);
        boolean boolean11 = node10.isVar();
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node10.removeChildAfter(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArrayBuilder4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test16887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16887");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isGetterDef();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isNot();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getParameterNames();
        boolean boolean11 = jSDocInfo9.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo9.getThrownTypes();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        boolean boolean46 = node37.isComma();
        boolean boolean47 = node37.isCase();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int53 = node52.getSideEffectFlags();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        node55.addChildrenToFront(node57);
        com.google.javascript.rhino.Node node59 = node57.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str61 = jSDocInfo60.getFileOverview();
        java.lang.String str62 = jSDocInfo60.getFileOverview();
        boolean boolean63 = jSDocInfo60.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList64 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo9, (java.lang.Object) node37, (java.lang.Object) node52, (java.lang.Object) node57, (java.lang.Object) jSDocInfo60);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        boolean boolean70 = node66.isTypeOf();
        boolean boolean71 = node66.wasEmptyNode();
        com.google.javascript.rhino.Node node72 = node66.removeChildren();
        com.google.javascript.rhino.Node node73 = node37.copyInformationFromForTree(node72);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node72.setStaticSourceFile(staticSourceFile74);
        int int76 = node72.getSourceOffset();
        node72.setWasEmptyNode(false);
        int int79 = node1.getIndexOfChild(node72);
        boolean boolean80 = node1.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test16888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        java.util.stream.Stream<java.lang.String> strStream20 = strList2.stream();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node24.isLabel();
        boolean boolean27 = node24.isContinue();
        com.google.javascript.rhino.Node node28 = node24.removeFirstChild();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        int int34 = node30.getCharno();
        com.google.javascript.rhino.Node node35 = node24.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        node40.setLength(1);
        com.google.javascript.rhino.Node node43 = node24.useSourceInfoFrom(node40);
        node43.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.JSType jSType46 = node43.getJSType();
        int int47 = strList2.lastIndexOf((java.lang.Object) jSType46);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        boolean boolean54 = node53.isDefaultCase();
        boolean boolean55 = node53.isNoSideEffectsCall();
        boolean boolean56 = node53.isTypeOf();
        com.google.javascript.rhino.Node node57 = node53.getLastChild();
        boolean boolean58 = strList2.contains((java.lang.Object) node53);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = node53.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16889");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean6 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.hasReturnType();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str12 = strList11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = strList11.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test16891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16891");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        int int6 = jSDocInfo0.getParameterCount();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test16892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16892");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int19 = strList6.lastIndexOf((java.lang.Object) visibility18);
        java.util.stream.Stream<java.lang.String> strStream20 = strList6.parallelStream();
        java.util.Iterator<java.lang.String> strItor21 = strList6.iterator();
        int int22 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        java.lang.Object[] objArray24 = strList23.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList23.add(2, "((OR 0\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
    }

    @Test
    public void test16893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16893");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test16894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16894");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasParameter("true");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor11 = strSet10.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasBaseType();
        jSDocInfo12.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo12.setLicense("Not declared as a type name");
        boolean boolean18 = jSDocInfo12.shouldPreserveTry();
        jSDocInfo12.addSuppression("NUMBER 1.0 37\n");
        boolean boolean21 = jSDocInfo12.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo12.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo12.getTemplateTypeNames();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node25.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node41 = node39.getAncestor(0);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        int int48 = node46.getType();
        com.google.javascript.rhino.InputId inputId49 = node46.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = null;
        node46.setJSDocInfo(jSDocInfo50);
        boolean boolean52 = node46.isDo();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        boolean boolean58 = node54.isNot();
        boolean boolean59 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(100);
        node61.addSuppression("");
        com.google.javascript.rhino.Node node64 = node54.copyInformationFromForTree(node61);
        java.lang.Object obj66 = node64.getProp(38);
        com.google.javascript.rhino.Node node67 = node46.srcrefTree(node64);
        node41.putProp(6, (java.lang.Object) node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean70 = jSDocInfo69.hasBaseType();
        jSDocInfo69.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo69.getBaseType();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo69.getParameterNames();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(100);
        node76.addChildrenToFront(node78);
        int int80 = node76.getCharno();
        boolean boolean81 = node76.isContinue();
        boolean boolean82 = strSet74.equals((java.lang.Object) node76);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(100);
        node84.addChildrenToFront(node86);
        com.google.javascript.rhino.Node node88 = node86.getParent();
        node86.setIsSyntheticBlock(true);
        boolean boolean91 = node86.isContinue();
        boolean boolean92 = strSet74.equals((java.lang.Object) node86);
        java.lang.Object[] objArray93 = strSet74.toArray();
        java.lang.Object[] objArray94 = strSet74.toArray();
        node46.setDirectives(strSet74);
        java.util.stream.Stream<java.lang.String> strStream96 = strSet74.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator97 = strSet74.spliterator();
        int int98 = strList23.indexOf((java.lang.Object) strSpliterator97);
        boolean boolean99 = strSet10.removeAll((java.util.Collection<java.lang.String>) strList23);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertNotNull(strSpliterator97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test16896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16896");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        int int4 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.lang.String str8 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16897");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList54 = com.google.common.collect.ImmutableList.of(namePosition37);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, 15, 0);
        node58.setWasEmptyNode(true);
        namePosition37.setItem(node58);
        int int62 = namePosition37.getEndLine();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertNotNull(namePositionList54);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
    }

    @Test
    public void test16898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16898");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 39, (int) '4');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node5.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node9 = node7.getParent();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node7.children();
        int int13 = node7.getLineno();
        boolean boolean14 = node7.isWith();
        int int15 = node7.getSourceOffset();
        java.lang.String str16 = node3.checkTreeEquals(node7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node18.setStaticSourceFile(staticSourceFile21);
        boolean boolean23 = node18.isComma();
        node18.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.children();
        com.google.javascript.rhino.InputId inputId32 = null;
        node27.setInputId(inputId32);
        boolean boolean34 = node27.isName();
        java.lang.String str35 = node18.checkTreeEquals(node27);
        com.google.javascript.rhino.InputId inputId36 = node18.getInputId();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int43 = node42.getSideEffectFlags();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node50.addSuppression("");
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node50.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node45.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(30, node42, node45, (int) '4', (int) (byte) 100);
        boolean boolean60 = node18.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node61 = node7.useSourceInfoFrom(node18);
        boolean boolean62 = node18.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n" + "'", str16, "Node tree inequality:\nTree1:\nSTRING  39\n\n\nTree2:\nOR\n\n\nSubtree1: STRING  39\n\n\nSubtree2: OR\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str35, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str53, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16899");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("NUMBER 4.0 1\n");
        stringPosition0.setPositionInformation(0, 0, (int) (short) 0, 4);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR [directives: []]\n    OR\n");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setItem("NUMBER 4.0 1\n");
        stringPosition12.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition12.setPositionInformation((int) '#', 44, 51, 50);
        int int25 = stringPosition12.getEndLine();
        stringPosition12.setItem("Unknown class name");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition28.setItem("NUMBER 4.0 1\n");
        stringPosition28.setPositionInformation(0, 0, (int) (short) 0, 4);
        stringPosition28.setPositionInformation((int) '#', 44, 51, 50);
        int int41 = stringPosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition42.setItem("NUMBER 4.0 1\n");
        stringPosition42.setPositionInformation(0, 0, (int) (short) 0, 4);
        int int50 = stringPosition42.getEndLine();
        int int51 = stringPosition42.getPositionOnStartLine();
        stringPosition42.setPositionInformation((int) ' ', 49, 51, 38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int58 = stringPosition57.getEndLine();
        int int59 = stringPosition57.getEndLine();
        stringPosition57.setItem("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition62 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition62.setItem("NUMBER 4.0 1\n");
        stringPosition62.setItem("unknown");
        stringPosition62.setItem("(OR)");
        stringPosition62.setItem("OR \n");
        int int71 = stringPosition62.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int73 = stringPosition72.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition12, stringPosition28, stringPosition42, stringPosition57, stringPosition62, stringPosition72);
        stringPosition12.setPositionInformation((int) (byte) 10, 52, 35, 0);
        stringPosition12.setPositionInformation((int) (byte) 1, 51, 15, (int) 'a');
        java.lang.String str85 = stringPosition12.getItem();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4.0 1\n" + "'", str8, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 51 + "'", int25 == 51);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Unknown class name" + "'", str85, "Unknown class name");
    }

    @Test
    public void test16900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16900");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test16901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16901");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        int int24 = node20.getChildCount();
        boolean boolean25 = node20.isGetProp();
        boolean boolean26 = node1.isEquivalentTo(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasTypedefType();
        java.lang.String str29 = jSDocInfo27.toString();
        boolean boolean31 = jSDocInfo27.hasParameterType("Unknown class name");
        boolean boolean32 = jSDocInfo27.isIdGenerator();
        node1.setJSDocInfo(jSDocInfo27);
        java.lang.String str34 = jSDocInfo27.getOriginalCommentString();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo27.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo27.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo27.getSuppressions();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test16902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16902");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 53);
        boolean boolean2 = node1.isTypeOf();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node4.addSuppression("");
        java.lang.String str7 = node4.toString();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node4.getStaticSourceFile();
        boolean boolean10 = node4.isLocalResultCall();
        boolean boolean11 = node4.isArrayLit();
        boolean boolean12 = node4.isAssign();
        boolean boolean13 = node4.isAssign();
        boolean boolean14 = node4.isReturn();
        int int15 = node4.getLineno();
        boolean boolean16 = node4.isVar();
        node4.setCharno(5);
        java.lang.String str19 = node1.checkTreeEquals(node4);
        boolean boolean20 = node4.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str7, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n" + "'", str19, "Node tree inequality:\nTree1:\nNUMBER 53.0\n\n\nTree2:\nOR [jsdoc_info: JSDocInfo]\n\n\nSubtree1: NUMBER 53.0\n\n\nSubtree2: OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test16903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16903");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        int int12 = strSet7.size();
        boolean boolean14 = strSet7.equals((java.lang.Object) 1.0d);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo15.getBaseType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo15.getParameterNames();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        int int26 = node22.getCharno();
        boolean boolean27 = node22.isContinue();
        boolean boolean28 = strSet20.equals((java.lang.Object) node22);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node30.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node34 = node32.getParent();
        node32.setIsSyntheticBlock(true);
        boolean boolean37 = node32.isContinue();
        boolean boolean38 = strSet20.equals((java.lang.Object) node32);
        int int39 = strSet20.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList48 = com.google.common.collect.ImmutableList.of(typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45, typePosition46, typePosition47);
        typePosition47.setPositionInformation((int) (short) 10, 48, 43, 51);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node55.addSuppression("");
        java.lang.String str58 = node55.toString();
        boolean boolean59 = node55.hasChildren();
        typePosition47.setItem(node55);
        int int61 = typePosition47.getStartLine();
        boolean boolean62 = strSet20.equals((java.lang.Object) typePosition47);
        boolean boolean63 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet7.spliterator();
        java.lang.Object obj65 = null;
        boolean boolean66 = strSet7.contains(obj65);
        java.util.Spliterator<java.lang.String> strSpliterator67 = strSet7.spliterator();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList48);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str58, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSpliterator67);
    }

    @Test
    public void test16904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test16905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16905");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isDefaultCase();
        boolean boolean7 = node1.isEmpty();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        int int13 = node9.getCharno();
        boolean boolean14 = node9.isName();
        boolean boolean15 = node9.isDefaultCase();
        node1.addChildToFront(node9);
        int int17 = node1.getType();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node22.addChildrenToFront(node24);
        boolean boolean26 = node24.isLabel();
        boolean boolean27 = node24.isContinue();
        node24.setVarArgs(false);
        boolean boolean30 = node24.isVoid();
        com.google.javascript.rhino.Node node31 = node20.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node32 = node1.useSourceInfoFromForTree(node24);
        java.lang.Object obj34 = node32.getProp((int) '#');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node41.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node45 = node43.getParent();
        com.google.javascript.rhino.Node node46 = node36.useSourceInfoFromForTree(node43);
        boolean boolean47 = node46.isArrayLit();
        node46.setSourceEncodedPosition(30);
        boolean boolean50 = node46.isSwitch();
        node32.addChildToFront(node46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str39, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test16906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16906");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExpose();
        jSDocInfo0.setLicense("(OR)");
        boolean boolean8 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16907");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        boolean boolean52 = node14.isUnscopedQualifiedName();
        boolean boolean53 = node14.isFromExterns();
        boolean boolean54 = node14.isNew();
        boolean boolean55 = node14.isNew();
        node14.setOptionalArg(true);
        int int59 = node14.getIntProp(50);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test16908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16908");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "");
        java.lang.String str3 = node2.toStringTree();
        boolean boolean4 = node2.isDelProp();
        java.lang.Object obj6 = node2.getProp(3);
        boolean boolean7 = node2.isWhile();
        node2.setLineno(40999);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OR \n" + "'", str3, "OR \n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test16909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16909");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean21 = node20.isRegExp();
        boolean boolean22 = node20.isName();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFromForTree(node20);
        boolean boolean24 = node9.isParamList();
        java.lang.String str28 = node9.toString(true, true, false);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
    }

    @Test
    public void test16910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16910");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isGetProp();
        com.google.javascript.rhino.Node node14 = node11.removeChildren();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        int int20 = node16.getCharno();
        boolean boolean21 = node16.isParamList();
        boolean boolean22 = node16.isNoSideEffectsCall();
        boolean boolean23 = node16.isCase();
        node11.addChildrenToFront(node16);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16911");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n", (int) 'a', (int) (short) 1);
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node4.setJSType(jSType5);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16912");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        boolean boolean36 = node32.isTypeOf();
        boolean boolean37 = node32.isDelProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        int int43 = node39.getCharno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] { node32, node39 };
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray44);
        int int46 = strList13.indexOf((java.lang.Object) node45);
        java.util.Iterator<java.lang.String> strItor47 = strList13.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("OR 0 [jsdoc_info: JSDocInfo]\n", "OR 0 [jsdoc_info: JSDocInfo]\n", "((OR))", "false", "(OR)", "Not declared as a type name", "(Unknown class name)", "NUMBER 4.0 1\n", "", "Named type with empty name component");
        boolean boolean59 = strList13.containsAll((java.util.Collection<java.lang.String>) strList58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList60 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList13);
        java.lang.String[] strArray63 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        node67.addChildrenToFront(node69);
        boolean boolean71 = node67.isTypeOf();
        boolean boolean72 = node67.wasEmptyNode();
        int int73 = strList64.indexOf((java.lang.Object) boolean72);
        boolean boolean74 = strList13.containsAll((java.util.Collection<java.lang.String>) strList64);
        java.util.Spliterator<java.lang.String> strSpliterator75 = strList64.spliterator();
        java.util.stream.Stream<java.lang.String> strStream76 = strList64.parallelStream();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strIterableList60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertNotNull(strStream76);
    }

    @Test
    public void test16913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16913");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node6);
        jSDocInfo0.addSuppression("(OR \n)");
        boolean boolean21 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node22 = jSDocInfo0.getAssociatedNode();
        boolean boolean23 = node22.wasEmptyNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16914");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        boolean boolean6 = node2.isReturn();
        com.google.javascript.rhino.InputId inputId7 = node2.getInputId();
        boolean boolean8 = node2.isArrayLit();
        boolean boolean9 = node2.isInc();
        boolean boolean10 = node2.isAssign();
        boolean boolean11 = node2.isWith();
        boolean boolean12 = node2.isLabelName();
        boolean boolean13 = node2.isWhile();
        boolean boolean14 = node2.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(4100, node2, 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16915");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        java.lang.String str8 = node3.toString();
        node3.setLineno((int) (short) 100);
        int int11 = node3.getSourcePosition();
        boolean boolean13 = node3.getBooleanProp(12);
        com.google.javascript.rhino.Node node14 = node3.getNext();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR" + "'", str8, "OR");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 409600 + "'", int11 == 409600);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test16916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16916");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node1.isStringKey();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node1, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression21);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder26 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]>();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node[]> nodeArrayBuilder28 = nodeArrayBuilder26.add(nodeArray27);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray27, 2, (int) '4');
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '4', nodeArray27, 50, 15);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(9, nodeArray27);
        boolean boolean36 = jSTypeExpression21.equals((java.lang.Object) node35);
        boolean boolean37 = jSTypeExpression21.isOptionalArg();
        boolean boolean38 = jSTypeExpression21.isOptionalArg();
        boolean boolean39 = jSTypeExpression21.isVarArgs();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArrayBuilder28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16917");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node9.addSuppression("");
        java.lang.String str12 = node9.toString();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node14.addSuppression("");
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node14.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node9.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node14);
        boolean boolean22 = node14.isWhile();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        boolean boolean28 = node26.isLabel();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node33.isNot();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = node33.copyInformationFromForTree(node39);
        com.google.javascript.rhino.InputId inputId41 = node33.getInputId();
        com.google.javascript.rhino.Node node42 = node33.getNext();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node44.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node44.isComma();
        boolean boolean50 = node44.isBlock();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList51 = com.google.common.collect.ImmutableList.of(node14, node26, node31, node33, node44);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        node53.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node53.setStaticSourceFile(staticSourceFile56);
        com.google.javascript.rhino.Node node58 = node33.copyInformationFromForTree(node53);
        node53.setCharno(10);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node62.addChildrenToFront(node64);
        boolean boolean66 = node62.isNot();
        boolean boolean67 = node62.isDefaultCase();
        boolean boolean68 = node62.isEmpty();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(100);
        node70.addChildrenToFront(node72);
        int int74 = node70.getCharno();
        boolean boolean75 = node70.isName();
        boolean boolean76 = node70.isNE();
        boolean boolean77 = node70.isIn();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100);
        node79.addChildrenToFront(node81);
        com.google.javascript.rhino.Node node83 = node81.getParent();
        boolean boolean84 = node83.isDefaultCase();
        int int85 = node70.getIndexOfChild(node83);
        boolean boolean86 = node83.isLabelName();
        boolean boolean87 = node62.isEquivalentTo(node83);
        node53.addChildToFront(node83);
        node53.setWasEmptyNode(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str12, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str17, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test16918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16918");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "((OR [jsdoc_info: JSDocInfo] [length: 46]))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16919");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        java.lang.Object obj10 = null;
        boolean boolean11 = jSTypeExpression9.equals(obj10);
        com.google.javascript.rhino.Node node12 = jSTypeExpression9.getRoot();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean27 = strList19.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strList19.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = strList19.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor30 = strList19.iterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str38 = ternaryValue37.toString();
        boolean boolean40 = ternaryValue37.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue34.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue31.and(ternaryValue37);
        int int43 = strList19.indexOf((java.lang.Object) ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue42.xor(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue46.not();
        boolean boolean48 = jSTypeExpression9.equals((java.lang.Object) ternaryValue46);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        boolean boolean50 = jSTypeExpression9.isOptionalArg();
        com.google.javascript.rhino.Node node51 = jSTypeExpression9.getRoot();
        boolean boolean52 = jSTypeExpression9.isOptionalArg();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "unknown" + "'", str38, "unknown");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test16920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16920");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean2 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean5 = ternaryValue3.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str7 = ternaryValue6.toString();
        boolean boolean9 = ternaryValue6.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue3.and(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.and(ternaryValue6);
        java.lang.String str12 = ternaryValue0.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "unknown" + "'", str7, "unknown");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "unknown" + "'", str12, "unknown");
    }

    @Test
    public void test16921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16921");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean5 = node4.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node9.isLabel();
        boolean boolean12 = node4.isEquivalentTo(node9);
        boolean boolean13 = node4.isCall();
        boolean boolean14 = node4.hasChildren();
        java.util.Set<java.lang.String> strSet15 = null;
        node4.setDirectives(strSet15);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16922");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((NUMBER 1.0 37\n))", (-1), 213044);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        node5.setStaticSourceFile(staticSourceFile8);
        boolean boolean10 = node5.isComma();
        boolean boolean11 = node5.isFalse();
        boolean boolean12 = node5.isNoSideEffectsCall();
        boolean boolean13 = node5.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node5.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node15 = node5.cloneNode();
        node5.setWasEmptyNode(true);
        node3.addChildToBack(node5);
        boolean boolean19 = node5.isName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node5.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16923");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        boolean boolean4 = node1.getBooleanProp(4095);
        node1.setSourceEncodedPosition(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId8 = node1.getInputId();
        boolean boolean9 = node1.isAdd();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node12.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node12.setStaticSourceFile(staticSourceFile15);
        boolean boolean17 = node12.isComma();
        boolean boolean18 = node12.isBlock();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node12.copyInformationFromForTree(node21);
        boolean boolean23 = node12.isNew();
        node12.setSourceEncodedPositionForTree(41);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(50, node12, (int) (byte) 10, 48);
        com.google.javascript.rhino.Node node29 = node1.srcrefTree(node28);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder7);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test16924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16924");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        boolean boolean15 = node6.isNoSideEffectsCall();
        node6.setSourceEncodedPosition(24);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        boolean boolean26 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.Node node31 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node33.setStaticSourceFile(staticSourceFile36);
        boolean boolean38 = node33.isComma();
        boolean boolean39 = node33.isBlock();
        java.lang.String str40 = node33.toStringTree();
        boolean boolean41 = node33.isDec();
        node33.setWasEmptyNode(false);
        boolean boolean44 = node33.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node46.addSuppression("");
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node46.getStaticSourceFile();
        boolean boolean52 = node46.isVarArgs();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(40, node31, node33, node46);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(29, node53, 0, (int) (byte) 100);
        boolean boolean57 = node56.isVoid();
        com.google.javascript.rhino.Node node58 = node6.useSourceInfoFrom(node56);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str40, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str49, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test16925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16925");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = strList13.asList();
        boolean boolean26 = strList13.isEmpty();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags28.clearAllFlags();
        sideEffectFlags28.clearSideEffectFlags();
        sideEffectFlags28.setThrows();
        sideEffectFlags28.setMutatesGlobalState();
        sideEffectFlags28.setMutatesThis();
        sideEffectFlags28.clearSideEffectFlags();
        int int35 = strList13.indexOf((java.lang.Object) sideEffectFlags28);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test16926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16926");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        boolean boolean13 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node15.isTypeOf();
        boolean boolean20 = node15.isVarArgs();
        boolean boolean21 = node15.isIn();
        node6.addChildToFront(node15);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node29.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node24.copyInformationFromForTree(node29);
        boolean boolean36 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isTypeOf();
        boolean boolean43 = node38.isVarArgs();
        boolean boolean44 = node38.isIn();
        node29.addChildToFront(node38);
        node38.removeProp(48);
        boolean boolean48 = node38.isAssign();
        boolean boolean49 = node38.isTrue();
        boolean boolean50 = node6.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node51 = node38.getParent();
        int int52 = node38.getCharno();
        com.google.javascript.rhino.Node node54 = node38.getAncestor(24);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node56.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node56.getStaticSourceFile();
        boolean boolean62 = node56.isLocalResultCall();
        boolean boolean63 = node56.isArrayLit();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        int int69 = node65.getCharno();
        boolean boolean70 = node65.isName();
        com.google.javascript.rhino.Node node71 = node56.srcrefTree(node65);
        boolean boolean72 = node65.isString();
        com.google.javascript.rhino.Node node73 = node38.copyInformationFrom(node65);
        boolean boolean74 = node73.isReturn();
        java.lang.String str78 = node73.toString(true, false, false);
        com.google.javascript.rhino.Node node79 = node73.getLastSibling();
        boolean boolean80 = node73.hasMoreThanOneChild();
        boolean boolean81 = node73.isGetElem();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str27, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str59, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "OR" + "'", str78, "OR");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16927");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isStringKey();
        boolean boolean20 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = node10.removeChildren();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node38 = node36.getParent();
        com.google.javascript.rhino.Node node39 = node29.useSourceInfoFromForTree(node36);
        boolean boolean40 = node23.hasChild(node29);
        boolean boolean41 = node29.isNot();
        boolean boolean42 = node29.isQuotedString();
        boolean boolean43 = node29.isNot();
        node21.addChildToFront(node29);
        // The following exception was thrown during execution in test generation
        try {
            node29.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str32, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test16928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16928");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node3.getType();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean9 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = node11.cloneNode();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        boolean boolean18 = node14.isTypeOf();
        boolean boolean19 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(100);
        node28.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node32 = node30.getParent();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node30.setJSType(jSType33);
        java.lang.String str35 = node30.toString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node37.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node37.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node37.isComma();
        node37.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList45 = com.google.common.collect.ImmutableList.of(node14, node21, node30, node37);
        com.google.javascript.rhino.Node node46 = node12.copyInformationFrom(node37);
        boolean boolean47 = node3.hasChild(node12);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node49.addSuppression("");
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node49.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node49.getStaticSourceFile();
        boolean boolean55 = node49.isLocalResultCall();
        boolean boolean56 = node49.isArrayLit();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(100);
        node58.addChildrenToFront(node60);
        int int62 = node58.getCharno();
        boolean boolean63 = node58.isName();
        com.google.javascript.rhino.Node node64 = node49.srcrefTree(node58);
        com.google.javascript.rhino.Node node65 = node3.useSourceInfoFrom(node64);
        int int67 = node65.getIntProp(53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node65.siblings();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node65.setJSType(jSType69);
        boolean boolean71 = node65.isVoid();
        boolean boolean72 = node65.isArrayLit();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR" + "'", str35, "OR");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str52, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test16929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16929");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isTypeOf();
        boolean boolean6 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        boolean boolean13 = node8.isDelProp();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node19 = node17.getParent();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node17.setJSType(jSType20);
        java.lang.String str22 = node17.toString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList32 = com.google.common.collect.ImmutableList.of(node1, node8, node17, node24);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node36.isLabel();
        boolean boolean39 = node36.isContinue();
        com.google.javascript.rhino.Node node40 = node8.copyInformationFrom(node36);
        java.lang.String str41 = node36.toString();
        com.google.javascript.rhino.Node node42 = node36.detachFromParent();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node44.addSuppression("");
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        com.google.javascript.rhino.Node node54 = node44.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.hasBaseType();
        jSDocInfo55.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo55.getBaseType();
        node54.setJSDocInfo(jSDocInfo55);
        java.lang.String str61 = jSDocInfo55.getFileOverview();
        node42.setJSDocInfo(jSDocInfo55);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection63 = jSDocInfo55.getTypeNodes();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo55.getModifies();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OR" + "'", str22, "OR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR" + "'", str41, "OR");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str47, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(nodeCollection63);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test16930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16930");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 8, 41, 0);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node6.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node6.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.children();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node6.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node20.addSuppression("");
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node20.getStaticSourceFile();
        boolean boolean26 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node33.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node28.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node20.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNot();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100);
        node43.addSuppression("");
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node43.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node43.getStaticSourceFile();
        boolean boolean49 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node51.addSuppression("");
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node56.addSuppression("");
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node56.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = node51.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node63 = node43.useSourceInfoFrom(node56);
        boolean boolean64 = node56.isNot();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(44, node14, node33, node56);
        int int66 = node14.getLength();
        node14.setType(5);
        boolean boolean69 = node14.isName();
        com.google.javascript.rhino.Node node70 = node3.srcrefTree(node14);
        int int71 = node14.getChildCount();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100);
        node73.addChildrenToFront(node75);
        com.google.javascript.rhino.Node node77 = node75.getParent();
        int int78 = node75.getLength();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100);
        node80.addSuppression("");
        node75.addChildrenToFront(node80);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node75, "JSDocInfo");
        boolean boolean86 = node75.isComma();
        com.google.javascript.rhino.Node node87 = node75.detachFromParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable88 = node87.children();
        com.google.javascript.rhino.Node node89 = node14.useSourceInfoIfMissingFromForTree(node87);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str23, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str31, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str36, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str46, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str54, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str59, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(nodeIterable88);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test16931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16931");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(12, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16932");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList11 = com.google.common.collect.ImmutableList.of(visibility8, visibility9, visibility10);
        jSDocInfo0.setVisibility(visibility10);
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        java.lang.String str14 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getReturnType();
        boolean boolean16 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16933");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '#', "Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR 37\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR 37\n", (int) (short) 1, 4096);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test16934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16934");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList8 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5, typePosition6, typePosition7);
        int int9 = typePosition0.getEndLine();
        int int10 = typePosition0.getPositionOnEndLine();
        boolean boolean11 = typePosition0.hasBrackets();
        int int12 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        com.google.javascript.rhino.Node node18 = node16.getParent();
        boolean boolean19 = node18.isDefaultCase();
        boolean boolean20 = node18.isNoSideEffectsCall();
        java.lang.String str24 = node18.toString(false, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.hasTypedefType();
        java.lang.String str27 = jSDocInfo25.toString();
        node18.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node29 = node18.cloneTree();
        int int30 = node18.getSourcePosition();
        boolean boolean31 = node18.isNumber();
        com.google.javascript.rhino.Node node32 = node18.cloneNode();
        typePosition0.setItem(node32);
        int int34 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(typePositionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR" + "'", str24, "OR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JSDocInfo" + "'", str27, "JSDocInfo");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test16935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16935");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(11, "NUMBER 10.0", (int) (short) 100, 5);
        boolean boolean5 = node4.isDec();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node7.isTypeOf();
        boolean boolean12 = node7.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node13 = node7.removeFirstChild();
        boolean boolean14 = node13.isDelProp();
        boolean boolean15 = node13.isGetProp();
        boolean boolean16 = node13.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = node4.removeChildAfter(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16936");
        java.lang.String[] strArray6 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.lang.Object[] objArray9 = strSet7.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        java.lang.String[] strArray19 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList20.equals((java.lang.Object) "OR [jsdoc_info: JSDocInfo]");
        boolean boolean30 = strList20.isEmpty();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strList33.retainAll((java.util.Collection<java.lang.String>) strList38);
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean55 = strList47.containsAll((java.util.Collection<java.lang.String>) strList54);
        java.lang.String[] strArray57 = new java.lang.String[] { "unknown" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        boolean boolean69 = strList62.retainAll((java.util.Collection<java.lang.String>) strList67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList72.retainAll((java.util.Collection<java.lang.String>) strList77);
        com.google.common.collect.ImmutableList<java.util.List<java.lang.String>> strListList80 = com.google.common.collect.ImmutableList.of((java.util.List<java.lang.String>) strList16, (java.util.List<java.lang.String>) strList20, (java.util.List<java.lang.String>) strList38, (java.util.List<java.lang.String>) strList47, (java.util.List<java.lang.String>) strList58, (java.util.List<java.lang.String>) strList62, (java.util.List<java.lang.String>) strList72);
        boolean boolean81 = strSet7.removeAll((java.util.Collection<java.lang.String>) strList38);
        java.util.Iterator<java.lang.String> strItor82 = strSet7.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.hasBaseType();
        jSDocInfo83.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo83.getBaseType();
        java.util.Set<java.lang.String> strSet88 = jSDocInfo83.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator89 = strSet88.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet88.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator91 = strSet88.spliterator();
        int int92 = strSet88.size();
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.String>> strCollectionList93 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.String>) strSet7, (java.util.Collection<java.lang.String>) strSet88);
        strSet7.clear();
        int int95 = strSet7.size();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strListList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSpliterator89);
        org.junit.Assert.assertNotNull(strSpliterator90);
        org.junit.Assert.assertNotNull(strSpliterator91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(strCollectionList93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test16937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16937");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNew();
        boolean boolean6 = node1.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo8.getParameterNames();
        boolean boolean10 = jSDocInfo8.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo8.getThrownTypes();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.wasEmptyNode();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.isDelProp();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node31 = node29.getParent();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node29.setJSType(jSType32);
        java.lang.String str34 = node29.toString();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node36.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.isComma();
        node36.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList44 = com.google.common.collect.ImmutableList.of(node13, node20, node29, node36);
        boolean boolean45 = node36.isComma();
        boolean boolean46 = node36.isCase();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int52 = node51.getSideEffectFlags();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node58 = node56.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str60 = jSDocInfo59.getFileOverview();
        java.lang.String str61 = jSDocInfo59.getFileOverview();
        boolean boolean62 = jSDocInfo59.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList63 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo8, (java.lang.Object) node36, (java.lang.Object) node51, (java.lang.Object) node56, (java.lang.Object) jSDocInfo59);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        boolean boolean69 = node65.isTypeOf();
        boolean boolean70 = node65.wasEmptyNode();
        com.google.javascript.rhino.Node node71 = node65.removeChildren();
        com.google.javascript.rhino.Node node72 = node36.copyInformationFromForTree(node71);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node71.setStaticSourceFile(staticSourceFile73);
        int int75 = node71.getSourceOffset();
        java.lang.String str76 = node71.toString();
        com.google.javascript.rhino.Node node77 = node1.useSourceInfoIfMissingFromForTree(node71);
        boolean boolean78 = node77.isFor();
        boolean boolean79 = node77.isThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR" + "'", str34, "OR");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR" + "'", str76, "OR");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test16938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16938");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isConstant();
        boolean boolean4 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("STRING  32\n");
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 37\n");
        boolean boolean10 = jSDocInfo0.hasParameter("(Not declared as a type name)");
        int int11 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16940");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.hasParameterType("OR");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String[] strArray12 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        strSet13.clear();
        boolean boolean17 = strList5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = strList5.reverse();
        java.lang.String str19 = strList18.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean34 = strList26.containsAll((java.util.Collection<java.lang.String>) strList33);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor35 = strList33.iterator();
        int int36 = strList33.size();
        boolean boolean37 = strList33.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.hasBaseType();
        jSDocInfo38.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo38.getBaseType();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo38.getParameterNames();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        node45.addChildrenToFront(node47);
        int int49 = node45.getCharno();
        boolean boolean50 = node45.isContinue();
        boolean boolean51 = strSet43.equals((java.lang.Object) node45);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100);
        node53.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node57 = node55.getParent();
        node55.setIsSyntheticBlock(true);
        boolean boolean60 = node55.isContinue();
        boolean boolean61 = strSet43.equals((java.lang.Object) node55);
        java.lang.Object[] objArray62 = strSet43.toArray();
        int int63 = strList33.indexOf((java.lang.Object) objArray62);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList33.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.isNoShadow();
        boolean boolean67 = jSDocInfo65.isNoShadow();
        boolean boolean68 = jSDocInfo65.hasModifies();
        boolean boolean69 = jSDocInfo65.isOverride();
        java.util.Collection<java.lang.String> strCollection70 = jSDocInfo65.getAuthors();
        java.lang.String str71 = jSDocInfo65.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection72 = jSDocInfo65.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo65.getReturnType();
        boolean boolean74 = jSDocInfo65.isExpose();
        int int75 = strList33.lastIndexOf((java.lang.Object) boolean74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.hasBaseType();
        java.lang.String str78 = jSDocInfo76.getFileOverview();
        int int79 = jSDocInfo76.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo76.getBaseType();
        boolean boolean81 = jSDocInfo76.isConstant();
        boolean boolean82 = jSDocInfo76.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo76.getBaseType();
        java.lang.String str84 = jSDocInfo76.getSourceName();
        boolean boolean85 = jSDocInfo76.isDefine();
        boolean boolean86 = strList33.equals((java.lang.Object) jSDocInfo76);
        boolean boolean87 = strList18.containsAll((java.util.Collection<java.lang.String>) strList33);
        java.lang.String str88 = strList18.toString();
        // The following exception was thrown during execution in test generation
        try {
            strList18.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strCollection70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(strCollection72);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[]" + "'", str88, "[]");
    }

    @Test
    public void test16941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16941");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isArrayLit();
        boolean boolean9 = node1.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = node1.getAncestor(51);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test16942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16942");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test16943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16943");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.String[] strArray17 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isTypeOf();
        boolean boolean26 = node21.wasEmptyNode();
        int int27 = strList18.indexOf((java.lang.Object) boolean26);
        int int28 = strList13.indexOf((java.lang.Object) boolean26);
        boolean boolean29 = strList13.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean44 = strList36.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor45 = strList43.iterator();
        boolean boolean46 = strList43.isEmpty();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        node48.addChildrenToFront(node50);
        int int52 = node48.getCharno();
        boolean boolean53 = strList43.equals((java.lang.Object) node48);
        java.util.Iterator<java.lang.String> strItor54 = strList43.iterator();
        boolean boolean55 = strList13.containsAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean56 = strList13.isEmpty();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node58.setStaticSourceFile(staticSourceFile61);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100);
        node69.addChildrenToFront(node71);
        com.google.javascript.rhino.Node node73 = node71.getParent();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node71);
        boolean boolean75 = node58.hasChild(node64);
        boolean boolean76 = node58.isStringKey();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node58, "NUMBER 1.0 37\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean80 = jSTypeExpression79.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression79);
        boolean boolean82 = strList13.contains((java.lang.Object) jSTypeExpression81);
        java.lang.Object[] objArray83 = strList13.toArray();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags85 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags85.setMutatesArguments();
        boolean boolean87 = sideEffectFlags85.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strList13.remove((java.lang.Object) boolean87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str67, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test16944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16944");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        int int8 = node4.getCharno();
        boolean boolean9 = node4.isName();
        boolean boolean10 = node4.isNE();
        boolean boolean11 = node4.isEmpty();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.hasChildren();
        com.google.javascript.rhino.Node node18 = node4.srcrefTree(node13);
        int int19 = strList2.indexOf((java.lang.Object) node4);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor20 = strList2.listIterator();
        boolean boolean21 = strList2.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        boolean boolean27 = node23.isTypeOf();
        boolean boolean28 = node23.isDelProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node23, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression30);
        int int32 = strList2.indexOf((java.lang.Object) jSTypeExpression30);
        com.google.javascript.rhino.Node node33 = jSTypeExpression30.getRoot();
        com.google.javascript.rhino.Node node34 = jSTypeExpression30.getRoot();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test16945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16945");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strList13.isEmpty();
        boolean boolean16 = strList2.removeAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean31 = strList23.containsAll((java.util.Collection<java.lang.String>) strList30);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor32 = strList23.listIterator();
        int int33 = strList23.size();
        boolean boolean34 = strList23.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int36 = strList23.lastIndexOf((java.lang.Object) visibility35);
        boolean boolean37 = strList2.addAll((java.util.Collection<java.lang.String>) strList23);
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList23.asList();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node40.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node40.setStaticSourceFile(staticSourceFile43);
        boolean boolean45 = node40.isComma();
        boolean boolean46 = node40.isFalse();
        boolean boolean47 = node40.isNoSideEffectsCall();
        boolean boolean48 = node40.isWith();
        java.util.Set<java.lang.String> strSet49 = node40.getDirectives();
        boolean boolean50 = strList38.equals((java.lang.Object) node40);
        com.google.javascript.rhino.InputId inputId51 = null;
        node40.setInputId(inputId51);
        com.google.javascript.rhino.Node node53 = node40.cloneTree();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test16946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16946");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor21 = strList19.iterator();
        int int22 = strList19.size();
        boolean boolean23 = strList19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.hasBaseType();
        jSDocInfo24.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo24.getBaseType();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo24.getParameterNames();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node31.addChildrenToFront(node33);
        int int35 = node31.getCharno();
        boolean boolean36 = node31.isContinue();
        boolean boolean37 = strSet29.equals((java.lang.Object) node31);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100);
        node39.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node43 = node41.getParent();
        node41.setIsSyntheticBlock(true);
        boolean boolean46 = node41.isContinue();
        boolean boolean47 = strSet29.equals((java.lang.Object) node41);
        java.lang.Object[] objArray48 = strSet29.toArray();
        int int49 = strList19.indexOf((java.lang.Object) objArray48);
        java.util.Spliterator<java.lang.String> strSpliterator50 = strList19.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoShadow();
        boolean boolean53 = jSDocInfo51.isNoShadow();
        boolean boolean54 = jSDocInfo51.hasModifies();
        boolean boolean55 = jSDocInfo51.isOverride();
        java.util.Collection<java.lang.String> strCollection56 = jSDocInfo51.getAuthors();
        java.lang.String str57 = jSDocInfo51.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection58 = jSDocInfo51.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo51.getReturnType();
        boolean boolean60 = jSDocInfo51.isExpose();
        int int61 = strList19.lastIndexOf((java.lang.Object) boolean60);
        java.util.Spliterator<java.lang.String> strSpliterator62 = strList19.spliterator();
        boolean boolean63 = strSet5.retainAll((java.util.Collection<java.lang.String>) strList19);
        // The following exception was thrown during execution in test generation
        try {
            strList19.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strCollection56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strCollection58);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test16947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16947");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16948");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        com.google.javascript.rhino.Node node21 = node19.getParent();
        node19.setLineno(37);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        node25.addChildrenToFront(node27);
        boolean boolean29 = node25.isNot();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node32 = node25.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node19.srcref(node25);
        int int34 = strList13.indexOf((java.lang.Object) node33);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList13.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList38 = strList13.subList(6, 131072);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (131072) must not be greater than size (6)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator35);
    }

    @Test
    public void test16949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16949");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test16950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16950");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean6 = node5.isExprResult();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isTypeOf();
        boolean boolean14 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node16.addChildrenToFront(node18);
        boolean boolean20 = node16.isTypeOf();
        boolean boolean21 = node16.isDelProp();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100);
        node23.addChildrenToFront(node25);
        com.google.javascript.rhino.Node node27 = node25.getParent();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node25.setJSType(jSType28);
        java.lang.String str30 = node25.toString();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        node32.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node32.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node32.isComma();
        node32.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList40 = com.google.common.collect.ImmutableList.of(node9, node16, node25, node32);
        boolean boolean41 = node32.isComma();
        boolean boolean42 = node32.isCase();
        boolean boolean43 = node32.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node50.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node54 = node52.getParent();
        com.google.javascript.rhino.Node node55 = node45.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(100);
        node57.addChildrenToFront(node59);
        int int61 = node57.getCharno();
        boolean boolean62 = node57.isName();
        boolean boolean63 = node57.isNE();
        boolean boolean64 = node57.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        node66.addChildrenToFront(node68);
        com.google.javascript.rhino.Node node70 = node68.getParent();
        boolean boolean71 = node70.isDefaultCase();
        int int72 = node57.getIndexOfChild(node70);
        node57.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node75 = node55.useSourceInfoIfMissingFromForTree(node57);
        node32.addChildrenToBack(node55);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) ' ', node5, node32, (int) (short) -1, 100);
        node79.setSourceEncodedPositionForTree(30);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str48, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test16951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16951");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("(OR [jsdoc_info: JSDocInfo] [synthetic: 1]\n)");
        jSDocInfo0.addSuppression("Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test16952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16952");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.clearAllFlags();
        int int8 = sideEffectFlags5.valueOf();
        sideEffectFlags5.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(35);
        sideEffectFlags11.setMutatesGlobalState();
        sideEffectFlags11.setMutatesArguments();
        sideEffectFlags11.setMutatesGlobalState();
        sideEffectFlags11.setMutatesArguments();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList16 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags5, sideEffectFlags11);
        sideEffectFlags11.setMutatesThis();
        int int18 = sideEffectFlags11.valueOf();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(sideEffectFlagsList16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    }

    @Test
    public void test16953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16953");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "OR [jsdoc_info: JSDocInfo]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strList2.retainAll((java.util.Collection<java.lang.String>) strList7);
        int int10 = strList2.size();
        java.lang.Object[] objArray11 = strList2.toArray();
        java.util.Iterator<java.lang.String> strItor12 = strList2.iterator();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node14.addChildrenToFront(node16);
        node14.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node14.getJsDocBuilderForNode();
        boolean boolean22 = node14.isNE();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        int int28 = node24.getCharno();
        boolean boolean29 = node24.isName();
        boolean boolean30 = node24.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = new com.google.javascript.rhino.JSTypeExpression(node24, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression32);
        boolean boolean35 = jSTypeExpression32.equals((java.lang.Object) 36);
        com.google.javascript.rhino.Node node36 = jSTypeExpression32.getRoot();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100);
        node38.addChildrenToFront(node40);
        boolean boolean42 = node38.isNot();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node45 = node38.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        boolean boolean51 = node47.isNot();
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoFrom(node47);
        boolean boolean53 = jSTypeExpression32.equals((java.lang.Object) node47);
        com.google.javascript.rhino.Node node54 = node14.srcrefTree(node47);
        boolean boolean55 = strList2.remove((java.lang.Object) node47);
        boolean boolean56 = node47.isSyntheticBlock();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node47.getAncestors();
        boolean boolean58 = node47.isTypeOf();
        boolean boolean59 = node47.isDebugger();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test16954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16954");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        boolean boolean4 = node1.getBooleanProp(4095);
        boolean boolean5 = node1.isNull();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        node9.putIntProp((int) (short) 0, 38);
        boolean boolean16 = node9.isCall();
        boolean boolean17 = node9.isVar();
        boolean boolean18 = node1.isEquivalentTo(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(31, "((OR))");
        // The following exception was thrown during execution in test generation
        try {
            node9.removeChild(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test16955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str2 = jSDocInfo0.getMeaning();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        boolean boolean11 = jSDocInfo9.isNoShadow();
        boolean boolean12 = jSDocInfo9.hasModifies();
        boolean boolean13 = jSDocInfo9.isExterns();
        boolean boolean14 = jSDocInfo9.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList18 = com.google.common.collect.ImmutableList.of(visibility15, visibility16, visibility17);
        jSDocInfo9.setVisibility(visibility17);
        jSDocInfo0.setVisibility(visibility17);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList18);
    }

    @Test
    public void test16956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16956");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node6.addSuppression("");
        java.lang.String str9 = node6.toString();
        com.google.javascript.rhino.Node node10 = node6.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = node1.copyInformationFromForTree(node6);
        node6.setOptionalArg(false);
        node6.setSourceEncodedPositionForTree((int) (short) -1);
        boolean boolean17 = node6.isExprResult();
        boolean boolean18 = node6.isParamList();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node6.getAncestors();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isIf();
        com.google.javascript.rhino.Node node32 = node23.copyInformationFromForTree(node26);
        boolean boolean33 = node23.isEmpty();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isReturn();
        com.google.javascript.rhino.InputId inputId40 = node35.getInputId();
        boolean boolean41 = node35.isAdd();
        node23.addChildrenToFront(node35);
        com.google.javascript.rhino.Node node43 = node23.removeFirstChild();
        com.google.javascript.rhino.Node node44 = node6.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean45 = node44.isArrayLit();
        java.lang.Appendable appendable46 = null;
        // The following exception was thrown during execution in test generation
        try {
            node44.appendStringTree(appendable46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str9, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputId40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test16957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16957");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        boolean boolean12 = node11.isArrayLit();
        node11.setSourceEncodedPosition(30);
        boolean boolean15 = node11.isSwitch();
        boolean boolean16 = node11.isTypeOf();
        boolean boolean17 = node11.isFromExterns();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test16958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16958");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(1, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node3.getStaticSourceFile();
        org.junit.Assert.assertNull(staticSourceFile4);
    }

    @Test
    public void test16959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16959");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "((Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n))");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16960");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node11.isLabel();
        boolean boolean14 = node11.isContinue();
        com.google.javascript.rhino.Node node15 = node11.removeFirstChild();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100);
        node17.addChildrenToFront(node19);
        int int21 = node17.getCharno();
        com.google.javascript.rhino.Node node22 = node11.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        node24.addChildrenToFront(node26);
        com.google.javascript.rhino.Node node28 = node26.getParent();
        node26.setIsSyntheticBlock(true);
        boolean boolean31 = node26.isContinue();
        java.lang.String str32 = node26.getQualifiedName();
        boolean boolean33 = node26.isSwitch();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        boolean boolean39 = node35.isTypeOf();
        boolean boolean40 = node35.wasEmptyNode();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        node42.addChildrenToFront(node44);
        boolean boolean46 = node42.isTypeOf();
        boolean boolean47 = node42.isDelProp();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100);
        node49.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node53 = node51.getParent();
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node51.setJSType(jSType54);
        java.lang.String str56 = node51.toString();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100);
        node58.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node58.setStaticSourceFile(staticSourceFile61);
        boolean boolean63 = node58.isComma();
        node58.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList66 = com.google.common.collect.ImmutableList.of(node35, node42, node51, node58);
        boolean boolean67 = node26.hasChild(node35);
        com.google.javascript.rhino.Node node68 = node17.useSourceInfoIfMissingFrom(node35);
        boolean boolean69 = node35.isDo();
        boolean boolean70 = node1.hasChild(node35);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node35.getJsDocBuilderForNode();
        node35.setSourceEncodedPositionForTree((int) (byte) 100);
        boolean boolean74 = node35.isReturn();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable75 = node35.getAncestors();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR" + "'", str56, "OR");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(ancestorIterable75);
    }

    @Test
    public void test16961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16961");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test16962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16962");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1);
        namePosition0.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8, namePosition9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList13 = com.google.common.collect.ImmutableList.of(namePosition11, namePosition12);
        int int14 = namePosition11.getPositionOnEndLine();
        int int15 = namePosition11.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition16, namePosition17);
        int int19 = namePosition16.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition20 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList22 = com.google.common.collect.ImmutableList.of(namePosition20, namePosition21);
        int int23 = namePosition20.getPositionOnEndLine();
        int int24 = namePosition20.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList27 = com.google.common.collect.ImmutableList.of(namePosition25, namePosition26);
        namePosition25.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition33, namePosition34);
        int int36 = namePosition33.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList39 = com.google.common.collect.ImmutableList.of(namePosition37, namePosition38);
        namePosition37.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList47 = com.google.common.collect.ImmutableList.of(namePosition45, namePosition46);
        namePosition45.setPositionInformation(29, (int) (short) 1, 31, 43);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList53 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition9, namePosition11, namePosition16, namePosition20, namePosition25, namePosition33, namePosition37, namePosition45);
        int int54 = namePosition9.getPositionOnStartLine();
        int int55 = namePosition9.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(namePositionList27);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(namePositionList39);
        org.junit.Assert.assertNotNull(namePositionList47);
        org.junit.Assert.assertNotNull(namePositionList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test16963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean3 = jSDocInfo1.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo1.getThrownTypes();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        boolean boolean10 = node6.isTypeOf();
        boolean boolean11 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isDelProp();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node24 = node22.getParent();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node22.setJSType(jSType25);
        java.lang.String str27 = node22.toString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node29.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node29.setStaticSourceFile(staticSourceFile32);
        boolean boolean34 = node29.isComma();
        node29.setSourceEncodedPosition((int) (byte) 10);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node6, node13, node22, node29);
        boolean boolean38 = node29.isComma();
        boolean boolean39 = node29.isCase();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int45 = node44.getSideEffectFlags();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100);
        node47.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node51 = node49.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getFileOverview();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isConstant();
        com.google.common.collect.ImmutableList<java.lang.Object> objList56 = com.google.common.collect.ImmutableList.of((java.lang.Object) 0.0f, (java.lang.Object) jSDocInfo1, (java.lang.Object) node29, (java.lang.Object) node44, (java.lang.Object) node49, (java.lang.Object) jSDocInfo52);
        java.lang.String str57 = jSDocInfo52.getOriginalCommentString();
        boolean boolean58 = jSDocInfo52.isOverride();
        boolean boolean59 = jSDocInfo52.isNoAlias();
        boolean boolean60 = jSDocInfo52.hasType();
        boolean boolean61 = jSDocInfo52.isNoTypeCheck();
        boolean boolean62 = jSDocInfo52.hasBaseType();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR" + "'", str27, "OR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16964");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
    }

    @Test
    public void test16965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16965");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.isComma();
        node1.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        node10.addChildrenToFront(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node10.children();
        com.google.javascript.rhino.InputId inputId15 = null;
        node10.setInputId(inputId15);
        boolean boolean17 = node10.isName();
        java.lang.String str18 = node1.checkTreeEquals(node10);
        boolean boolean19 = node10.isInc();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = node21.copyInformationFromForTree(node27);
        com.google.javascript.rhino.InputId inputId29 = node21.getInputId();
        node10.addChildrenToFront(node21);
        node21.putBooleanProp(43, true);
        boolean boolean34 = node21.isAssignAdd();
        boolean boolean35 = node21.isOr();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node21.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str18, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test16966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16966");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test16967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16967");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.hasThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo0.isDefine();
        boolean boolean12 = jSDocInfo0.isImplicitCast();
        boolean boolean13 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getThisType();
        boolean boolean15 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConstant();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("(((NUMBER 1.0 37\n)))");
        boolean boolean14 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16969");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isContinue();
        boolean boolean7 = node3.isObjectLit();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test16970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16970");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        boolean boolean14 = node9.isIf();
        com.google.javascript.rhino.Node node15 = node6.copyInformationFromForTree(node9);
        jSDocInfo0.setAssociatedNode(node9);
        node9.setCharno(36);
        boolean boolean19 = node9.isWhile();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node9.setJSType(jSType20);
        boolean boolean22 = node9.isCatch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        java.lang.String str27 = node26.toStringTree();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100);
        node29.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100);
        node34.addChildrenToFront(node36);
        boolean boolean38 = node34.isNot();
        boolean boolean39 = node34.isIf();
        com.google.javascript.rhino.Node node40 = node31.copyInformationFromForTree(node34);
        boolean boolean41 = node31.isEmpty();
        int int42 = node26.getIndexOfChild(node31);
        boolean boolean43 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node31.detachFromParent();
        com.google.javascript.rhino.Node node45 = node9.useSourceInfoFromForTree(node44);
        int int46 = node44.getCharno();
        boolean boolean47 = node44.isBreak();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 4.0 1\n" + "'", str27, "NUMBER 4.0 1\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16971");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node5 = node1.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node1.getStaticSourceFile();
        boolean boolean7 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100);
        node9.addChildrenToFront(node11);
        boolean boolean13 = node9.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node16 = node9.copyInformationFromForTree(node15);
        com.google.javascript.rhino.InputId inputId17 = node9.getInputId();
        boolean boolean18 = node9.isIn();
        boolean boolean19 = node1.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node21.addChildrenToFront(node23);
        boolean boolean25 = node21.isNot();
        boolean boolean26 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node28.addSuppression("");
        com.google.javascript.rhino.Node node31 = node21.copyInformationFromForTree(node28);
        boolean boolean32 = node31.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node31.children();
        boolean boolean34 = node31.isComma();
        boolean boolean35 = node9.isEquivalentTo(node31);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node31.setJSType(jSType36);
        boolean boolean38 = node31.isAssignAdd();
        boolean boolean39 = node31.isLabelName();
        node31.detachChildren();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16972");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        boolean boolean5 = node1.isNot();
        boolean boolean6 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node8.addSuppression("");
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node8);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.hasOneChild();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(29);
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isNoSideEffectsCall();
        boolean boolean18 = node15.isTypeOf();
        node15.setType(24);
        // The following exception was thrown during execution in test generation
        try {
            node15.setString("Node tree inequality:\nTree1:\nOR\n    OR\n\n\nTree2:\nOR\n\n\nSubtree1: OR\n    OR\n\n\nSubtree2: OR\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: DIV is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test16973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16973");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node1.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node1.children();
        boolean boolean8 = node1.isObjectLit();
        node1.setSourceEncodedPosition(15);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(43, "NUMBER 4.0 1\n");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        boolean boolean19 = node17.isLabel();
        boolean boolean20 = node17.isContinue();
        node17.setVarArgs(false);
        boolean boolean23 = node17.isVoid();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFrom(node17);
        node17.setWasEmptyNode(true);
        boolean boolean27 = node17.isNot();
        boolean boolean28 = node17.isLocalResultCall();
        boolean boolean29 = node17.hasChildren();
        com.google.javascript.rhino.Node node30 = node1.useSourceInfoIfMissingFrom(node17);
        boolean boolean31 = node17.isFalse();
        node17.putIntProp(151552, 50);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getThisType();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16975");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16976");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        java.util.Set<java.lang.String> strSet22 = node8.getDirectives();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 1, 4);
        boolean boolean27 = node26.isRegExp();
        boolean boolean28 = node26.isName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node26.setJSType(jSType29);
        boolean boolean31 = node26.isBreak();
        boolean boolean32 = node8.isEquivalentTo(node26);
        boolean boolean33 = node8.isSetterDef();
        boolean boolean34 = node8.isNE();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16977");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean25 = strList17.containsAll((java.util.Collection<java.lang.String>) strList24);
        int int27 = strList17.lastIndexOf((java.lang.Object) 1L);
        boolean boolean28 = strList17.isEmpty();
        boolean boolean29 = strSet10.removeAll((java.util.Collection<java.lang.String>) strList17);
        java.util.stream.Stream<java.lang.String> strStream30 = strList17.stream();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node32.addChildrenToFront(node34);
        int int36 = node32.getCharno();
        boolean boolean37 = node32.isName();
        boolean boolean38 = node32.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node32, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression40);
        boolean boolean43 = jSTypeExpression40.equals((java.lang.Object) 36);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean58 = strList50.containsAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean59 = strList50.isEmpty();
        boolean boolean60 = jSTypeExpression40.equals((java.lang.Object) strList50);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strList50.spliterator();
        boolean boolean62 = strList17.contains((java.lang.Object) strList50);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100);
        node64.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        node64.setStaticSourceFile(staticSourceFile67);
        boolean boolean69 = node64.isComma();
        boolean boolean70 = node64.isBlock();
        com.google.javascript.rhino.Node node71 = node64.getLastSibling();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100);
        node73.addSuppression("");
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node73.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node73.getStaticSourceFile();
        boolean boolean79 = node73.isVarArgs();
        node64.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.hasBaseType();
        jSDocInfo81.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo81.getTypedefType();
        boolean boolean86 = jSDocInfo81.isNoSideEffects();
        com.google.javascript.rhino.Node node87 = jSDocInfo81.getAssociatedNode();
        boolean boolean88 = jSDocInfo81.isConstructor();
        boolean boolean89 = jSDocInfo81.isExport();
        java.util.Set<java.lang.String> strSet90 = jSDocInfo81.getSuppressions();
        node73.setDirectives(strSet90);
        boolean boolean92 = node73.isObjectLit();
        node73.setSourceEncodedPositionForTree(0);
        boolean boolean95 = node73.isIn();
        boolean boolean96 = node73.isArrayLit();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node73.children();
        boolean boolean98 = strList50.equals((java.lang.Object) node73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str76, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test16978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16978");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        node2.addChildrenToFront(node4);
        com.google.javascript.rhino.Node node6 = node4.getParent();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType13 = node8.getJSType();
        boolean boolean14 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = node6.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        int int21 = node20.getSideEffectFlags();
        com.google.javascript.rhino.Node node22 = node8.useSourceInfoIfMissingFrom(node20);
        node20.detachChildren();
        boolean boolean24 = node20.isDo();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        boolean boolean31 = node27.isNot();
        boolean boolean32 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100);
        node34.addSuppression("");
        com.google.javascript.rhino.Node node37 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100);
        node39.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node39.setStaticSourceFile(staticSourceFile42);
        boolean boolean44 = node39.isComma();
        boolean boolean45 = node39.isBlock();
        java.lang.String str46 = node39.toStringTree();
        boolean boolean47 = node39.isDec();
        node39.setWasEmptyNode(false);
        boolean boolean50 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100);
        node52.addSuppression("");
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node52.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node52.getStaticSourceFile();
        boolean boolean58 = node52.isVarArgs();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(40, node37, node39, node52);
        com.google.javascript.rhino.Node node60 = node39.detachFromParent();
        com.google.javascript.rhino.Node node61 = node20.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node61.isSyntheticBlock();
        node61.setLineno(1);
        com.google.javascript.rhino.jstype.JSType jSType65 = node61.getJSType();
        int int66 = node61.getSourcePosition();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100);
        node68.addChildrenToFront(node70);
        com.google.javascript.rhino.Node node72 = node70.getParent();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100);
        node74.addChildrenToFront(node76);
        node74.putIntProp((int) (short) 0, 38);
        node70.addChildToBack(node74);
        boolean boolean82 = node74.isNE();
        boolean boolean83 = node74.isSwitch();
        boolean boolean84 = node74.isThis();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 10, node61, node74, 38, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR [jsdoc_info: JSDocInfo]\n" + "'", str46, "OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str55, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4096 + "'", int66 == 4096);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test16979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16979");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor15 = strList13.iterator();
        boolean boolean16 = strList13.isEmpty();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        node18.addChildrenToFront(node20);
        int int22 = node18.getCharno();
        boolean boolean23 = strList13.equals((java.lang.Object) node18);
        java.lang.String str24 = strList13.toString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100);
        node26.addChildrenToFront(node28);
        boolean boolean30 = node26.isNot();
        boolean boolean31 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        node33.addSuppression("");
        com.google.javascript.rhino.Node node36 = node26.copyInformationFromForTree(node33);
        java.lang.Object obj38 = node36.getProp(38);
        node36.setCharno(2);
        boolean boolean41 = node36.isInstanceOf();
        boolean boolean42 = strList13.equals((java.lang.Object) node36);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node36.setJSType(jSType43);
        boolean boolean45 = node36.isNumber();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]" + "'", str24, "[, , hi!, OR [jsdoc_info: JSDocInfo], , OR [jsdoc_info: JSDocInfo]]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test16980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16980");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo8.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo8.isNoTypeCheck();
        boolean boolean12 = jSDocInfo8.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo8.getThisType();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100);
        node15.addChildrenToFront(node17);
        int int19 = node15.getCharno();
        boolean boolean20 = node15.isName();
        boolean boolean21 = node15.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node15, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        com.google.javascript.rhino.Node node25 = jSTypeExpression24.getRoot();
        boolean boolean26 = jSTypeExpression24.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean28 = jSTypeExpression24.equals((java.lang.Object) visibility27);
        jSDocInfo8.setVisibility(visibility27);
        jSDocInfo0.setVisibility(visibility27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16981");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 0, 42);
        boolean boolean4 = node3.isAssign();
        int int5 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = node3.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node7.setDouble((double) 213092);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test16982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16982");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor15 = strList6.listIterator();
        int int16 = strList6.size();
        boolean boolean17 = strList6.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        int int19 = strList6.lastIndexOf((java.lang.Object) visibility18);
        java.util.stream.Stream<java.lang.String> strStream20 = strList6.parallelStream();
        java.util.Iterator<java.lang.String> strItor21 = strList6.iterator();
        int int22 = strList6.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = strList6.asList();
        // The following exception was thrown during execution in test generation
        try {
            strList23.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test16983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16983");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 45);
        com.google.javascript.rhino.Node node2 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = node2.wasEmptyNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test16984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16984");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        node6.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node10 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node1.useSourceInfoFromForTree(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100);
        node13.addChildrenToFront(node15);
        int int17 = node13.getCharno();
        boolean boolean18 = node13.isName();
        boolean boolean19 = node13.isNE();
        boolean boolean20 = node13.isLabelName();
        boolean boolean21 = node8.isEquivalentToTyped(node13);
        java.util.Set<java.lang.String> strSet22 = node8.getDirectives();
        boolean boolean23 = node8.isDo();
        java.lang.String str24 = node8.toStringTree();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str4, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR\n" + "'", str24, "OR\n");
    }

    @Test
    public void test16985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16985");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n)", 12, (int) (byte) 10);
        java.lang.String[] strArray10 = new java.lang.String[] { "Named type with empty name component", "unknown", "Not declared as a type name", "(Unknown class name)", "Unknown class name", "JSDocInfo" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        strSet11.clear();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean29 = strList21.containsAll((java.util.Collection<java.lang.String>) strList28);
        int int30 = strList21.size();
        boolean boolean31 = strSet11.retainAll((java.util.Collection<java.lang.String>) strList21);
        java.util.Iterator<java.lang.String> strItor32 = strSet11.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isNoShadow();
        boolean boolean35 = jSDocInfo33.isNoShadow();
        boolean boolean36 = jSDocInfo33.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo33.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo33.getParameterType("NUMBER 4.0 1\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = jSDocInfo33.getTemplateTypeNames();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor41 = strList40.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = strList40.asList();
        boolean boolean43 = strSet11.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100);
        node45.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node45.setStaticSourceFile(staticSourceFile48);
        boolean boolean50 = node45.isComma();
        node45.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100);
        node54.addChildrenToFront(node56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node54.children();
        com.google.javascript.rhino.InputId inputId59 = null;
        node54.setInputId(inputId59);
        boolean boolean61 = node54.isName();
        java.lang.String str62 = node45.checkTreeEquals(node54);
        boolean boolean63 = node54.isStringKey();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100);
        node65.addChildrenToFront(node67);
        int int69 = node67.getType();
        com.google.javascript.rhino.InputId inputId70 = node67.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        node67.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node73 = node54.srcref(node67);
        boolean boolean74 = node54.isNoSideEffectsCall();
        boolean boolean75 = node54.isSyntheticBlock();
        int int76 = strList42.lastIndexOf((java.lang.Object) node54);
        com.google.javascript.rhino.Node node77 = node3.useSourceInfoFromForTree(node54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Named type with empty name component, unknown, Not declared as a type name, (Unknown class name), Unknown class name, JSDocInfo]");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str62, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test16986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16986");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        node7.addSuppression("");
        java.lang.String str10 = node7.toString();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        node12.addChildrenToFront(node14);
        com.google.javascript.rhino.Node node16 = node14.getParent();
        com.google.javascript.rhino.Node node17 = node7.useSourceInfoFromForTree(node14);
        boolean boolean18 = node1.hasChild(node7);
        boolean boolean19 = node7.hasMoreThanOneChild();
        boolean boolean20 = node7.isSwitch();
        node7.removeProp(39);
        boolean boolean23 = node7.isGetElem();
        boolean boolean24 = node7.isOr();
        java.lang.String str25 = node7.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str10, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test16987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16987");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        node1.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = null;
        node1.setStaticSourceFile(staticSourceFile4);
        boolean boolean6 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        node8.addChildrenToFront(node10);
        boolean boolean12 = node8.isNot();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isExprResult();
        boolean boolean17 = node15.isDefaultCase();
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node20.addChildrenToFront(node22);
        node20.putIntProp((int) (short) 0, 38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node20.getJsDocBuilderForNode();
        boolean boolean28 = node20.isNE();
        node20.detachChildren();
        com.google.javascript.rhino.Node node30 = node15.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node31 = node30.cloneTree();
        boolean boolean32 = node31.isScript();
        node31.setSourceEncodedPositionForTree(39);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test16988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16988");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        int int8 = node3.getType();
        com.google.javascript.rhino.Node node9 = node3.cloneTree();
        boolean boolean10 = node3.isGetElem();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.hasBaseType();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        int int14 = jSDocInfo11.getParameterCount();
        boolean boolean15 = jSDocInfo11.isConstant();
        java.lang.String str16 = jSDocInfo11.getSourceName();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo11.getParameterNames();
        java.util.stream.BaseStream[][] baseStreamArray19 = new java.util.stream.BaseStream[0][];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray20 = (java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][]) baseStreamArray19;
        java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[][] strBaseStreamArray21 = strSet17.toArray(strBaseStreamArray20);
        node3.setDirectives(strSet17);
        com.google.javascript.rhino.Node node23 = node3.detachFromParent();
        boolean boolean24 = node23.isCall();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(baseStreamArray19);
        org.junit.Assert.assertNotNull(strBaseStreamArray20);
        org.junit.Assert.assertNotNull(strBaseStreamArray21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16989");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.lang.String str2 = jSDocInfo0.getDescription();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100);
        node5.addSuppression("");
        java.lang.String str8 = node5.toString();
        com.google.javascript.rhino.Node node9 = node5.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node5.getStaticSourceFile();
        boolean boolean11 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100);
        node13.addSuppression("");
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node18.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = node5.useSourceInfoFrom(node18);
        boolean boolean26 = node5.isTrue();
        jSDocInfo0.setAssociatedNode(node5);
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getParameterNames();
        java.lang.String str29 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo0.getEnumParameterType();
        boolean boolean33 = jSDocInfo0.isExpose();
        boolean boolean34 = jSDocInfo0.isExterns();
        boolean boolean35 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str8, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str16, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16990");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str1 = ternaryValue0.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str6 = ternaryValue5.toString();
        boolean boolean8 = ternaryValue5.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue2.and(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue0.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str13 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean16 = ternaryValue14.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        java.lang.String str18 = ternaryValue17.toString();
        boolean boolean20 = ternaryValue17.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue14.and(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue9.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue25.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue12.or(ternaryValue27);
        java.lang.String str29 = ternaryValue12.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unknown" + "'", str1, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "unknown" + "'", str6, "unknown");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "unknown" + "'", str13, "unknown");
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "unknown" + "'", str18, "unknown");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "unknown" + "'", str29, "unknown");
    }

    @Test
    public void test16991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16991");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "unknown", (int) (byte) 10, 39);
        boolean boolean5 = node4.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        boolean boolean11 = node9.isLabel();
        boolean boolean12 = node4.isEquivalentTo(node9);
        boolean boolean13 = node4.isString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node4.getStaticSourceFile();
        int int16 = node4.getIntProp(2);
        node4.setSourceEncodedPositionForTree(16);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test16992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16992");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        com.google.javascript.rhino.Node node5 = node3.getParent();
        node3.setIsSyntheticBlock(true);
        boolean boolean8 = node3.isContinue();
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isSwitch();
        node3.removeProp((int) '4');
        boolean boolean13 = node3.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        boolean boolean15 = node3.isFromExterns();
        int int16 = node3.getType();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100);
        node18.addSuppression("");
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100);
        node23.addSuppression("");
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node23.removeFirstChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node18.copyInformationFromForTree(node23);
        int int30 = node29.getSideEffectFlags();
        boolean boolean31 = node29.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node32 = node3.useSourceInfoIfMissingFrom(node29);
        int int33 = node32.getType();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100);
        node35.addChildrenToFront(node37);
        int int39 = node35.getCharno();
        boolean boolean40 = node35.isName();
        boolean boolean41 = node35.isNE();
        boolean boolean42 = node35.isLabelName();
        boolean boolean43 = node35.isName();
        int int44 = node35.getSideEffectFlags();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100);
        node46.addChildrenToFront(node48);
        com.google.javascript.rhino.Node node50 = node48.getParent();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node48.setJSType(jSType51);
        java.lang.String str53 = node48.getSourceFileName();
        boolean boolean54 = node48.hasOneChild();
        com.google.javascript.rhino.Node node55 = node48.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node32.replaceChildAfter(node35, node55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str21, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str26, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test16993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16993");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100);
        node7.addChildrenToFront(node9);
        int int11 = node7.getCharno();
        boolean boolean12 = node7.isContinue();
        boolean boolean13 = strSet5.equals((java.lang.Object) node7);
        boolean boolean14 = node7.isSetterDef();
        int int15 = node7.getSourceOffset();
        int int16 = node7.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node7.cloneNode();
        node17.setSourceEncodedPosition((int) '#');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test16994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean4 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getFileOverview();
        java.lang.String str11 = jSDocInfo9.getFileOverview();
        boolean boolean12 = jSDocInfo9.isConstant();
        jSDocInfo9.setDeprecated(true);
        boolean boolean15 = jSDocInfo9.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = jSDocInfo9.getTemplateTypeNames();
        boolean boolean18 = jSDocInfo9.hasParameterType("OR");
        java.util.Set<java.lang.String> strSet19 = jSDocInfo9.getParameterNames();
        boolean boolean20 = jSDocInfo9.isNoTypeCheck();
        boolean boolean21 = jSDocInfo9.isInterface();
        boolean boolean22 = jSDocInfo9.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo9.getType();
        boolean boolean24 = strSet8.equals((java.lang.Object) jSDocInfo9);
        boolean boolean25 = jSDocInfo9.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16995");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean2 = node1.wasEmptyNode();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100);
        node4.addChildrenToFront(node6);
        com.google.javascript.rhino.Node node8 = node6.getParent();
        node6.setIsSyntheticBlock(true);
        boolean boolean11 = node6.isContinue();
        boolean boolean12 = node6.isParamList();
        boolean boolean13 = node6.isParamList();
        boolean boolean14 = node6.isOptionalArg();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100);
        node16.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100);
        node22.addSuppression("");
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(100);
        node27.addChildrenToFront(node29);
        com.google.javascript.rhino.Node node31 = node29.getParent();
        com.google.javascript.rhino.Node node32 = node22.useSourceInfoFromForTree(node29);
        boolean boolean33 = node16.hasChild(node22);
        boolean boolean34 = node16.isStringKey();
        int int35 = node16.getCharno();
        com.google.javascript.rhino.Node node36 = null;
        node6.addChildAfter(node16, node36);
        com.google.javascript.rhino.Node node38 = node1.srcrefTree(node16);
        boolean boolean39 = node16.isExprResult();
        int int40 = node16.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR [jsdoc_info: JSDocInfo]" + "'", str25, "OR [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test16996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16996");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "OR [directives: []]\n    OR\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test16997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16997");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean20 = strList12.containsAll((java.util.Collection<java.lang.String>) strList19);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor21 = strList12.listIterator();
        boolean boolean22 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100);
        node24.addSuppression("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        node24.setStaticSourceFile(staticSourceFile27);
        boolean boolean29 = node24.isComma();
        node24.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.children();
        com.google.javascript.rhino.InputId inputId38 = null;
        node33.setInputId(inputId38);
        boolean boolean40 = node33.isName();
        java.lang.String str41 = node24.checkTreeEquals(node33);
        boolean boolean42 = node33.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100);
        node44.addChildrenToFront(node46);
        boolean boolean48 = node44.isNot();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node51 = node44.copyInformationFromForTree(node50);
        com.google.javascript.rhino.InputId inputId52 = node44.getInputId();
        node33.addChildrenToFront(node44);
        boolean boolean54 = strList12.equals((java.lang.Object) node44);
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = strList12.reverse();
        java.util.stream.Stream<java.lang.String> strStream56 = strList55.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.isNoShadow();
        boolean boolean59 = jSDocInfo57.isNoTypeCheck();
        boolean boolean60 = jSDocInfo57.isIdGenerator();
        boolean boolean61 = jSDocInfo57.hasTypedefType();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo57.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = strList55.removeAll((java.util.Collection<java.lang.String>) strSet62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n" + "'", str41, "Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test16998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16998");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of("", "", "hi!", "OR [jsdoc_info: JSDocInfo]", "", "OR [jsdoc_info: JSDocInfo]");
        boolean boolean14 = strList6.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = strList6.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor17 = strList6.iterator();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        int int21 = strList6.lastIndexOf((java.lang.Object) booleanLiteralSet20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strList6.add("(((NUMBER 1.0 37\n)))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test16999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16999");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test17000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test17000");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100);
        node1.addChildrenToFront(node3);
        int int5 = node1.getCharno();
        boolean boolean6 = node1.isName();
        boolean boolean7 = node1.isNE();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node1, "Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression9);
        com.google.javascript.rhino.Node node11 = jSTypeExpression10.getRoot();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        boolean boolean13 = jSTypeExpression10.isVarArgs();
        com.google.javascript.rhino.Node node14 = jSTypeExpression10.getRoot();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasBaseType();
        jSDocInfo15.setLicense("Node tree inequality:\nTree1:\nOR 0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nOR\n    OR\n\n\nSubtree1: OR 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: OR\n    OR\n");
        jSDocInfo15.setLicense("Not declared as a type name");
        boolean boolean22 = jSDocInfo15.hasDescriptionForParameter("OR 0 [jsdoc_info: JSDocInfo]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo15.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo15.isNoSideEffects();
        boolean boolean25 = jSTypeExpression10.equals((java.lang.Object) jSDocInfo15);
        boolean boolean26 = jSTypeExpression10.isVarArgs();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }
}

